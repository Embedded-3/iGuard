
SensorSetting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003aac  08003aac  00004aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b28  08003b28  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b28  08003b28  00004b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b30  08003b30  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b34  08003b34  00004b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b38  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  08003b94  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08003b94  00005338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc56  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002746  00000000  00000000  00011cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019398  00000000  00000000  00015ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c6  00000000  00000000  0002f064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009162a  00000000  00000000  0004012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1754  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  000d1798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d559c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a94 	.word	0x08003a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003a94 	.word	0x08003a94

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b18      	ldr	r3, [pc, #96]	@ (80001d0 <MX_ADC1_Init+0x74>)
 800016e:	4a19      	ldr	r2, [pc, #100]	@ (80001d4 <MX_ADC1_Init+0x78>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000172:	4b17      	ldr	r3, [pc, #92]	@ (80001d0 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000178:	4b15      	ldr	r3, [pc, #84]	@ (80001d0 <MX_ADC1_Init+0x74>)
 800017a:	2200      	movs	r2, #0
 800017c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800017e:	4b14      	ldr	r3, [pc, #80]	@ (80001d0 <MX_ADC1_Init+0x74>)
 8000180:	2200      	movs	r2, #0
 8000182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000184:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <MX_ADC1_Init+0x74>)
 8000186:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018c:	4b10      	ldr	r3, [pc, #64]	@ (80001d0 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000192:	4b0f      	ldr	r3, [pc, #60]	@ (80001d0 <MX_ADC1_Init+0x74>)
 8000194:	2201      	movs	r2, #1
 8000196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000198:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <MX_ADC1_Init+0x74>)
 800019a:	f000 fd55 	bl	8000c48 <HAL_ADC_Init>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001a4:	f000 f9fa 	bl	800059c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80001a8:	230b      	movs	r3, #11
 80001aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4805      	ldr	r0, [pc, #20]	@ (80001d0 <MX_ADC1_Init+0x74>)
 80001ba:	f000 fe1d 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001c4:	f000 f9ea 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000078 	.word	0x20000078
 80001d4:	40012400 	.word	0x40012400

080001d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a14      	ldr	r2, [pc, #80]	@ (8000244 <HAL_ADC_MspInit+0x6c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d121      	bne.n	800023c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001f8:	4b13      	ldr	r3, [pc, #76]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 80001fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000210:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <HAL_ADC_MspInit+0x70>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0310 	and.w	r3, r3, #16
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000228:	2302      	movs	r3, #2
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800022c:	2303      	movs	r3, #3
 800022e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <HAL_ADC_MspInit+0x74>)
 8000238:	f001 f920 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40011000 	.word	0x40011000

08000250 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000254:	4b16      	ldr	r3, [pc, #88]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000256:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <MX_CAN_Init+0x64>)
 8000258:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800025a:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <MX_CAN_Init+0x60>)
 800025c:	2210      	movs	r2, #16
 800025e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000260:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000266:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800026c:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_CAN_Init+0x60>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000274:	2200      	movs	r2, #0
 8000276:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <MX_CAN_Init+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000280:	2200      	movs	r2, #0
 8000282:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000286:	2200      	movs	r2, #0
 8000288:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_CAN_Init+0x60>)
 800028c:	2200      	movs	r2, #0
 800028e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000292:	2200      	movs	r2, #0
 8000294:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_CAN_Init+0x60>)
 8000298:	2200      	movs	r2, #0
 800029a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	@ (80002b0 <MX_CAN_Init+0x60>)
 800029e:	f000 fee4 	bl	800106a <HAL_CAN_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80002a8:	f000 f978 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200000a8 	.word	0x200000a8
 80002b4:	40006400 	.word	0x40006400

080002b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	f107 0310 	add.w	r3, r7, #16
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000344 <HAL_CAN_MspInit+0x8c>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d131      	bne.n	800033c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002da:	69db      	ldr	r3, [r3, #28]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002e2:	61d3      	str	r3, [r2, #28]
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a14      	ldr	r2, [pc, #80]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <HAL_CAN_MspInit+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000308:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800030c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	480b      	ldr	r0, [pc, #44]	@ (800034c <HAL_CAN_MspInit+0x94>)
 800031e:	f001 f8ad 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000328:	2302      	movs	r3, #2
 800032a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800032c:	2303      	movs	r3, #3
 800032e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <HAL_CAN_MspInit+0x94>)
 8000338:	f001 f8a0 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40006400 	.word	0x40006400
 8000348:	40021000 	.word	0x40021000
 800034c:	40010800 	.word	0x40010800

08000350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4b33      	ldr	r3, [pc, #204]	@ (8000434 <MX_GPIO_Init+0xe4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a32      	ldr	r2, [pc, #200]	@ (8000434 <MX_GPIO_Init+0xe4>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b30      	ldr	r3, [pc, #192]	@ (8000434 <MX_GPIO_Init+0xe4>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b2d      	ldr	r3, [pc, #180]	@ (8000434 <MX_GPIO_Init+0xe4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <MX_GPIO_Init+0xe4>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b2a      	ldr	r3, [pc, #168]	@ (8000434 <MX_GPIO_Init+0xe4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b27      	ldr	r3, [pc, #156]	@ (8000434 <MX_GPIO_Init+0xe4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a26      	ldr	r2, [pc, #152]	@ (8000434 <MX_GPIO_Init+0xe4>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <MX_GPIO_Init+0xe4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MX_GPIO_Init+0xe4>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a20      	ldr	r2, [pc, #128]	@ (8000434 <MX_GPIO_Init+0xe4>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <MX_GPIO_Init+0xe4>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2120      	movs	r1, #32
 80003c8:	481b      	ldr	r0, [pc, #108]	@ (8000438 <MX_GPIO_Init+0xe8>)
 80003ca:	f001 f9f2 	bl	80017b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_GPIO_Init+0xec>)
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	4817      	ldr	r0, [pc, #92]	@ (8000440 <MX_GPIO_Init+0xf0>)
 80003e4:	f001 f84a 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003e8:	2320      	movs	r3, #32
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	480e      	ldr	r0, [pc, #56]	@ (8000438 <MX_GPIO_Init+0xe8>)
 8000400:	f001 f83c 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000404:	2310      	movs	r3, #16
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480b      	ldr	r0, [pc, #44]	@ (8000444 <MX_GPIO_Init+0xf4>)
 8000418:	f001 f830 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2028      	movs	r0, #40	@ 0x28
 8000422:	f000 fff4 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000426:	2028      	movs	r0, #40	@ 0x28
 8000428:	f001 f80d 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800
 800043c:	10110000 	.word	0x10110000
 8000440:	40011000 	.word	0x40011000
 8000444:	40010c00 	.word	0x40010c00

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fb75 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f845 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f7ff ff7b 	bl	8000350 <MX_GPIO_Init>
  MX_ADC1_Init();
 800045a:	f7ff fe7f 	bl	800015c <MX_ADC1_Init>
  MX_TIM2_Init();
 800045e:	f000 f94f 	bl	8000700 <MX_TIM2_Init>
  MX_USART2_Init();
 8000462:	f000 fa2d 	bl	80008c0 <MX_USART2_Init>
  MX_CAN_Init();
 8000466:	f7ff fef3 	bl	8000250 <MX_CAN_Init>
  MX_USART1_Init();
 800046a:	f000 f9fd 	bl	8000868 <MX_USART1_Init>
  MX_USART3_Init();
 800046e:	f000 fa53 	bl	8000918 <MX_USART3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(3000);
 8000472:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000476:	f000 fbc3 	bl	8000c00 <HAL_Delay>
	  bReadHCSR501 = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 800047a:	2110      	movs	r1, #16
 800047c:	4813      	ldr	r0, [pc, #76]	@ (80004cc <main+0x84>)
 800047e:	f001 f981 	bl	8001784 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <main+0x88>)
 8000488:	701a      	strb	r2, [r3, #0]
	  char buffer[20];
	  //HAL_USART_Transmit(&husart2, (char*)"main", 8, HAL_MAX_DELAY);
	  switch(bReadHCSR501){
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <main+0x88>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <main+0x52>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d006      	beq.n	80004a6 <main+0x5e>
	  		break;
	  	case(GPIO_PIN_SET):
			sprintf(buffer, "Detective\n");
	  		break;
	  	default:
	  		break;
 8000498:	e00b      	b.n	80004b2 <main+0x6a>
			sprintf(buffer, "Not Detective\n");
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	490d      	ldr	r1, [pc, #52]	@ (80004d4 <main+0x8c>)
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fe48 	bl	8003134 <siprintf>
	  		break;
 80004a4:	e005      	b.n	80004b2 <main+0x6a>
			sprintf(buffer, "Detective\n");
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	490b      	ldr	r1, [pc, #44]	@ (80004d8 <main+0x90>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 fe42 	bl	8003134 <siprintf>
	  		break;
 80004b0:	bf00      	nop

	  }
	  HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe49 	bl	800014c <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b29a      	uxth	r2, r3
 80004be:	1d39      	adds	r1, r7, #4
 80004c0:	f04f 33ff 	mov.w	r3, #4294967295
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <main+0x94>)
 80004c6:	f002 fc56 	bl	8002d76 <HAL_USART_Transmit>
  {
 80004ca:	e7d2      	b.n	8000472 <main+0x2a>
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	200000d0 	.word	0x200000d0
 80004d4:	08003aac 	.word	0x08003aac
 80004d8:	08003abc 	.word	0x08003abc
 80004dc:	20000164 	.word	0x20000164

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	@ 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ea:	2228      	movs	r2, #40	@ 0x28
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fe40 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	2310      	movs	r3, #16
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051c:	2302      	movs	r3, #2
 800051e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000520:	2300      	movs	r3, #0
 8000522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000524:	2300      	movs	r3, #0
 8000526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800052c:	4618      	mov	r0, r3
 800052e:	f001 f97b 	bl	8001828 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000538:	f000 f830 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2302      	movs	r3, #2
 8000542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f001 fbe7 	bl	8001d2c <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000564:	f000 f81a 	bl	800059c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000568:	2302      	movs	r3, #2
 800056a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fd68 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800057e:	f000 f80d 	bl	800059c <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	@ 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM2)
   {
	   //bReadHCSR501 = HCSR501_Read();
   }
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <Error_Handler+0x8>

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 fab4 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <TIM2_IRQHandler+0x10>)
 800066a:	f001 fe4a 	bl	8002302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000d8 	.word	0x200000d8

08000678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800067c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000680:	f001 f8b0 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000690:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <_sbrk+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <_sbrk+0x60>)
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <_sbrk+0x64>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <_sbrk+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b8:	f002 fd64 	bl	8003184 <__errno>
 80006bc:	4603      	mov	r3, r0
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	e009      	b.n	80006dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <_sbrk+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20005000 	.word	0x20005000
 80006e8:	00000400 	.word	0x00000400
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	20000338 	.word	0x20000338

080006f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <MX_TIM2_Init+0xdc>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000734:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_TIM2_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000742:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_TIM2_Init+0xdc>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	4821      	ldr	r0, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000756:	f001 fd2d 	bl	80021b4 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000760:	f7ff ff1c 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	4619      	mov	r1, r3
 8000770:	481a      	ldr	r0, [pc, #104]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000772:	f001 ff52 	bl	800261a <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800077c:	f7ff ff0e 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000780:	4816      	ldr	r0, [pc, #88]	@ (80007dc <MX_TIM2_Init+0xdc>)
 8000782:	f001 fd66 	bl	8002252 <HAL_TIM_IC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800078c:	f7ff ff06 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	480f      	ldr	r0, [pc, #60]	@ (80007dc <MX_TIM2_Init+0xdc>)
 80007a0:	f002 fa38 	bl	8002c14 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80007aa:	f7ff fef7 	bl	800059c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_TIM2_Init+0xdc>)
 80007c6:	f001 fe8c 	bl	80024e2 <HAL_TIM_IC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80007d0:	f7ff fee4 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000d8 	.word	0x200000d8

080007e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007fe:	d12b      	bne.n	8000858 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_TIM_Base_MspInit+0x80>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4808      	ldr	r0, [pc, #32]	@ (8000864 <HAL_TIM_Base_MspInit+0x84>)
 8000844:	f000 fe1a 	bl	800147c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	201c      	movs	r0, #28
 800084e:	f000 fdde 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000852:	201c      	movs	r0, #28
 8000854:	f000 fdf7 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <MX_USART1_Init>:
USART_HandleTypeDef husart2;
USART_HandleTypeDef husart3;

/* USART1 init function */
void MX_USART1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_USART1_Init+0x50>)
 800086e:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <MX_USART1_Init+0x54>)
 8000870:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART1_Init+0x50>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USART1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MX_USART1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_USART1_Init+0x50>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_USART1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_USART1_Init+0x50>)
 80008a6:	f002 fa25 	bl	8002cf4 <HAL_USART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80008b0:	f7ff fe74 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000120 	.word	0x20000120
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART2_Init>:
/* USART2 init function */
void MX_USART2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_USART2_Init+0x50>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <MX_USART2_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USART2_Init+0x50>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_USART2_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_USART2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USART2_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_USART2_Init+0x50>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USART2_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_USART2_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USART2_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_USART2_Init+0x50>)
 80008fe:	f002 f9f9 	bl	8002cf4 <HAL_USART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000908:	f7ff fe48 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000164 	.word	0x20000164
 8000914:	40004400 	.word	0x40004400

08000918 <MX_USART3_Init>:
/* USART3 init function */
void MX_USART3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_USART3_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_USART3_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USART3_Init+0x50>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_USART3_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_USART3_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USART3_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_USART3_Init+0x50>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USART3_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_USART3_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USART3_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_USART3_Init+0x50>)
 8000956:	f002 f9cd 	bl	8002cf4 <HAL_USART_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 8000960:	f7ff fe1c 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001a8 	.word	0x200001a8
 800096c:	40004800 	.word	0x40004800

08000970 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(usartHandle->Instance==USART1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a53      	ldr	r2, [pc, #332]	@ (8000ad8 <HAL_USART_MspInit+0x168>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d132      	bne.n	80009f6 <HAL_USART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b52      	ldr	r3, [pc, #328]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a51      	ldr	r2, [pc, #324]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b4f      	ldr	r3, [pc, #316]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a4:	61fb      	str	r3, [r7, #28]
 80009a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b4c      	ldr	r3, [pc, #304]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a4b      	ldr	r2, [pc, #300]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b49      	ldr	r3, [pc, #292]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4619      	mov	r1, r3
 80009d4:	4842      	ldr	r0, [pc, #264]	@ (8000ae0 <HAL_USART_MspInit+0x170>)
 80009d6:	f000 fd51 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4619      	mov	r1, r3
 80009ee:	483c      	ldr	r0, [pc, #240]	@ (8000ae0 <HAL_USART_MspInit+0x170>)
 80009f0:	f000 fd44 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009f4:	e06c      	b.n	8000ad0 <HAL_USART_MspInit+0x160>
  else if(usartHandle->Instance==USART2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae4 <HAL_USART_MspInit+0x174>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d130      	bne.n	8000a62 <HAL_USART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a00:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	4a35      	ldr	r2, [pc, #212]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0a:	61d3      	str	r3, [r2, #28]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a30:	230c      	movs	r3, #12
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4619      	mov	r1, r3
 8000a42:	4827      	ldr	r0, [pc, #156]	@ (8000ae0 <HAL_USART_MspInit+0x170>)
 8000a44:	f000 fd1a 	bl	800147c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4821      	ldr	r0, [pc, #132]	@ (8000ae0 <HAL_USART_MspInit+0x170>)
 8000a5c:	f000 fd0e 	bl	800147c <HAL_GPIO_Init>
}
 8000a60:	e036      	b.n	8000ad0 <HAL_USART_MspInit+0x160>
  else if(usartHandle->Instance==USART3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a20      	ldr	r2, [pc, #128]	@ (8000ae8 <HAL_USART_MspInit+0x178>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d131      	bne.n	8000ad0 <HAL_USART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a1a      	ldr	r2, [pc, #104]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_USART_MspInit+0x16c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	@ (8000aec <HAL_USART_MspInit+0x17c>)
 8000ab2:	f000 fce3 	bl	800147c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4808      	ldr	r0, [pc, #32]	@ (8000aec <HAL_USART_MspInit+0x17c>)
 8000acc:	f000 fcd6 	bl	800147c <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	@ 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40004800 	.word	0x40004800
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff fe00 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af6:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b0c:	4c09      	ldr	r4, [pc, #36]	@ (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f002 fb39 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fc93 	bl	8000448 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b2c:	08003b38 	.word	0x08003b38
  ldr r2, =_sbss
 8000b30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b34:	20000338 	.word	0x20000338

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 fc53 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fd26 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc6b 	bl	8001462 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 fc33 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200001ec 	.word	0x200001ec

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	@ (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	200001ec 	.word	0x200001ec

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0be      	b.n	8000de8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff faa6 	bl	80001d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f9ab 	bl	8000fe8 <ADC_ConversionStop_Disable>
 8000c92:	4603      	mov	r3, r0
 8000c94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8099 	bne.w	8000dd6 <HAL_ADC_Init+0x18e>
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8095 	bne.w	8000dd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	f043 0202 	orr.w	r2, r3, #2
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7b1b      	ldrb	r3, [r3, #12]
 8000cce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ce0:	d003      	beq.n	8000cea <HAL_ADC_Init+0xa2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d102      	bne.n	8000cf0 <HAL_ADC_Init+0xa8>
 8000cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cee:	e000      	b.n	8000cf2 <HAL_ADC_Init+0xaa>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d119      	bne.n	8000d34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7b1b      	ldrb	r3, [r3, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d109      	bne.n	8000d1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	035a      	lsls	r2, r3, #13
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	e00b      	b.n	8000d34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	f043 0220 	orr.w	r2, r3, #32
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <HAL_ADC_Init+0x1a8>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d64:	d003      	beq.n	8000d6e <HAL_ADC_Init+0x126>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d104      	bne.n	8000d78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	051b      	lsls	r3, r3, #20
 8000d76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <HAL_ADC_Init+0x1ac>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d10b      	bne.n	8000db4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000db2:	e018      	b.n	8000de6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db8:	f023 0312 	bic.w	r3, r3, #18
 8000dbc:	f043 0210 	orr.w	r2, r3, #16
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd4:	e007      	b.n	8000de6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	ffe1f7fd 	.word	0xffe1f7fd
 8000df4:	ff1f0efe 	.word	0xff1f0efe

08000df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e0dc      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1da>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d81c      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b05      	subs	r3, #5
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b05      	subs	r3, #5
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e60:	e03c      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d81c      	bhi.n	8000ea4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	@ 0x23
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4019      	ands	r1, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b23      	subs	r3, #35	@ 0x23
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea2:	e01b      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b41      	subs	r3, #65	@ 0x41
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b41      	subs	r3, #65	@ 0x41
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d91c      	bls.n	8000f1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b1e      	subs	r3, #30
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b1e      	subs	r3, #30
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	e019      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d003      	beq.n	8000f62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	2b11      	cmp	r3, #17
 8000f60:	d132      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d125      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d126      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d11a      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9a      	lsrs	r2, r3, #18
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x1b2>
 8000fb6:	e007      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	f043 0220 	orr.w	r2, r3, #32
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40012400 	.word	0x40012400
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	431bde83 	.word	0x431bde83

08000fe8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d12e      	bne.n	8001060 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001012:	f7ff fdeb 	bl	8000bec <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001018:	e01b      	b.n	8001052 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800101a:	f7ff fde7 	bl	8000bec <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d914      	bls.n	8001052 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10d      	bne.n	8001052 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e007      	b.n	8001062 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d0dc      	beq.n	800101a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0ed      	b.n	8001258 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f915 	bl	80002b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109e:	f7ff fda5 	bl	8000bec <HAL_GetTick>
 80010a2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a4:	e012      	b.n	80010cc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a6:	f7ff fda1 	bl	8000bec <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b0a      	cmp	r3, #10
 80010b2:	d90b      	bls.n	80010cc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2205      	movs	r2, #5
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0c5      	b.n	8001258 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0e5      	beq.n	80010a6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0202 	bic.w	r2, r2, #2
 80010e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ea:	f7ff fd7f 	bl	8000bec <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f0:	e012      	b.n	8001118 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f2:	f7ff fd7b 	bl	8000bec <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	d90b      	bls.n	8001118 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001104:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2205      	movs	r2, #5
 8001110:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e09f      	b.n	8001258 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e5      	bne.n	80010f2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7e1b      	ldrb	r3, [r3, #24]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e5b      	ldrb	r3, [r3, #25]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e9b      	ldrb	r3, [r3, #26]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0220 	bic.w	r2, r2, #32
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7edb      	ldrb	r3, [r3, #27]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e007      	b.n	80011ce <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0210 	orr.w	r2, r2, #16
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7f1b      	ldrb	r3, [r3, #28]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0208 	orr.w	r2, r2, #8
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0208 	bic.w	r2, r2, #8
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7f5b      	ldrb	r3, [r3, #29]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d108      	bne.n	8001212 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0204 	orr.w	r2, r2, #4
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e007      	b.n	8001222 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0204 	bic.w	r2, r2, #4
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	ea42 0103 	orr.w	r1, r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	@ (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff90 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff2d 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff42 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff35 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	@ 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e169      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001490:	2201      	movs	r2, #1
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8158 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a9a      	ldr	r2, [pc, #616]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d05e      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014b8:	4a98      	ldr	r2, [pc, #608]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d875      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014be:	4a98      	ldr	r2, [pc, #608]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d058      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014c4:	4a96      	ldr	r2, [pc, #600]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d86f      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ca:	4a96      	ldr	r2, [pc, #600]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d052      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014d0:	4a94      	ldr	r2, [pc, #592]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d869      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014d6:	4a94      	ldr	r2, [pc, #592]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04c      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014dc:	4a92      	ldr	r2, [pc, #584]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d863      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014e2:	4a92      	ldr	r2, [pc, #584]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d046      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014e8:	4a90      	ldr	r2, [pc, #576]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d85d      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d82a      	bhi.n	8001548 <HAL_GPIO_Init+0xcc>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d859      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014f6:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <HAL_GPIO_Init+0x80>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001577 	.word	0x08001577
 8001500:	08001551 	.word	0x08001551
 8001504:	08001563 	.word	0x08001563
 8001508:	080015a5 	.word	0x080015a5
 800150c:	080015ab 	.word	0x080015ab
 8001510:	080015ab 	.word	0x080015ab
 8001514:	080015ab 	.word	0x080015ab
 8001518:	080015ab 	.word	0x080015ab
 800151c:	080015ab 	.word	0x080015ab
 8001520:	080015ab 	.word	0x080015ab
 8001524:	080015ab 	.word	0x080015ab
 8001528:	080015ab 	.word	0x080015ab
 800152c:	080015ab 	.word	0x080015ab
 8001530:	080015ab 	.word	0x080015ab
 8001534:	080015ab 	.word	0x080015ab
 8001538:	080015ab 	.word	0x080015ab
 800153c:	080015ab 	.word	0x080015ab
 8001540:	08001559 	.word	0x08001559
 8001544:	0800156d 	.word	0x0800156d
 8001548:	4a79      	ldr	r2, [pc, #484]	@ (8001730 <HAL_GPIO_Init+0x2b4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154e:	e02c      	b.n	80015aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e029      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e024      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	3308      	adds	r3, #8
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e01f      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	330c      	adds	r3, #12
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e01a      	b.n	80015ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157e:	2304      	movs	r3, #4
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e013      	b.n	80015ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	611a      	str	r2, [r3, #16]
          break;
 8001596:	e009      	b.n	80015ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	615a      	str	r2, [r3, #20]
          break;
 80015a2:	e003      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x130>
          break;
 80015aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d801      	bhi.n	80015b6 <HAL_GPIO_Init+0x13a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_Init+0x13e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	@ 0xff
 80015c0:	d802      	bhi.n	80015c8 <HAL_GPIO_Init+0x14c>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x152>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	210f      	movs	r1, #15
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80b1 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a4c      	ldr	r2, [pc, #304]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001614:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a40      	ldr	r2, [pc, #256]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3f      	ldr	r2, [pc, #252]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3e      	ldr	r2, [pc, #248]	@ (8001744 <HAL_GPIO_Init+0x2c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e0>
 8001658:	2303      	movs	r3, #3
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 800165c:	2304      	movs	r3, #4
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001668:	2300      	movs	r3, #0
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167a:	492f      	ldr	r1, [pc, #188]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	492c      	ldr	r1, [pc, #176]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4928      	ldr	r1, [pc, #160]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4922      	ldr	r1, [pc, #136]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	491e      	ldr	r1, [pc, #120]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4918      	ldr	r1, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4914      	ldr	r1, [pc, #80]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e021      	b.n	800175e <HAL_GPIO_Init+0x2e2>
 800171a:	bf00      	nop
 800171c:	10320000 	.word	0x10320000
 8001720:	10310000 	.word	0x10310000
 8001724:	10220000 	.word	0x10220000
 8001728:	10210000 	.word	0x10210000
 800172c:	10120000 	.word	0x10120000
 8001730:	10110000 	.word	0x10110000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_GPIO_Init+0x304>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4909      	ldr	r1, [pc, #36]	@ (8001780 <HAL_GPIO_Init+0x304>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	f47f ae8e 	bne.w	8001490 <HAL_GPIO_Init+0x14>
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	372c      	adds	r7, #44	@ 0x2c
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	807b      	strh	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c2:	787b      	ldrb	r3, [r7, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c8:	887a      	ldrh	r2, [r7, #2]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ce:	e003      	b.n	80017d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	041a      	lsls	r2, r3, #16
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	611a      	str	r2, [r3, #16]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f806 	bl	8001814 <HAL_GPIO_EXTI_Callback>
  }
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e272      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001848:	4b92      	ldr	r3, [pc, #584]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b04      	cmp	r3, #4
 8001852:	d00c      	beq.n	800186e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001854:	4b8f      	ldr	r3, [pc, #572]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d112      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
 8001860:	4b8c      	ldr	r3, [pc, #560]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b89      	ldr	r3, [pc, #548]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06c      	beq.n	8001954 <HAL_RCC_OscConfig+0x12c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d168      	bne.n	8001954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e24c      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x76>
 8001890:	4b80      	ldr	r3, [pc, #512]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7f      	ldr	r2, [pc, #508]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x98>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b78      	ldr	r3, [pc, #480]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a77      	ldr	r2, [pc, #476]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbc>
 80018ca:	4b72      	ldr	r3, [pc, #456]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a71      	ldr	r2, [pc, #452]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b68      	ldr	r3, [pc, #416]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a67      	ldr	r2, [pc, #412]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f972 	bl	8000bec <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f96e 	bl	8000bec <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e200      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xe4>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f95e 	bl	8000bec <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f95a 	bl	8000bec <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1ec      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b53      	ldr	r3, [pc, #332]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x10c>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196e:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
 800197a:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1c0      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4939      	ldr	r1, [pc, #228]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f913 	bl	8000bec <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f90f 	bl	8000bec <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1a1      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4927      	ldr	r1, [pc, #156]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8f2 	bl	8000bec <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f8ee 	bl	8000bec <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e180      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03a      	beq.n	8001aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff f8d2 	bl	8000bec <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8ce 	bl	8000bec <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e160      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 face 	bl	800200c <RCC_Delay>
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f8b8 	bl	8000bec <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f8b4 	bl	8000bec <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d908      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e146      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	42420000 	.word	0x42420000
 8001a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e9      	bne.n	8001a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a6 	beq.w	8001c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b8b      	ldr	r3, [pc, #556]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b88      	ldr	r3, [pc, #544]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a87      	ldr	r2, [pc, #540]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b85      	ldr	r3, [pc, #532]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b82      	ldr	r3, [pc, #520]	@ (8001cf0 <HAL_RCC_OscConfig+0x4c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf0 <HAL_RCC_OscConfig+0x4c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf0 <HAL_RCC_OscConfig+0x4c8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff f875 	bl	8000bec <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff f871 	bl	8000bec <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	@ 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e103      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b75      	ldr	r3, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0x4c8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x312>
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e02d      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x334>
 8001b42:	4b6a      	ldr	r3, [pc, #424]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a69      	ldr	r2, [pc, #420]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b67      	ldr	r3, [pc, #412]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a66      	ldr	r2, [pc, #408]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	e01c      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x356>
 8001b64:	4b61      	ldr	r3, [pc, #388]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a60      	ldr	r2, [pc, #384]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a5a      	ldr	r2, [pc, #360]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f825 	bl	8000bec <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f821 	bl	8000bec <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0b1      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ee      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f80f 	bl	8000bec <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff f80b 	bl	8000bec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e09b      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b40      	ldr	r3, [pc, #256]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8087 	beq.w	8001d1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d061      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d146      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_RCC_OscConfig+0x4cc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffdf 	bl	8000bec <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe ffdb 	bl	8000bec <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e06d      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4921      	ldr	r1, [pc, #132]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a19      	ldr	r1, [r3, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	491b      	ldr	r1, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe ffaf 	bl	8000bec <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe ffab 	bl	8000bec <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e03d      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46a>
 8001cb0:	e035      	b.n	8001d1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff98 	bl	8000bec <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe ff94 	bl	8000bec <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e026      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x498>
 8001cde:	e01e      	b.n	8001d1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e019      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_RCC_OscConfig+0x500>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0d0      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b6a      	ldr	r3, [pc, #424]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b67      	ldr	r3, [pc, #412]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4965      	ldr	r1, [pc, #404]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a52      	ldr	r2, [pc, #328]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d040      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d115      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b41      	ldr	r3, [pc, #260]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e073      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06b      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4936      	ldr	r1, [pc, #216]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe fee6 	bl	8000bec <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe fee2 	bl	8000bec <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e053      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d210      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4922      	ldr	r1, [pc, #136]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f821 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	490a      	ldr	r1, [pc, #40]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	5ccb      	ldrb	r3, [r1, r3]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_ClockConfig+0x1d0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fe44 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08003ac8 	.word	0x08003ac8
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x30>
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2e:	e027      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f32:	613b      	str	r3, [r7, #16]
      break;
 8001f34:	e027      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0c9b      	lsrs	r3, r3, #18
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0c5b      	lsrs	r3, r3, #17
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f62:	fb03 f202 	mul.w	r2, r3, r2
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e004      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	613b      	str	r3, [r7, #16]
      break;
 8001f7e:	e002      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f86:	693b      	ldr	r3, [r7, #16]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	08003ae0 	.word	0x08003ae0
 8001fa0:	08003af0 	.word	0x08003af0
 8001fa4:	003d0900 	.word	0x003d0900

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b02      	ldr	r3, [pc, #8]	@ (8001fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000000 	.word	0x20000000

08001fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc0:	f7ff fff2 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4903      	ldr	r1, [pc, #12]	@ (8001fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08003ad8 	.word	0x08003ad8

08001fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0adb      	lsrs	r3, r3, #11
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	@ (8002008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08003ad8 	.word	0x08003ad8

0800200c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <RCC_Delay+0x34>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <RCC_Delay+0x38>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a5b      	lsrs	r3, r3, #9
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002028:	bf00      	nop
  }
  while (Delay --);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	60fa      	str	r2, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <RCC_Delay+0x1c>
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000000 	.word	0x20000000
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d07d      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002068:	4b4f      	ldr	r3, [pc, #316]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b4c      	ldr	r3, [pc, #304]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a4b      	ldr	r2, [pc, #300]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	61d3      	str	r3, [r2, #28]
 8002080:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d118      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209c:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fda0 	bl	8000bec <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	e008      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fd9c 	bl	8000bec <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e06d      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ce:	4b36      	ldr	r3, [pc, #216]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d02e      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d027      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ec:	4b2e      	ldr	r3, [pc, #184]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f6:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fc:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002102:	4a29      	ldr	r2, [pc, #164]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d014      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fd6b 	bl	8000bec <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fd67 	bl	8000bec <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e036      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4917      	ldr	r1, [pc, #92]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	4313      	orrs	r3, r2
 800214c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	490b      	ldr	r1, [pc, #44]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4904      	ldr	r1, [pc, #16]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
 80021b0:	42420440 	.word	0x42420440

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fb00 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fafc 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e041      	b.n	80022e8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f839 	bl	80022f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f000 faad 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0202 	mvn.w	r2, #2
 8002336:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa34 	bl	80027ba <HAL_TIM_IC_CaptureCallback>
 8002352:	e005      	b.n	8002360 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa27 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa36 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01b      	beq.n	80023b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0204 	mvn.w	r2, #4
 8002382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa0e 	bl	80027ba <HAL_TIM_IC_CaptureCallback>
 800239e:	e005      	b.n	80023ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa01 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa10 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01b      	beq.n	80023fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0208 	mvn.w	r2, #8
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2204      	movs	r2, #4
 80023d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9e8 	bl	80027ba <HAL_TIM_IC_CaptureCallback>
 80023ea:	e005      	b.n	80023f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9db 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9ea 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01b      	beq.n	800244a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0210 	mvn.w	r2, #16
 800241a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2208      	movs	r2, #8
 8002420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9c2 	bl	80027ba <HAL_TIM_IC_CaptureCallback>
 8002436:	e005      	b.n	8002444 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f9b5 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9c4 	bl	80027cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0201 	mvn.w	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe f88e 	bl	800058a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800248a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fc28 	bl	8002ce2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00c      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f994 	bl	80027de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0220 	mvn.w	r2, #32
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fbfb 	bl	8002cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_TIM_IC_ConfigChannel+0x1e>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e088      	b.n	8002612 <HAL_TIM_IC_ConfigChannel+0x130>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11b      	bne.n	8002546 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800251e:	f000 f9d5 	bl	80028cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 020c 	bic.w	r2, r2, #12
 8002530:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6999      	ldr	r1, [r3, #24]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	e060      	b.n	8002608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d11c      	bne.n	8002586 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800255c:	f000 fa3e 	bl	80029dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800256e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	021a      	lsls	r2, r3, #8
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	e040      	b.n	8002608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800259c:	f000 fa89 	bl	8002ab2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020c 	bic.w	r2, r2, #12
 80025ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69d9      	ldr	r1, [r3, #28]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	61da      	str	r2, [r3, #28]
 80025c2:	e021      	b.n	8002608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d11c      	bne.n	8002604 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80025da:	f000 faa5 	bl	8002b28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
 8002602:	e001      	b.n	8002608 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_TIM_ConfigClockSource+0x1c>
 8002632:	2302      	movs	r3, #2
 8002634:	e0b4      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x186>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002654:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800265c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800266e:	d03e      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0xd4>
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002674:	f200 8087 	bhi.w	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800267c:	f000 8086 	beq.w	800278c <HAL_TIM_ConfigClockSource+0x172>
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002684:	d87f      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 8002686:	2b70      	cmp	r3, #112	@ 0x70
 8002688:	d01a      	beq.n	80026c0 <HAL_TIM_ConfigClockSource+0xa6>
 800268a:	2b70      	cmp	r3, #112	@ 0x70
 800268c:	d87b      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 800268e:	2b60      	cmp	r3, #96	@ 0x60
 8002690:	d050      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x11a>
 8002692:	2b60      	cmp	r3, #96	@ 0x60
 8002694:	d877      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 8002696:	2b50      	cmp	r3, #80	@ 0x50
 8002698:	d03c      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0xfa>
 800269a:	2b50      	cmp	r3, #80	@ 0x50
 800269c:	d873      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d058      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x13a>
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	d86f      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	2b30      	cmp	r3, #48	@ 0x30
 80026a8:	d064      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x15a>
 80026aa:	2b30      	cmp	r3, #48	@ 0x30
 80026ac:	d86b      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d060      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x15a>
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d867      	bhi.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d05c      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x15a>
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d05a      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x15a>
 80026be:	e062      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	f000 fa80 	bl	8002bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
      break;
 80026ec:	e04f      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	f000 fa69 	bl	8002bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002710:	609a      	str	r2, [r3, #8]
      break;
 8002712:	e03c      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002720:	461a      	mov	r2, r3
 8002722:	f000 f92d 	bl	8002980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2150      	movs	r1, #80	@ 0x50
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa37 	bl	8002ba0 <TIM_ITRx_SetConfig>
      break;
 8002732:	e02c      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002740:	461a      	mov	r2, r3
 8002742:	f000 f987 	bl	8002a54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2160      	movs	r1, #96	@ 0x60
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fa27 	bl	8002ba0 <TIM_ITRx_SetConfig>
      break;
 8002752:	e01c      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002760:	461a      	mov	r2, r3
 8002762:	f000 f90d 	bl	8002980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa17 	bl	8002ba0 <TIM_ITRx_SetConfig>
      break;
 8002772:	e00c      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fa0e 	bl	8002ba0 <TIM_ITRx_SetConfig>
      break;
 8002784:	e003      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      break;
 800278a:	e000      	b.n	800278e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800278c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <TIM_Base_SetConfig+0xd0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00b      	beq.n	8002820 <TIM_Base_SetConfig+0x30>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x30>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a2c      	ldr	r2, [pc, #176]	@ (80028c4 <TIM_Base_SetConfig+0xd4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x30>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2b      	ldr	r2, [pc, #172]	@ (80028c8 <TIM_Base_SetConfig+0xd8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <TIM_Base_SetConfig+0xd0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00b      	beq.n	8002852 <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002840:	d007      	beq.n	8002852 <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <TIM_Base_SetConfig+0xd4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <TIM_Base_SetConfig+0x62>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a1e      	ldr	r2, [pc, #120]	@ (80028c8 <TIM_Base_SetConfig+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d108      	bne.n	8002864 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <TIM_Base_SetConfig+0xd0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]
  }
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800

080028cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 0201 	bic.w	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <TIM_TI1_SetConfig+0xa8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00b      	beq.n	8002912 <TIM_TI1_SetConfig+0x46>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002900:	d007      	beq.n	8002912 <TIM_TI1_SetConfig+0x46>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <TIM_TI1_SetConfig+0xac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_TI1_SetConfig+0x46>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <TIM_TI1_SetConfig+0xb0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <TIM_TI1_SetConfig+0x4a>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <TIM_TI1_SetConfig+0x4c>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e003      	b.n	8002936 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800293c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	b2db      	uxtb	r3, r3
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f023 030a 	bic.w	r3, r3, #10
 8002950:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 030a 	and.w	r3, r3, #10
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800

08002980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 030a 	bic.w	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f023 0210 	bic.w	r2, r3, #16
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	031b      	lsls	r3, r3, #12
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	031b      	lsls	r3, r3, #12
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	031b      	lsls	r3, r3, #12
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	031b      	lsls	r3, r3, #12
 8002b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f043 0307 	orr.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	609a      	str	r2, [r3, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e046      	b.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c78:	d009      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a10      	ldr	r2, [pc, #64]	@ (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e033      	b.n	8002d6e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fe28 	bl	8000970 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f90b 	bl	8002f44 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	@ 0x28
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d17c      	bne.n	8002e8c <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_USART_Transmit+0x28>
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e075      	b.n	8002e8e <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_USART_Transmit+0x3a>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e06e      	b.n	8002e8e <HAL_USART_Transmit+0x118>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2212      	movs	r2, #18
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dc6:	f7fd ff11 	bl	8000bec <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	d108      	bne.n	8002df4 <HAL_USART_Transmit+0x7e>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002dfc:	e02a      	b.n	8002e54 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f844 	bl	8002e96 <USART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e03a      	b.n	8002e8e <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2c:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3302      	adds	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e007      	b.n	8002e46 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cf      	bne.n	8002dfe <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	@ 0x40
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f814 	bl	8002e96 <USART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e00a      	b.n	8002e8e <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002ea6:	e038      	b.n	8002f1a <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d034      	beq.n	8002f1a <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <USART_WaitOnFlagUntilTimeout+0x30>
 8002eb6:	f7fd fe99 	bl	8000bec <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d229      	bcs.n	8002f1a <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed4:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0220 	bic.w	r2, r2, #32
 8002ee4:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef4:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e00f      	b.n	8002f3a <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d0b7      	beq.n	8002ea8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020c 	bic.w	r2, r2, #12
 8002f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002f78:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fa6:	f023 030c 	bic.w	r3, r3, #12
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002fd8:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a53      	ldr	r2, [pc, #332]	@ (800312c <USART_SetConfig+0x1e8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d14f      	bne.n	8003084 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7fe fffe 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a4b      	ldr	r2, [pc, #300]	@ (8003130 <USART_SetConfig+0x1ec>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003020:	4b43      	ldr	r3, [pc, #268]	@ (8003130 <USART_SetConfig+0x1ec>)
 8003022:	fba3 0302 	umull	r0, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2064      	movs	r0, #100	@ 0x64
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	@ 0x32
 8003034:	4a3e      	ldr	r2, [pc, #248]	@ (8003130 <USART_SetConfig+0x1ec>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8003042:	4419      	add	r1, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009a      	lsls	r2, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	fbb2 f2f3 	udiv	r2, r2, r3
 800305a:	4b35      	ldr	r3, [pc, #212]	@ (8003130 <USART_SetConfig+0x1ec>)
 800305c:	fba3 0302 	umull	r0, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2064      	movs	r0, #100	@ 0x64
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	3332      	adds	r3, #50	@ 0x32
 800306e:	4a30      	ldr	r2, [pc, #192]	@ (8003130 <USART_SetConfig+0x1ec>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	440a      	add	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003082:	e04e      	b.n	8003122 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7fe ff9a 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 8003088:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <USART_SetConfig+0x1ec>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	0119      	lsls	r1, r3, #4
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <USART_SetConfig+0x1ec>)
 80030c2:	fba3 0302 	umull	r0, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2064      	movs	r0, #100	@ 0x64
 80030ca:	fb00 f303 	mul.w	r3, r0, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	@ 0x32
 80030d4:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <USART_SetConfig+0x1ec>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 80030e2:	4419      	add	r1, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <USART_SetConfig+0x1ec>)
 80030fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2064      	movs	r0, #100	@ 0x64
 8003104:	fb00 f303 	mul.w	r3, r0, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	@ 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <USART_SetConfig+0x1ec>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	440a      	add	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40013800 	.word	0x40013800
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <siprintf>:
 8003134:	b40e      	push	{r1, r2, r3}
 8003136:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800313a:	b500      	push	{lr}
 800313c:	b09c      	sub	sp, #112	@ 0x70
 800313e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003140:	9002      	str	r0, [sp, #8]
 8003142:	9006      	str	r0, [sp, #24]
 8003144:	9107      	str	r1, [sp, #28]
 8003146:	9104      	str	r1, [sp, #16]
 8003148:	4808      	ldr	r0, [pc, #32]	@ (800316c <siprintf+0x38>)
 800314a:	4909      	ldr	r1, [pc, #36]	@ (8003170 <siprintf+0x3c>)
 800314c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	a902      	add	r1, sp, #8
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	f000 f992 	bl	8003480 <_svfiprintf_r>
 800315c:	2200      	movs	r2, #0
 800315e:	9b02      	ldr	r3, [sp, #8]
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	b01c      	add	sp, #112	@ 0x70
 8003164:	f85d eb04 	ldr.w	lr, [sp], #4
 8003168:	b003      	add	sp, #12
 800316a:	4770      	bx	lr
 800316c:	2000000c 	.word	0x2000000c
 8003170:	ffff0208 	.word	0xffff0208

08003174 <memset>:
 8003174:	4603      	mov	r3, r0
 8003176:	4402      	add	r2, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <__errno>:
 8003184:	4b01      	ldr	r3, [pc, #4]	@ (800318c <__errno+0x8>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000000c 	.word	0x2000000c

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4d0c      	ldr	r5, [pc, #48]	@ (80031c8 <__libc_init_array+0x38>)
 8003196:	4c0d      	ldr	r4, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	f000 fc78 	bl	8003a94 <_init>
 80031a4:	2600      	movs	r6, #0
 80031a6:	4d0a      	ldr	r5, [pc, #40]	@ (80031d0 <__libc_init_array+0x40>)
 80031a8:	4c0a      	ldr	r4, [pc, #40]	@ (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003b30 	.word	0x08003b30
 80031cc:	08003b30 	.word	0x08003b30
 80031d0:	08003b30 	.word	0x08003b30
 80031d4:	08003b34 	.word	0x08003b34

080031d8 <__retarget_lock_acquire_recursive>:
 80031d8:	4770      	bx	lr

080031da <__retarget_lock_release_recursive>:
 80031da:	4770      	bx	lr

080031dc <_free_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4605      	mov	r5, r0
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d040      	beq.n	8003266 <_free_r+0x8a>
 80031e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e8:	1f0c      	subs	r4, r1, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bfb8      	it	lt
 80031ee:	18e4      	addlt	r4, r4, r3
 80031f0:	f000 f8de 	bl	80033b0 <__malloc_lock>
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <_free_r+0x8c>)
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	b933      	cbnz	r3, 8003208 <_free_r+0x2c>
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	6014      	str	r4, [r2, #0]
 80031fe:	4628      	mov	r0, r5
 8003200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003204:	f000 b8da 	b.w	80033bc <__malloc_unlock>
 8003208:	42a3      	cmp	r3, r4
 800320a:	d908      	bls.n	800321e <_free_r+0x42>
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	1821      	adds	r1, r4, r0
 8003210:	428b      	cmp	r3, r1
 8003212:	bf01      	itttt	eq
 8003214:	6819      	ldreq	r1, [r3, #0]
 8003216:	685b      	ldreq	r3, [r3, #4]
 8003218:	1809      	addeq	r1, r1, r0
 800321a:	6021      	streq	r1, [r4, #0]
 800321c:	e7ed      	b.n	80031fa <_free_r+0x1e>
 800321e:	461a      	mov	r2, r3
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b10b      	cbz	r3, 8003228 <_free_r+0x4c>
 8003224:	42a3      	cmp	r3, r4
 8003226:	d9fa      	bls.n	800321e <_free_r+0x42>
 8003228:	6811      	ldr	r1, [r2, #0]
 800322a:	1850      	adds	r0, r2, r1
 800322c:	42a0      	cmp	r0, r4
 800322e:	d10b      	bne.n	8003248 <_free_r+0x6c>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	4401      	add	r1, r0
 8003234:	1850      	adds	r0, r2, r1
 8003236:	4283      	cmp	r3, r0
 8003238:	6011      	str	r1, [r2, #0]
 800323a:	d1e0      	bne.n	80031fe <_free_r+0x22>
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4408      	add	r0, r1
 8003242:	6010      	str	r0, [r2, #0]
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	e7da      	b.n	80031fe <_free_r+0x22>
 8003248:	d902      	bls.n	8003250 <_free_r+0x74>
 800324a:	230c      	movs	r3, #12
 800324c:	602b      	str	r3, [r5, #0]
 800324e:	e7d6      	b.n	80031fe <_free_r+0x22>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	1821      	adds	r1, r4, r0
 8003254:	428b      	cmp	r3, r1
 8003256:	bf01      	itttt	eq
 8003258:	6819      	ldreq	r1, [r3, #0]
 800325a:	685b      	ldreq	r3, [r3, #4]
 800325c:	1809      	addeq	r1, r1, r0
 800325e:	6021      	streq	r1, [r4, #0]
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	6054      	str	r4, [r2, #4]
 8003264:	e7cb      	b.n	80031fe <_free_r+0x22>
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000334 	.word	0x20000334

0800326c <sbrk_aligned>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	4e0f      	ldr	r6, [pc, #60]	@ (80032ac <sbrk_aligned+0x40>)
 8003270:	460c      	mov	r4, r1
 8003272:	6831      	ldr	r1, [r6, #0]
 8003274:	4605      	mov	r5, r0
 8003276:	b911      	cbnz	r1, 800327e <sbrk_aligned+0x12>
 8003278:	f000 fbaa 	bl	80039d0 <_sbrk_r>
 800327c:	6030      	str	r0, [r6, #0]
 800327e:	4621      	mov	r1, r4
 8003280:	4628      	mov	r0, r5
 8003282:	f000 fba5 	bl	80039d0 <_sbrk_r>
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	d103      	bne.n	8003292 <sbrk_aligned+0x26>
 800328a:	f04f 34ff 	mov.w	r4, #4294967295
 800328e:	4620      	mov	r0, r4
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	1cc4      	adds	r4, r0, #3
 8003294:	f024 0403 	bic.w	r4, r4, #3
 8003298:	42a0      	cmp	r0, r4
 800329a:	d0f8      	beq.n	800328e <sbrk_aligned+0x22>
 800329c:	1a21      	subs	r1, r4, r0
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 fb96 	bl	80039d0 <_sbrk_r>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d1f2      	bne.n	800328e <sbrk_aligned+0x22>
 80032a8:	e7ef      	b.n	800328a <sbrk_aligned+0x1e>
 80032aa:	bf00      	nop
 80032ac:	20000330 	.word	0x20000330

080032b0 <_malloc_r>:
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	1ccd      	adds	r5, r1, #3
 80032b6:	f025 0503 	bic.w	r5, r5, #3
 80032ba:	3508      	adds	r5, #8
 80032bc:	2d0c      	cmp	r5, #12
 80032be:	bf38      	it	cc
 80032c0:	250c      	movcc	r5, #12
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	4606      	mov	r6, r0
 80032c6:	db01      	blt.n	80032cc <_malloc_r+0x1c>
 80032c8:	42a9      	cmp	r1, r5
 80032ca:	d904      	bls.n	80032d6 <_malloc_r+0x26>
 80032cc:	230c      	movs	r3, #12
 80032ce:	6033      	str	r3, [r6, #0]
 80032d0:	2000      	movs	r0, #0
 80032d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033ac <_malloc_r+0xfc>
 80032da:	f000 f869 	bl	80033b0 <__malloc_lock>
 80032de:	f8d8 3000 	ldr.w	r3, [r8]
 80032e2:	461c      	mov	r4, r3
 80032e4:	bb44      	cbnz	r4, 8003338 <_malloc_r+0x88>
 80032e6:	4629      	mov	r1, r5
 80032e8:	4630      	mov	r0, r6
 80032ea:	f7ff ffbf 	bl	800326c <sbrk_aligned>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	4604      	mov	r4, r0
 80032f2:	d158      	bne.n	80033a6 <_malloc_r+0xf6>
 80032f4:	f8d8 4000 	ldr.w	r4, [r8]
 80032f8:	4627      	mov	r7, r4
 80032fa:	2f00      	cmp	r7, #0
 80032fc:	d143      	bne.n	8003386 <_malloc_r+0xd6>
 80032fe:	2c00      	cmp	r4, #0
 8003300:	d04b      	beq.n	800339a <_malloc_r+0xea>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	4639      	mov	r1, r7
 8003306:	4630      	mov	r0, r6
 8003308:	eb04 0903 	add.w	r9, r4, r3
 800330c:	f000 fb60 	bl	80039d0 <_sbrk_r>
 8003310:	4581      	cmp	r9, r0
 8003312:	d142      	bne.n	800339a <_malloc_r+0xea>
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	4630      	mov	r0, r6
 8003318:	1a6d      	subs	r5, r5, r1
 800331a:	4629      	mov	r1, r5
 800331c:	f7ff ffa6 	bl	800326c <sbrk_aligned>
 8003320:	3001      	adds	r0, #1
 8003322:	d03a      	beq.n	800339a <_malloc_r+0xea>
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	442b      	add	r3, r5
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	f8d8 3000 	ldr.w	r3, [r8]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	bb62      	cbnz	r2, 800338c <_malloc_r+0xdc>
 8003332:	f8c8 7000 	str.w	r7, [r8]
 8003336:	e00f      	b.n	8003358 <_malloc_r+0xa8>
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	1b52      	subs	r2, r2, r5
 800333c:	d420      	bmi.n	8003380 <_malloc_r+0xd0>
 800333e:	2a0b      	cmp	r2, #11
 8003340:	d917      	bls.n	8003372 <_malloc_r+0xc2>
 8003342:	1961      	adds	r1, r4, r5
 8003344:	42a3      	cmp	r3, r4
 8003346:	6025      	str	r5, [r4, #0]
 8003348:	bf18      	it	ne
 800334a:	6059      	strne	r1, [r3, #4]
 800334c:	6863      	ldr	r3, [r4, #4]
 800334e:	bf08      	it	eq
 8003350:	f8c8 1000 	streq.w	r1, [r8]
 8003354:	5162      	str	r2, [r4, r5]
 8003356:	604b      	str	r3, [r1, #4]
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f82f 	bl	80033bc <__malloc_unlock>
 800335e:	f104 000b 	add.w	r0, r4, #11
 8003362:	1d23      	adds	r3, r4, #4
 8003364:	f020 0007 	bic.w	r0, r0, #7
 8003368:	1ac2      	subs	r2, r0, r3
 800336a:	bf1c      	itt	ne
 800336c:	1a1b      	subne	r3, r3, r0
 800336e:	50a3      	strne	r3, [r4, r2]
 8003370:	e7af      	b.n	80032d2 <_malloc_r+0x22>
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	42a3      	cmp	r3, r4
 8003376:	bf0c      	ite	eq
 8003378:	f8c8 2000 	streq.w	r2, [r8]
 800337c:	605a      	strne	r2, [r3, #4]
 800337e:	e7eb      	b.n	8003358 <_malloc_r+0xa8>
 8003380:	4623      	mov	r3, r4
 8003382:	6864      	ldr	r4, [r4, #4]
 8003384:	e7ae      	b.n	80032e4 <_malloc_r+0x34>
 8003386:	463c      	mov	r4, r7
 8003388:	687f      	ldr	r7, [r7, #4]
 800338a:	e7b6      	b.n	80032fa <_malloc_r+0x4a>
 800338c:	461a      	mov	r2, r3
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	42a3      	cmp	r3, r4
 8003392:	d1fb      	bne.n	800338c <_malloc_r+0xdc>
 8003394:	2300      	movs	r3, #0
 8003396:	6053      	str	r3, [r2, #4]
 8003398:	e7de      	b.n	8003358 <_malloc_r+0xa8>
 800339a:	230c      	movs	r3, #12
 800339c:	4630      	mov	r0, r6
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	f000 f80c 	bl	80033bc <__malloc_unlock>
 80033a4:	e794      	b.n	80032d0 <_malloc_r+0x20>
 80033a6:	6005      	str	r5, [r0, #0]
 80033a8:	e7d6      	b.n	8003358 <_malloc_r+0xa8>
 80033aa:	bf00      	nop
 80033ac:	20000334 	.word	0x20000334

080033b0 <__malloc_lock>:
 80033b0:	4801      	ldr	r0, [pc, #4]	@ (80033b8 <__malloc_lock+0x8>)
 80033b2:	f7ff bf11 	b.w	80031d8 <__retarget_lock_acquire_recursive>
 80033b6:	bf00      	nop
 80033b8:	2000032c 	.word	0x2000032c

080033bc <__malloc_unlock>:
 80033bc:	4801      	ldr	r0, [pc, #4]	@ (80033c4 <__malloc_unlock+0x8>)
 80033be:	f7ff bf0c 	b.w	80031da <__retarget_lock_release_recursive>
 80033c2:	bf00      	nop
 80033c4:	2000032c 	.word	0x2000032c

080033c8 <__ssputs_r>:
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	461f      	mov	r7, r3
 80033ce:	688e      	ldr	r6, [r1, #8]
 80033d0:	4682      	mov	sl, r0
 80033d2:	42be      	cmp	r6, r7
 80033d4:	460c      	mov	r4, r1
 80033d6:	4690      	mov	r8, r2
 80033d8:	680b      	ldr	r3, [r1, #0]
 80033da:	d82d      	bhi.n	8003438 <__ssputs_r+0x70>
 80033dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033e4:	d026      	beq.n	8003434 <__ssputs_r+0x6c>
 80033e6:	6965      	ldr	r5, [r4, #20]
 80033e8:	6909      	ldr	r1, [r1, #16]
 80033ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033ee:	eba3 0901 	sub.w	r9, r3, r1
 80033f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033f6:	1c7b      	adds	r3, r7, #1
 80033f8:	444b      	add	r3, r9
 80033fa:	106d      	asrs	r5, r5, #1
 80033fc:	429d      	cmp	r5, r3
 80033fe:	bf38      	it	cc
 8003400:	461d      	movcc	r5, r3
 8003402:	0553      	lsls	r3, r2, #21
 8003404:	d527      	bpl.n	8003456 <__ssputs_r+0x8e>
 8003406:	4629      	mov	r1, r5
 8003408:	f7ff ff52 	bl	80032b0 <_malloc_r>
 800340c:	4606      	mov	r6, r0
 800340e:	b360      	cbz	r0, 800346a <__ssputs_r+0xa2>
 8003410:	464a      	mov	r2, r9
 8003412:	6921      	ldr	r1, [r4, #16]
 8003414:	f000 fafa 	bl	8003a0c <memcpy>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800341e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	6126      	str	r6, [r4, #16]
 8003426:	444e      	add	r6, r9
 8003428:	6026      	str	r6, [r4, #0]
 800342a:	463e      	mov	r6, r7
 800342c:	6165      	str	r5, [r4, #20]
 800342e:	eba5 0509 	sub.w	r5, r5, r9
 8003432:	60a5      	str	r5, [r4, #8]
 8003434:	42be      	cmp	r6, r7
 8003436:	d900      	bls.n	800343a <__ssputs_r+0x72>
 8003438:	463e      	mov	r6, r7
 800343a:	4632      	mov	r2, r6
 800343c:	4641      	mov	r1, r8
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	f000 faac 	bl	800399c <memmove>
 8003444:	2000      	movs	r0, #0
 8003446:	68a3      	ldr	r3, [r4, #8]
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	60a3      	str	r3, [r4, #8]
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	4433      	add	r3, r6
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003456:	462a      	mov	r2, r5
 8003458:	f000 fae6 	bl	8003a28 <_realloc_r>
 800345c:	4606      	mov	r6, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	d1e0      	bne.n	8003424 <__ssputs_r+0x5c>
 8003462:	4650      	mov	r0, sl
 8003464:	6921      	ldr	r1, [r4, #16]
 8003466:	f7ff feb9 	bl	80031dc <_free_r>
 800346a:	230c      	movs	r3, #12
 800346c:	f8ca 3000 	str.w	r3, [sl]
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	f04f 30ff 	mov.w	r0, #4294967295
 8003476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800347a:	81a3      	strh	r3, [r4, #12]
 800347c:	e7e9      	b.n	8003452 <__ssputs_r+0x8a>
	...

08003480 <_svfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	4698      	mov	r8, r3
 8003486:	898b      	ldrh	r3, [r1, #12]
 8003488:	4607      	mov	r7, r0
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	460d      	mov	r5, r1
 800348e:	4614      	mov	r4, r2
 8003490:	b09d      	sub	sp, #116	@ 0x74
 8003492:	d510      	bpl.n	80034b6 <_svfiprintf_r+0x36>
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	b973      	cbnz	r3, 80034b6 <_svfiprintf_r+0x36>
 8003498:	2140      	movs	r1, #64	@ 0x40
 800349a:	f7ff ff09 	bl	80032b0 <_malloc_r>
 800349e:	6028      	str	r0, [r5, #0]
 80034a0:	6128      	str	r0, [r5, #16]
 80034a2:	b930      	cbnz	r0, 80034b2 <_svfiprintf_r+0x32>
 80034a4:	230c      	movs	r3, #12
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	b01d      	add	sp, #116	@ 0x74
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b2:	2340      	movs	r3, #64	@ 0x40
 80034b4:	616b      	str	r3, [r5, #20]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ba:	2320      	movs	r3, #32
 80034bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034c0:	2330      	movs	r3, #48	@ 0x30
 80034c2:	f04f 0901 	mov.w	r9, #1
 80034c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003664 <_svfiprintf_r+0x1e4>
 80034ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034d2:	4623      	mov	r3, r4
 80034d4:	469a      	mov	sl, r3
 80034d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034da:	b10a      	cbz	r2, 80034e0 <_svfiprintf_r+0x60>
 80034dc:	2a25      	cmp	r2, #37	@ 0x25
 80034de:	d1f9      	bne.n	80034d4 <_svfiprintf_r+0x54>
 80034e0:	ebba 0b04 	subs.w	fp, sl, r4
 80034e4:	d00b      	beq.n	80034fe <_svfiprintf_r+0x7e>
 80034e6:	465b      	mov	r3, fp
 80034e8:	4622      	mov	r2, r4
 80034ea:	4629      	mov	r1, r5
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7ff ff6b 	bl	80033c8 <__ssputs_r>
 80034f2:	3001      	adds	r0, #1
 80034f4:	f000 80a7 	beq.w	8003646 <_svfiprintf_r+0x1c6>
 80034f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034fa:	445a      	add	r2, fp
 80034fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80034fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 809f 	beq.w	8003646 <_svfiprintf_r+0x1c6>
 8003508:	2300      	movs	r3, #0
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003512:	f10a 0a01 	add.w	sl, sl, #1
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	9307      	str	r3, [sp, #28]
 800351a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800351e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003520:	4654      	mov	r4, sl
 8003522:	2205      	movs	r2, #5
 8003524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003528:	484e      	ldr	r0, [pc, #312]	@ (8003664 <_svfiprintf_r+0x1e4>)
 800352a:	f000 fa61 	bl	80039f0 <memchr>
 800352e:	9a04      	ldr	r2, [sp, #16]
 8003530:	b9d8      	cbnz	r0, 800356a <_svfiprintf_r+0xea>
 8003532:	06d0      	lsls	r0, r2, #27
 8003534:	bf44      	itt	mi
 8003536:	2320      	movmi	r3, #32
 8003538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800353c:	0711      	lsls	r1, r2, #28
 800353e:	bf44      	itt	mi
 8003540:	232b      	movmi	r3, #43	@ 0x2b
 8003542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003546:	f89a 3000 	ldrb.w	r3, [sl]
 800354a:	2b2a      	cmp	r3, #42	@ 0x2a
 800354c:	d015      	beq.n	800357a <_svfiprintf_r+0xfa>
 800354e:	4654      	mov	r4, sl
 8003550:	2000      	movs	r0, #0
 8003552:	f04f 0c0a 	mov.w	ip, #10
 8003556:	9a07      	ldr	r2, [sp, #28]
 8003558:	4621      	mov	r1, r4
 800355a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800355e:	3b30      	subs	r3, #48	@ 0x30
 8003560:	2b09      	cmp	r3, #9
 8003562:	d94b      	bls.n	80035fc <_svfiprintf_r+0x17c>
 8003564:	b1b0      	cbz	r0, 8003594 <_svfiprintf_r+0x114>
 8003566:	9207      	str	r2, [sp, #28]
 8003568:	e014      	b.n	8003594 <_svfiprintf_r+0x114>
 800356a:	eba0 0308 	sub.w	r3, r0, r8
 800356e:	fa09 f303 	lsl.w	r3, r9, r3
 8003572:	4313      	orrs	r3, r2
 8003574:	46a2      	mov	sl, r4
 8003576:	9304      	str	r3, [sp, #16]
 8003578:	e7d2      	b.n	8003520 <_svfiprintf_r+0xa0>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	1d19      	adds	r1, r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	9103      	str	r1, [sp, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	bfbb      	ittet	lt
 8003586:	425b      	neglt	r3, r3
 8003588:	f042 0202 	orrlt.w	r2, r2, #2
 800358c:	9307      	strge	r3, [sp, #28]
 800358e:	9307      	strlt	r3, [sp, #28]
 8003590:	bfb8      	it	lt
 8003592:	9204      	strlt	r2, [sp, #16]
 8003594:	7823      	ldrb	r3, [r4, #0]
 8003596:	2b2e      	cmp	r3, #46	@ 0x2e
 8003598:	d10a      	bne.n	80035b0 <_svfiprintf_r+0x130>
 800359a:	7863      	ldrb	r3, [r4, #1]
 800359c:	2b2a      	cmp	r3, #42	@ 0x2a
 800359e:	d132      	bne.n	8003606 <_svfiprintf_r+0x186>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	3402      	adds	r4, #2
 80035a4:	1d1a      	adds	r2, r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	9203      	str	r2, [sp, #12]
 80035aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035ae:	9305      	str	r3, [sp, #20]
 80035b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003668 <_svfiprintf_r+0x1e8>
 80035b4:	2203      	movs	r2, #3
 80035b6:	4650      	mov	r0, sl
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	f000 fa19 	bl	80039f0 <memchr>
 80035be:	b138      	cbz	r0, 80035d0 <_svfiprintf_r+0x150>
 80035c0:	2240      	movs	r2, #64	@ 0x40
 80035c2:	9b04      	ldr	r3, [sp, #16]
 80035c4:	eba0 000a 	sub.w	r0, r0, sl
 80035c8:	4082      	lsls	r2, r0
 80035ca:	4313      	orrs	r3, r2
 80035cc:	3401      	adds	r4, #1
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d4:	2206      	movs	r2, #6
 80035d6:	4825      	ldr	r0, [pc, #148]	@ (800366c <_svfiprintf_r+0x1ec>)
 80035d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035dc:	f000 fa08 	bl	80039f0 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d036      	beq.n	8003652 <_svfiprintf_r+0x1d2>
 80035e4:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <_svfiprintf_r+0x1f0>)
 80035e6:	bb1b      	cbnz	r3, 8003630 <_svfiprintf_r+0x1b0>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3307      	adds	r3, #7
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	3308      	adds	r3, #8
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f6:	4433      	add	r3, r6
 80035f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80035fa:	e76a      	b.n	80034d2 <_svfiprintf_r+0x52>
 80035fc:	460c      	mov	r4, r1
 80035fe:	2001      	movs	r0, #1
 8003600:	fb0c 3202 	mla	r2, ip, r2, r3
 8003604:	e7a8      	b.n	8003558 <_svfiprintf_r+0xd8>
 8003606:	2300      	movs	r3, #0
 8003608:	f04f 0c0a 	mov.w	ip, #10
 800360c:	4619      	mov	r1, r3
 800360e:	3401      	adds	r4, #1
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4620      	mov	r0, r4
 8003614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003618:	3a30      	subs	r2, #48	@ 0x30
 800361a:	2a09      	cmp	r2, #9
 800361c:	d903      	bls.n	8003626 <_svfiprintf_r+0x1a6>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c6      	beq.n	80035b0 <_svfiprintf_r+0x130>
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	e7c4      	b.n	80035b0 <_svfiprintf_r+0x130>
 8003626:	4604      	mov	r4, r0
 8003628:	2301      	movs	r3, #1
 800362a:	fb0c 2101 	mla	r1, ip, r1, r2
 800362e:	e7f0      	b.n	8003612 <_svfiprintf_r+0x192>
 8003630:	ab03      	add	r3, sp, #12
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	462a      	mov	r2, r5
 8003636:	4638      	mov	r0, r7
 8003638:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <_svfiprintf_r+0x1f4>)
 800363a:	a904      	add	r1, sp, #16
 800363c:	f3af 8000 	nop.w
 8003640:	1c42      	adds	r2, r0, #1
 8003642:	4606      	mov	r6, r0
 8003644:	d1d6      	bne.n	80035f4 <_svfiprintf_r+0x174>
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	065b      	lsls	r3, r3, #25
 800364a:	f53f af2d 	bmi.w	80034a8 <_svfiprintf_r+0x28>
 800364e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003650:	e72c      	b.n	80034ac <_svfiprintf_r+0x2c>
 8003652:	ab03      	add	r3, sp, #12
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	462a      	mov	r2, r5
 8003658:	4638      	mov	r0, r7
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <_svfiprintf_r+0x1f4>)
 800365c:	a904      	add	r1, sp, #16
 800365e:	f000 f87d 	bl	800375c <_printf_i>
 8003662:	e7ed      	b.n	8003640 <_svfiprintf_r+0x1c0>
 8003664:	08003af2 	.word	0x08003af2
 8003668:	08003af8 	.word	0x08003af8
 800366c:	08003afc 	.word	0x08003afc
 8003670:	00000000 	.word	0x00000000
 8003674:	080033c9 	.word	0x080033c9

08003678 <_printf_common>:
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4616      	mov	r6, r2
 800367e:	4698      	mov	r8, r3
 8003680:	688a      	ldr	r2, [r1, #8]
 8003682:	690b      	ldr	r3, [r1, #16]
 8003684:	4607      	mov	r7, r0
 8003686:	4293      	cmp	r3, r2
 8003688:	bfb8      	it	lt
 800368a:	4613      	movlt	r3, r2
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003692:	460c      	mov	r4, r1
 8003694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003698:	b10a      	cbz	r2, 800369e <_printf_common+0x26>
 800369a:	3301      	adds	r3, #1
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0699      	lsls	r1, r3, #26
 80036a2:	bf42      	ittt	mi
 80036a4:	6833      	ldrmi	r3, [r6, #0]
 80036a6:	3302      	addmi	r3, #2
 80036a8:	6033      	strmi	r3, [r6, #0]
 80036aa:	6825      	ldr	r5, [r4, #0]
 80036ac:	f015 0506 	ands.w	r5, r5, #6
 80036b0:	d106      	bne.n	80036c0 <_printf_common+0x48>
 80036b2:	f104 0a19 	add.w	sl, r4, #25
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	6832      	ldr	r2, [r6, #0]
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	42ab      	cmp	r3, r5
 80036be:	dc2b      	bgt.n	8003718 <_printf_common+0xa0>
 80036c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	3b00      	subs	r3, #0
 80036c8:	bf18      	it	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	0692      	lsls	r2, r2, #26
 80036ce:	d430      	bmi.n	8003732 <_printf_common+0xba>
 80036d0:	4641      	mov	r1, r8
 80036d2:	4638      	mov	r0, r7
 80036d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036d8:	47c8      	blx	r9
 80036da:	3001      	adds	r0, #1
 80036dc:	d023      	beq.n	8003726 <_printf_common+0xae>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	f003 0306 	and.w	r3, r3, #6
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf14      	ite	ne
 80036ea:	2500      	movne	r5, #0
 80036ec:	6833      	ldreq	r3, [r6, #0]
 80036ee:	f04f 0600 	mov.w	r6, #0
 80036f2:	bf08      	it	eq
 80036f4:	68e5      	ldreq	r5, [r4, #12]
 80036f6:	f104 041a 	add.w	r4, r4, #26
 80036fa:	bf08      	it	eq
 80036fc:	1aed      	subeq	r5, r5, r3
 80036fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003702:	bf08      	it	eq
 8003704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003708:	4293      	cmp	r3, r2
 800370a:	bfc4      	itt	gt
 800370c:	1a9b      	subgt	r3, r3, r2
 800370e:	18ed      	addgt	r5, r5, r3
 8003710:	42b5      	cmp	r5, r6
 8003712:	d11a      	bne.n	800374a <_printf_common+0xd2>
 8003714:	2000      	movs	r0, #0
 8003716:	e008      	b.n	800372a <_printf_common+0xb2>
 8003718:	2301      	movs	r3, #1
 800371a:	4652      	mov	r2, sl
 800371c:	4641      	mov	r1, r8
 800371e:	4638      	mov	r0, r7
 8003720:	47c8      	blx	r9
 8003722:	3001      	adds	r0, #1
 8003724:	d103      	bne.n	800372e <_printf_common+0xb6>
 8003726:	f04f 30ff 	mov.w	r0, #4294967295
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372e:	3501      	adds	r5, #1
 8003730:	e7c1      	b.n	80036b6 <_printf_common+0x3e>
 8003732:	2030      	movs	r0, #48	@ 0x30
 8003734:	18e1      	adds	r1, r4, r3
 8003736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003740:	4422      	add	r2, r4
 8003742:	3302      	adds	r3, #2
 8003744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003748:	e7c2      	b.n	80036d0 <_printf_common+0x58>
 800374a:	2301      	movs	r3, #1
 800374c:	4622      	mov	r2, r4
 800374e:	4641      	mov	r1, r8
 8003750:	4638      	mov	r0, r7
 8003752:	47c8      	blx	r9
 8003754:	3001      	adds	r0, #1
 8003756:	d0e6      	beq.n	8003726 <_printf_common+0xae>
 8003758:	3601      	adds	r6, #1
 800375a:	e7d9      	b.n	8003710 <_printf_common+0x98>

0800375c <_printf_i>:
 800375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	7e0f      	ldrb	r7, [r1, #24]
 8003762:	4691      	mov	r9, r2
 8003764:	2f78      	cmp	r7, #120	@ 0x78
 8003766:	4680      	mov	r8, r0
 8003768:	460c      	mov	r4, r1
 800376a:	469a      	mov	sl, r3
 800376c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800376e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003772:	d807      	bhi.n	8003784 <_printf_i+0x28>
 8003774:	2f62      	cmp	r7, #98	@ 0x62
 8003776:	d80a      	bhi.n	800378e <_printf_i+0x32>
 8003778:	2f00      	cmp	r7, #0
 800377a:	f000 80d3 	beq.w	8003924 <_printf_i+0x1c8>
 800377e:	2f58      	cmp	r7, #88	@ 0x58
 8003780:	f000 80ba 	beq.w	80038f8 <_printf_i+0x19c>
 8003784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800378c:	e03a      	b.n	8003804 <_printf_i+0xa8>
 800378e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003792:	2b15      	cmp	r3, #21
 8003794:	d8f6      	bhi.n	8003784 <_printf_i+0x28>
 8003796:	a101      	add	r1, pc, #4	@ (adr r1, 800379c <_printf_i+0x40>)
 8003798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	08003809 	.word	0x08003809
 80037a4:	08003785 	.word	0x08003785
 80037a8:	08003785 	.word	0x08003785
 80037ac:	08003785 	.word	0x08003785
 80037b0:	08003785 	.word	0x08003785
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003785 	.word	0x08003785
 80037bc:	08003785 	.word	0x08003785
 80037c0:	08003785 	.word	0x08003785
 80037c4:	08003785 	.word	0x08003785
 80037c8:	0800390b 	.word	0x0800390b
 80037cc:	08003833 	.word	0x08003833
 80037d0:	080038c5 	.word	0x080038c5
 80037d4:	08003785 	.word	0x08003785
 80037d8:	08003785 	.word	0x08003785
 80037dc:	0800392d 	.word	0x0800392d
 80037e0:	08003785 	.word	0x08003785
 80037e4:	08003833 	.word	0x08003833
 80037e8:	08003785 	.word	0x08003785
 80037ec:	08003785 	.word	0x08003785
 80037f0:	080038cd 	.word	0x080038cd
 80037f4:	6833      	ldr	r3, [r6, #0]
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6032      	str	r2, [r6, #0]
 80037fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003804:	2301      	movs	r3, #1
 8003806:	e09e      	b.n	8003946 <_printf_i+0x1ea>
 8003808:	6833      	ldr	r3, [r6, #0]
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1d19      	adds	r1, r3, #4
 800380e:	6031      	str	r1, [r6, #0]
 8003810:	0606      	lsls	r6, r0, #24
 8003812:	d501      	bpl.n	8003818 <_printf_i+0xbc>
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	e003      	b.n	8003820 <_printf_i+0xc4>
 8003818:	0645      	lsls	r5, r0, #25
 800381a:	d5fb      	bpl.n	8003814 <_printf_i+0xb8>
 800381c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003820:	2d00      	cmp	r5, #0
 8003822:	da03      	bge.n	800382c <_printf_i+0xd0>
 8003824:	232d      	movs	r3, #45	@ 0x2d
 8003826:	426d      	negs	r5, r5
 8003828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800382c:	230a      	movs	r3, #10
 800382e:	4859      	ldr	r0, [pc, #356]	@ (8003994 <_printf_i+0x238>)
 8003830:	e011      	b.n	8003856 <_printf_i+0xfa>
 8003832:	6821      	ldr	r1, [r4, #0]
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	0608      	lsls	r0, r1, #24
 8003838:	f853 5b04 	ldr.w	r5, [r3], #4
 800383c:	d402      	bmi.n	8003844 <_printf_i+0xe8>
 800383e:	0649      	lsls	r1, r1, #25
 8003840:	bf48      	it	mi
 8003842:	b2ad      	uxthmi	r5, r5
 8003844:	2f6f      	cmp	r7, #111	@ 0x6f
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	bf14      	ite	ne
 800384a:	230a      	movne	r3, #10
 800384c:	2308      	moveq	r3, #8
 800384e:	4851      	ldr	r0, [pc, #324]	@ (8003994 <_printf_i+0x238>)
 8003850:	2100      	movs	r1, #0
 8003852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003856:	6866      	ldr	r6, [r4, #4]
 8003858:	2e00      	cmp	r6, #0
 800385a:	bfa8      	it	ge
 800385c:	6821      	ldrge	r1, [r4, #0]
 800385e:	60a6      	str	r6, [r4, #8]
 8003860:	bfa4      	itt	ge
 8003862:	f021 0104 	bicge.w	r1, r1, #4
 8003866:	6021      	strge	r1, [r4, #0]
 8003868:	b90d      	cbnz	r5, 800386e <_printf_i+0x112>
 800386a:	2e00      	cmp	r6, #0
 800386c:	d04b      	beq.n	8003906 <_printf_i+0x1aa>
 800386e:	4616      	mov	r6, r2
 8003870:	fbb5 f1f3 	udiv	r1, r5, r3
 8003874:	fb03 5711 	mls	r7, r3, r1, r5
 8003878:	5dc7      	ldrb	r7, [r0, r7]
 800387a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800387e:	462f      	mov	r7, r5
 8003880:	42bb      	cmp	r3, r7
 8003882:	460d      	mov	r5, r1
 8003884:	d9f4      	bls.n	8003870 <_printf_i+0x114>
 8003886:	2b08      	cmp	r3, #8
 8003888:	d10b      	bne.n	80038a2 <_printf_i+0x146>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	07df      	lsls	r7, r3, #31
 800388e:	d508      	bpl.n	80038a2 <_printf_i+0x146>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	6861      	ldr	r1, [r4, #4]
 8003894:	4299      	cmp	r1, r3
 8003896:	bfde      	ittt	le
 8003898:	2330      	movle	r3, #48	@ 0x30
 800389a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800389e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038a2:	1b92      	subs	r2, r2, r6
 80038a4:	6122      	str	r2, [r4, #16]
 80038a6:	464b      	mov	r3, r9
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f8cd a000 	str.w	sl, [sp]
 80038b0:	aa03      	add	r2, sp, #12
 80038b2:	f7ff fee1 	bl	8003678 <_printf_common>
 80038b6:	3001      	adds	r0, #1
 80038b8:	d14a      	bne.n	8003950 <_printf_i+0x1f4>
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	b004      	add	sp, #16
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f043 0320 	orr.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2778      	movs	r7, #120	@ 0x78
 80038ce:	4832      	ldr	r0, [pc, #200]	@ (8003998 <_printf_i+0x23c>)
 80038d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	6831      	ldr	r1, [r6, #0]
 80038d8:	061f      	lsls	r7, r3, #24
 80038da:	f851 5b04 	ldr.w	r5, [r1], #4
 80038de:	d402      	bmi.n	80038e6 <_printf_i+0x18a>
 80038e0:	065f      	lsls	r7, r3, #25
 80038e2:	bf48      	it	mi
 80038e4:	b2ad      	uxthmi	r5, r5
 80038e6:	6031      	str	r1, [r6, #0]
 80038e8:	07d9      	lsls	r1, r3, #31
 80038ea:	bf44      	itt	mi
 80038ec:	f043 0320 	orrmi.w	r3, r3, #32
 80038f0:	6023      	strmi	r3, [r4, #0]
 80038f2:	b11d      	cbz	r5, 80038fc <_printf_i+0x1a0>
 80038f4:	2310      	movs	r3, #16
 80038f6:	e7ab      	b.n	8003850 <_printf_i+0xf4>
 80038f8:	4826      	ldr	r0, [pc, #152]	@ (8003994 <_printf_i+0x238>)
 80038fa:	e7e9      	b.n	80038d0 <_printf_i+0x174>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f023 0320 	bic.w	r3, r3, #32
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	e7f6      	b.n	80038f4 <_printf_i+0x198>
 8003906:	4616      	mov	r6, r2
 8003908:	e7bd      	b.n	8003886 <_printf_i+0x12a>
 800390a:	6833      	ldr	r3, [r6, #0]
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1d18      	adds	r0, r3, #4
 8003910:	6961      	ldr	r1, [r4, #20]
 8003912:	6030      	str	r0, [r6, #0]
 8003914:	062e      	lsls	r6, r5, #24
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	d501      	bpl.n	800391e <_printf_i+0x1c2>
 800391a:	6019      	str	r1, [r3, #0]
 800391c:	e002      	b.n	8003924 <_printf_i+0x1c8>
 800391e:	0668      	lsls	r0, r5, #25
 8003920:	d5fb      	bpl.n	800391a <_printf_i+0x1be>
 8003922:	8019      	strh	r1, [r3, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	4616      	mov	r6, r2
 8003928:	6123      	str	r3, [r4, #16]
 800392a:	e7bc      	b.n	80038a6 <_printf_i+0x14a>
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	2100      	movs	r1, #0
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	6032      	str	r2, [r6, #0]
 8003934:	681e      	ldr	r6, [r3, #0]
 8003936:	6862      	ldr	r2, [r4, #4]
 8003938:	4630      	mov	r0, r6
 800393a:	f000 f859 	bl	80039f0 <memchr>
 800393e:	b108      	cbz	r0, 8003944 <_printf_i+0x1e8>
 8003940:	1b80      	subs	r0, r0, r6
 8003942:	6060      	str	r0, [r4, #4]
 8003944:	6863      	ldr	r3, [r4, #4]
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800394e:	e7aa      	b.n	80038a6 <_printf_i+0x14a>
 8003950:	4632      	mov	r2, r6
 8003952:	4649      	mov	r1, r9
 8003954:	4640      	mov	r0, r8
 8003956:	6923      	ldr	r3, [r4, #16]
 8003958:	47d0      	blx	sl
 800395a:	3001      	adds	r0, #1
 800395c:	d0ad      	beq.n	80038ba <_printf_i+0x15e>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	079b      	lsls	r3, r3, #30
 8003962:	d413      	bmi.n	800398c <_printf_i+0x230>
 8003964:	68e0      	ldr	r0, [r4, #12]
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	4298      	cmp	r0, r3
 800396a:	bfb8      	it	lt
 800396c:	4618      	movlt	r0, r3
 800396e:	e7a6      	b.n	80038be <_printf_i+0x162>
 8003970:	2301      	movs	r3, #1
 8003972:	4632      	mov	r2, r6
 8003974:	4649      	mov	r1, r9
 8003976:	4640      	mov	r0, r8
 8003978:	47d0      	blx	sl
 800397a:	3001      	adds	r0, #1
 800397c:	d09d      	beq.n	80038ba <_printf_i+0x15e>
 800397e:	3501      	adds	r5, #1
 8003980:	68e3      	ldr	r3, [r4, #12]
 8003982:	9903      	ldr	r1, [sp, #12]
 8003984:	1a5b      	subs	r3, r3, r1
 8003986:	42ab      	cmp	r3, r5
 8003988:	dcf2      	bgt.n	8003970 <_printf_i+0x214>
 800398a:	e7eb      	b.n	8003964 <_printf_i+0x208>
 800398c:	2500      	movs	r5, #0
 800398e:	f104 0619 	add.w	r6, r4, #25
 8003992:	e7f5      	b.n	8003980 <_printf_i+0x224>
 8003994:	08003b03 	.word	0x08003b03
 8003998:	08003b14 	.word	0x08003b14

0800399c <memmove>:
 800399c:	4288      	cmp	r0, r1
 800399e:	b510      	push	{r4, lr}
 80039a0:	eb01 0402 	add.w	r4, r1, r2
 80039a4:	d902      	bls.n	80039ac <memmove+0x10>
 80039a6:	4284      	cmp	r4, r0
 80039a8:	4623      	mov	r3, r4
 80039aa:	d807      	bhi.n	80039bc <memmove+0x20>
 80039ac:	1e43      	subs	r3, r0, #1
 80039ae:	42a1      	cmp	r1, r4
 80039b0:	d008      	beq.n	80039c4 <memmove+0x28>
 80039b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ba:	e7f8      	b.n	80039ae <memmove+0x12>
 80039bc:	4601      	mov	r1, r0
 80039be:	4402      	add	r2, r0
 80039c0:	428a      	cmp	r2, r1
 80039c2:	d100      	bne.n	80039c6 <memmove+0x2a>
 80039c4:	bd10      	pop	{r4, pc}
 80039c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ce:	e7f7      	b.n	80039c0 <memmove+0x24>

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d05      	ldr	r5, [pc, #20]	@ (80039ec <_sbrk_r+0x1c>)
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fc fe54 	bl	8000688 <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000328 	.word	0x20000328

080039f0 <memchr>:
 80039f0:	4603      	mov	r3, r0
 80039f2:	b510      	push	{r4, lr}
 80039f4:	b2c9      	uxtb	r1, r1
 80039f6:	4402      	add	r2, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	d101      	bne.n	8003a02 <memchr+0x12>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e003      	b.n	8003a0a <memchr+0x1a>
 8003a02:	7804      	ldrb	r4, [r0, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	428c      	cmp	r4, r1
 8003a08:	d1f6      	bne.n	80039f8 <memchr+0x8>
 8003a0a:	bd10      	pop	{r4, pc}

08003a0c <memcpy>:
 8003a0c:	440a      	add	r2, r1
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a14:	d100      	bne.n	8003a18 <memcpy+0xc>
 8003a16:	4770      	bx	lr
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1e:	4291      	cmp	r1, r2
 8003a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a24:	d1f9      	bne.n	8003a1a <memcpy+0xe>
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <_realloc_r>:
 8003a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	4615      	mov	r5, r2
 8003a30:	460c      	mov	r4, r1
 8003a32:	b921      	cbnz	r1, 8003a3e <_realloc_r+0x16>
 8003a34:	4611      	mov	r1, r2
 8003a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	f7ff bc39 	b.w	80032b0 <_malloc_r>
 8003a3e:	b92a      	cbnz	r2, 8003a4c <_realloc_r+0x24>
 8003a40:	f7ff fbcc 	bl	80031dc <_free_r>
 8003a44:	2400      	movs	r4, #0
 8003a46:	4620      	mov	r0, r4
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	f000 f81a 	bl	8003a84 <_malloc_usable_size_r>
 8003a50:	4285      	cmp	r5, r0
 8003a52:	4606      	mov	r6, r0
 8003a54:	d802      	bhi.n	8003a5c <_realloc_r+0x34>
 8003a56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a5a:	d8f4      	bhi.n	8003a46 <_realloc_r+0x1e>
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7ff fc26 	bl	80032b0 <_malloc_r>
 8003a64:	4607      	mov	r7, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d0ec      	beq.n	8003a44 <_realloc_r+0x1c>
 8003a6a:	42b5      	cmp	r5, r6
 8003a6c:	462a      	mov	r2, r5
 8003a6e:	4621      	mov	r1, r4
 8003a70:	bf28      	it	cs
 8003a72:	4632      	movcs	r2, r6
 8003a74:	f7ff ffca 	bl	8003a0c <memcpy>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f7ff fbae 	bl	80031dc <_free_r>
 8003a80:	463c      	mov	r4, r7
 8003a82:	e7e0      	b.n	8003a46 <_realloc_r+0x1e>

08003a84 <_malloc_usable_size_r>:
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f18      	subs	r0, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfbc      	itt	lt
 8003a8e:	580b      	ldrlt	r3, [r1, r0]
 8003a90:	18c0      	addlt	r0, r0, r3
 8003a92:	4770      	bx	lr

08003a94 <_init>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

08003aa0 <_fini>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr
