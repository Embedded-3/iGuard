
SensorSetting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e0  080047e0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  08004844  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004844  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cea3  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002793  00000000  00000000  00012f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000156c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab9  00000000  00000000  000164c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938c  00000000  00000000  00016f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011187  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009164a  00000000  00000000  00041494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2ade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  000d2b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d6a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004738 	.word	0x08004738

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004738 	.word	0x08004738

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_ADC1_Init+0x74>)
 800094e:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <MX_ADC1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_ADC1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_ADC1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_ADC1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_ADC1_Init+0x74>)
 8000966:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800096a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_ADC1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_ADC1_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_ADC1_Init+0x74>)
 800097a:	f000 fe41 	bl	8001600 <HAL_ADC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 fb14 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000988:	230b      	movs	r3, #11
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2301      	movs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_ADC1_Init+0x74>)
 800099a:	f000 ff09 	bl	80017b0 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009a4:	f000 fb04 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000078 	.word	0x20000078
 80009b4:	40012400 	.word	0x40012400

080009b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <HAL_ADC_MspInit+0x6c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d121      	bne.n	8000a1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_ADC_MspInit+0x70>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_ADC_MspInit+0x74>)
 8000a18:	f001 fa0c 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40012400 	.word	0x40012400
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_CAN_Init+0x60>)
 8000a7e:	f000 ffd0 	bl	8001a22 <HAL_CAN_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fa92 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000a8 	.word	0x200000a8
 8000a94:	40006400 	.word	0x40006400

08000a98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <HAL_CAN_MspInit+0x8c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d131      	bne.n	8000b1c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000abe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac2:	61d3      	str	r3, [r2, #28]
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_CAN_MspInit+0x90>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ae8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <HAL_CAN_MspInit+0x94>)
 8000afe:	f001 f999 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_CAN_MspInit+0x94>)
 8000b18:	f001 f98c 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40006400 	.word	0x40006400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800

08000b30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b3d      	ldr	r3, [pc, #244]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a3c      	ldr	r2, [pc, #240]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a30      	ldr	r2, [pc, #192]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a2a      	ldr	r2, [pc, #168]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <MX_GPIO_Init+0x10c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4825      	ldr	r0, [pc, #148]	@ (8000c40 <MX_GPIO_Init+0x110>)
 8000baa:	f001 fade 	bl	800216a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	@ 0x40
 8000bb2:	4824      	ldr	r0, [pc, #144]	@ (8000c44 <MX_GPIO_Init+0x114>)
 8000bb4:	f001 fad9 	bl	800216a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_GPIO_Init+0x118>)
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481f      	ldr	r0, [pc, #124]	@ (8000c4c <MX_GPIO_Init+0x11c>)
 8000bce:	f001 f931 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <MX_GPIO_Init+0x110>)
 8000bea:	f001 f923 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <MX_GPIO_Init+0x114>)
 8000c02:	f001 f917 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <MX_GPIO_Init+0x114>)
 8000c1e:	f001 f909 	bl	8001e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2028      	movs	r0, #40	@ 0x28
 8000c28:	f001 f8cd 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c2c:	2028      	movs	r0, #40	@ 0x28
 8000c2e:	f001 f8e6 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40011000 	.word	0x40011000

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f000 fc4d 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f849 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f7ff ff67 	bl	8000b30 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c62:	f7ff fe6b 	bl	800093c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c66:	f000 fa55 	bl	8001114 <MX_TIM2_Init>
  MX_USART2_Init();
 8000c6a:	f000 fb1d 	bl	80012a8 <MX_USART2_Init>
  MX_CAN_Init();
 8000c6e:	f7ff fedf 	bl	8000a30 <MX_CAN_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000c72:	2108      	movs	r1, #8
 8000c74:	4818      	ldr	r0, [pc, #96]	@ (8000cd8 <main+0x88>)
 8000c76:	f002 f821 	bl	8002cbc <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(3000);
 8000c7a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c7e:	f000 fc9b 	bl	80015b8 <HAL_Delay>
	  HCSR04_Read();
 8000c82:	f000 f977 	bl	8000f74 <HCSR04_Read>
	  bReadHCSR501 = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8000c86:	2110      	movs	r1, #16
 8000c88:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <main+0x8c>)
 8000c8a:	f001 fa57 	bl	800213c <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <main+0x90>)
 8000c94:	701a      	strb	r2, [r3, #0]

	  char buffer[30];
	  //HAL_USART_Transmit(&husart2, (char*)"main", 8, HAL_MAX_DELAY);
	  switch(bReadHCSR501){
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <main+0x90>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <main+0x56>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d006      	beq.n	8000cb2 <main+0x62>
	  		break;
	  	case(GPIO_PIN_SET):
			sprintf(buffer, "Detective\n");
	  		break;
	  	default:
	  		break;
 8000ca4:	e00b      	b.n	8000cbe <main+0x6e>
			sprintf(buffer, "Not Detective\n");
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	490e      	ldr	r1, [pc, #56]	@ (8000ce4 <main+0x94>)
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f894 	bl	8003dd8 <siprintf>
	  		break;
 8000cb0:	e005      	b.n	8000cbe <main+0x6e>
			sprintf(buffer, "Detective\n");
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <main+0x98>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f88e 	bl	8003dd8 <siprintf>
	  		break;
 8000cbc:	bf00      	nop

	  }
	  HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fa45 	bl	8000150 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <main+0x9c>)
 8000cd2:	f002 fea2 	bl	8003a1a <HAL_USART_Transmit>
  {
 8000cd6:	e7d0      	b.n	8000c7a <main+0x2a>
 8000cd8:	200000e4 	.word	0x200000e4
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	200000de 	.word	0x200000de
 8000ce4:	08004750 	.word	0x08004750
 8000ce8:	08004760 	.word	0x08004760
 8000cec:	2000012c 	.word	0x2000012c

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	@ 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfa:	2228      	movs	r2, #40	@ 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 f88a 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d30:	2300      	movs	r3, #0
 8000d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d34:	2300      	movs	r3, #0
 8000d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fa4f 	bl	80021e0 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d48:	f000 f932 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fcbb 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d74:	f000 f91c 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fe3c 	bl	8002a00 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d8e:	f000 f90f 	bl	8000fb0 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3750      	adds	r7, #80	@ 0x50
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <delay>:

/* USER CODE BEGIN 4 */
void delay (uint16_t time)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <delay+0x2c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER (&htim2) < time);
 8000dae:	bf00      	nop
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <delay+0x2c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d3f9      	bcc.n	8000db0 <delay+0x14>
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	200000e4 	.word	0x200000e4
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7f1b      	ldrb	r3, [r3, #28]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	f040 80ae 	bne.w	8000f3e <HAL_TIM_IC_CaptureCallback+0x16e>
    {
        if (Is_First_Captured==0) // if the first value is not captured
 8000de2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f50 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d12e      	bne.n	8000e48 <HAL_TIM_IC_CaptureCallback+0x78>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000dea:	2108      	movs	r1, #8
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f002 fac5 	bl	800337c <HAL_TIM_ReadCapturedValue>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a57      	ldr	r2, [pc, #348]	@ (8000f54 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000df6:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8000df8:	4b55      	ldr	r3, [pc, #340]	@ (8000f50 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e0c:	621a      	str	r2, [r3, #32]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a1a      	ldr	r2, [r3, #32]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e1c:	621a      	str	r2, [r3, #32]
            char buffer[10];
            sprintf(buffer, "start");
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	494d      	ldr	r1, [pc, #308]	@ (8000f58 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 ffd7 	bl	8003dd8 <siprintf>
            HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f98e 	bl	8000150 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 0114 	add.w	r1, r7, #20
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	4846      	ldr	r0, [pc, #280]	@ (8000f5c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e42:	f002 fdea 	bl	8003a1a <HAL_USART_Transmit>
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
        }
    }
}
 8000e46:	e07a      	b.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x16e>
        else if (Is_First_Captured==1)   // if the first is already captured
 8000e48:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d176      	bne.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x16e>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000e50:	2108      	movs	r1, #8
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f002 fa92 	bl	800337c <HAL_TIM_ReadCapturedValue>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a41      	ldr	r2, [pc, #260]	@ (8000f60 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e5c:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2 > IC_Val1)
 8000e66:	4b3e      	ldr	r3, [pc, #248]	@ (8000f60 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <HAL_TIM_IC_CaptureCallback+0xb2>
                Difference = IC_Val2-IC_Val1;
 8000e72:	4b3b      	ldr	r3, [pc, #236]	@ (8000f60 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b37      	ldr	r3, [pc, #220]	@ (8000f54 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	4a39      	ldr	r2, [pc, #228]	@ (8000f64 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e00f      	b.n	8000ea2 <HAL_TIM_IC_CaptureCallback+0xd2>
            else if (IC_Val1 > IC_Val2)
 8000e82:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d909      	bls.n	8000ea2 <HAL_TIM_IC_CaptureCallback+0xd2>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e8e:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e9c:	33ff      	adds	r3, #255	@ 0xff
 8000e9e:	4a31      	ldr	r2, [pc, #196]	@ (8000f64 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000ea0:	6013      	str	r3, [r2, #0]
            Distance = Difference * .034/2;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa9c 	bl	80003e4 <__aeabi_ui2d>
 8000eac:	a326      	add	r3, pc, #152	@ (adr r3, 8000f48 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fb11 	bl	80004d8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ec6:	f7ff fc31 	bl	800072c <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fd13 	bl	80008fc <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000edc:	701a      	strb	r2, [r3, #0]
            sprintf(buffer, "%d\n", Distance);
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4920      	ldr	r1, [pc, #128]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 ff74 	bl	8003dd8 <siprintf>
            HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f92b 	bl	8000150 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f107 0108 	add.w	r1, r7, #8
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000f08:	f002 fd87 	bl	8003a1a <HAL_USART_Transmit>
            Is_First_Captured = 0; // set it back to false
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f20:	621a      	str	r2, [r3, #32]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a12      	ldr	r2, [r2, #32]
 8000f2c:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0208 	bic.w	r2, r2, #8
 8000f3c:	60da      	str	r2, [r3, #12]
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	b020c49c 	.word	0xb020c49c
 8000f4c:	3fa16872 	.word	0x3fa16872
 8000f50:	200000dc 	.word	0x200000dc
 8000f54:	200000d0 	.word	0x200000d0
 8000f58:	0800476c 	.word	0x0800476c
 8000f5c:	2000012c 	.word	0x2000012c
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	200000d8 	.word	0x200000d8
 8000f68:	200000dd 	.word	0x200000dd
 8000f6c:	08004774 	.word	0x08004774
 8000f70:	200000e4 	.word	0x200000e4

08000f74 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	@ 0x40
 8000f7c:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <HCSR04_Read+0x34>)
 8000f7e:	f001 f8f4 	bl	800216a <HAL_GPIO_WritePin>
	delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f7ff ff0a 	bl	8000d9c <delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2140      	movs	r1, #64	@ 0x40
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <HCSR04_Read+0x34>)
 8000f8e:	f001 f8ec 	bl	800216a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HCSR04_Read+0x38>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <HCSR04_Read+0x38>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0208 	orr.w	r2, r2, #8
 8000fa0:	60da      	str	r2, [r3, #12]
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	200000e4 	.word	0x200000e4

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <NMI_Handler+0x4>

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <MemManage_Handler+0x4>

08001038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <UsageFault_Handler+0x4>

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 fa86 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM2_IRQHandler+0x10>)
 800107e:	f001 ff29 	bl	8002ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000e4 	.word	0x200000e4

0800108c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001090:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001094:	f001 f882 	bl	800219c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 feac 	bl	8003e28 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20005000 	.word	0x20005000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200000e0 	.word	0x200000e0
 8001104:	200002c0 	.word	0x200002c0

08001108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113e:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001140:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001144:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001148:	2207      	movs	r2, #7
 800114a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001154:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001158:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001166:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001168:	f001 fd00 	bl	8002b6c <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001172:	f7ff ff1d 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4619      	mov	r1, r3
 8001182:	481b      	ldr	r0, [pc, #108]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001184:	f002 f832 	bl	80031ec <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800118e:	f7ff ff0f 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001192:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 8001194:	f001 fd39 	bl	8002c0a <HAL_TIM_IC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800119e:	f7ff ff07 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 80011b2:	f002 fb81 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80011bc:	f7ff fef8 	bl	8000fb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_TIM2_Init+0xdc>)
 80011d8:	f001 ff6c 	bl	80030b4 <HAL_TIM_IC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011e2:	f7ff fee5 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000e4 	.word	0x200000e4

080011f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001212:	d13e      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	4a20      	ldr	r2, [pc, #128]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	61d3      	str	r3, [r2, #28]
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a1a      	ldr	r2, [pc, #104]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_TIM_Base_MspInit+0xa8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <HAL_TIM_Base_MspInit+0xac>)
 800125a:	f000 fdeb 	bl	8001e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_TIM_Base_MspInit+0xb0>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
 800127c:	4a09      	ldr	r2, [pc, #36]	@ (80012a4 <HAL_TIM_Base_MspInit+0xb0>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	201c      	movs	r0, #28
 8001288:	f000 fd9d 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128c:	201c      	movs	r0, #28
 800128e:	f000 fdb6 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40010000 	.word	0x40010000

080012a8 <MX_USART2_Init>:
  /* USER CODE END USART1_Init 2 */

}
/* USART2 init function */
void MX_USART2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <MX_USART2_Init+0x54>)
 80012b0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <MX_USART2_Init+0x50>)
 80012e6:	f002 fb57 	bl	8003998 <HAL_USART_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f7ff fe5e 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000012c 	.word	0x2000012c
 80012fc:	40004400 	.word	0x40004400

08001300 <HAL_USART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(usartHandle->Instance==USART1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a5c      	ldr	r2, [pc, #368]	@ (800148c <HAL_USART_MspInit+0x18c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d132      	bne.n	8001386 <HAL_USART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001320:	4b5b      	ldr	r3, [pc, #364]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a5a      	ldr	r2, [pc, #360]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b58      	ldr	r3, [pc, #352]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a54      	ldr	r2, [pc, #336]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001350:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	484b      	ldr	r0, [pc, #300]	@ (8001494 <HAL_USART_MspInit+0x194>)
 8001366:	f000 fd65 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800136a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4845      	ldr	r0, [pc, #276]	@ (8001494 <HAL_USART_MspInit+0x194>)
 8001380:	f000 fd58 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001384:	e07e      	b.n	8001484 <HAL_USART_MspInit+0x184>
  else if(usartHandle->Instance==USART2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a43      	ldr	r2, [pc, #268]	@ (8001498 <HAL_USART_MspInit+0x198>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d130      	bne.n	80013f2 <HAL_USART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001390:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	4a3e      	ldr	r2, [pc, #248]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139a:	61d3      	str	r3, [r2, #28]
 800139c:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <HAL_USART_MspInit+0x190>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a38      	ldr	r2, [pc, #224]	@ (8001490 <HAL_USART_MspInit+0x190>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <HAL_USART_MspInit+0x190>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c0:	230c      	movs	r3, #12
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2302      	movs	r3, #2
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4830      	ldr	r0, [pc, #192]	@ (8001494 <HAL_USART_MspInit+0x194>)
 80013d4:	f000 fd2e 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d8:	2310      	movs	r3, #16
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	482a      	ldr	r0, [pc, #168]	@ (8001494 <HAL_USART_MspInit+0x194>)
 80013ec:	f000 fd22 	bl	8001e34 <HAL_GPIO_Init>
}
 80013f0:	e048      	b.n	8001484 <HAL_USART_MspInit+0x184>
  else if(usartHandle->Instance==USART3)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a29      	ldr	r2, [pc, #164]	@ (800149c <HAL_USART_MspInit+0x19c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d143      	bne.n	8001484 <HAL_USART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_USART_MspInit+0x190>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <HAL_USART_MspInit+0x190>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_USART_MspInit+0x190>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800142c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <HAL_USART_MspInit+0x1a0>)
 8001442:	f000 fcf7 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001446:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <HAL_USART_MspInit+0x1a0>)
 800145c:	f000 fcea 	bl	8001e34 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_USART_MspInit+0x1a4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
 8001466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001468:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800146c:	637b      	str	r3, [r7, #52]	@ 0x34
 800146e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001470:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
 8001476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	637b      	str	r3, [r7, #52]	@ 0x34
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_USART_MspInit+0x1a4>)
 8001480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001482:	6053      	str	r3, [r2, #4]
}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	@ 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40013800 	.word	0x40013800
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800
 8001498:	40004400 	.word	0x40004400
 800149c:	40004800 	.word	0x40004800
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40010000 	.word	0x40010000

080014a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a8:	f7ff fe2e 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ae:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014b0:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c4:	4c09      	ldr	r4, [pc, #36]	@ (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f002 fcaf 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d6:	f7ff fbbb 	bl	8000c50 <main>
  bx lr
 80014da:	4770      	bx	lr
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014e4:	080047e8 	.word	0x080047e8
  ldr r2, =_sbss
 80014e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014ec:	200002bc 	.word	0x200002bc

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_Init+0x28>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_Init+0x28>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 fc53 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f808 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff fd54 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_InitTick+0x54>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_InitTick+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fc6b 	bl	8001e1a <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 fc33 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	@ (800157c <HAL_InitTick+0x5c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_IncTick+0x1c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_IncTick+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <HAL_IncTick+0x20>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000170 	.word	0x20000170

080015a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <HAL_GetTick+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000170 	.word	0x20000170

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fff0 	bl	80015a4 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffe0 	bl	80015a4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0be      	b.n	80017a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff f9ba 	bl	80009b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f9ab 	bl	80019a0 <ADC_ConversionStop_Disable>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 8099 	bne.w	800178e <HAL_ADC_Init+0x18e>
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 8095 	bne.w	800178e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001668:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	f043 0202 	orr.w	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001680:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7b1b      	ldrb	r3, [r3, #12]
 8001686:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001688:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4313      	orrs	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_Init+0xa2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d102      	bne.n	80016a8 <HAL_ADC_Init+0xa8>
 80016a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a6:	e000      	b.n	80016aa <HAL_ADC_Init+0xaa>
 80016a8:	2300      	movs	r3, #0
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7d1b      	ldrb	r3, [r3, #20]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d119      	bne.n	80016ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7b1b      	ldrb	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	035a      	lsls	r2, r3, #13
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e00b      	b.n	80016ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f043 0220 	orr.w	r2, r3, #32
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <HAL_ADC_Init+0x1a8>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	430b      	orrs	r3, r1
 8001712:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800171c:	d003      	beq.n	8001726 <HAL_ADC_Init+0x126>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d104      	bne.n	8001730 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	3b01      	subs	r3, #1
 800172c:	051b      	lsls	r3, r3, #20
 800172e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	430a      	orrs	r2, r1
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <HAL_ADC_Init+0x1ac>)
 800174c:	4013      	ands	r3, r2
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d10b      	bne.n	800176c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176a:	e018      	b.n	800179e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f023 0312 	bic.w	r3, r3, #18
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800178c:	e007      	b.n	800179e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	ffe1f7fd 	.word	0xffe1f7fd
 80017ac:	ff1f0efe 	.word	0xff1f0efe

080017b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x20>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0dc      	b.n	800198a <HAL_ADC_ConfigChannel+0x1da>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d81c      	bhi.n	800181a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b05      	subs	r3, #5
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
 8001818:	e03c      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d81c      	bhi.n	800185c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b23      	subs	r3, #35	@ 0x23
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	4019      	ands	r1, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b23      	subs	r3, #35	@ 0x23
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	631a      	str	r2, [r3, #48]	@ 0x30
 800185a:	e01b      	b.n	8001894 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b41      	subs	r3, #65	@ 0x41
 800186e:	221f      	movs	r2, #31
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4019      	ands	r1, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b41      	subs	r3, #65	@ 0x41
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d91c      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3b1e      	subs	r3, #30
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e019      	b.n	800190a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d003      	beq.n	800191a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	2b11      	cmp	r3, #17
 8001918:	d132      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_ADC_ConfigChannel+0x1e4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d125      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d126      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001940:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d11a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_ADC_ConfigChannel+0x1e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <HAL_ADC_ConfigChannel+0x1ec>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3b01      	subs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x1b2>
 800196e:	e007      	b.n	8001980 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40012400 	.word	0x40012400
 8001998:	20000000 	.word	0x20000000
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d12e      	bne.n	8001a18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ca:	f7ff fdeb 	bl	80015a4 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d0:	e01b      	b.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d2:	f7ff fde7 	bl	80015a4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d914      	bls.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10d      	bne.n	8001a0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d0dc      	beq.n	80019d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0ed      	b.n	8001c10 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff f829 	bl	8000a98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a56:	f7ff fda5 	bl	80015a4 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a5c:	e012      	b.n	8001a84 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5e:	f7ff fda1 	bl	80015a4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d90b      	bls.n	8001a84 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2205      	movs	r2, #5
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c5      	b.n	8001c10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0e5      	beq.n	8001a5e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0202 	bic.w	r2, r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa2:	f7ff fd7f 	bl	80015a4 <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa8:	e012      	b.n	8001ad0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aaa:	f7ff fd7b 	bl	80015a4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b0a      	cmp	r3, #10
 8001ab6:	d90b      	bls.n	8001ad0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e09f      	b.n	8001c10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e5      	bne.n	8001aaa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e1b      	ldrb	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e5b      	ldrb	r3, [r3, #25]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e007      	b.n	8001b32 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7e9b      	ldrb	r3, [r3, #26]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0220 	bic.w	r2, r2, #32
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7edb      	ldrb	r3, [r3, #27]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0210 	bic.w	r2, r2, #16
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0210 	orr.w	r2, r2, #16
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0208 	orr.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0208 	bic.w	r2, r2, #8
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f5b      	ldrb	r3, [r3, #29]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0204 	orr.w	r2, r2, #4
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	ea42 0103 	orr.w	r1, r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <__NVIC_EnableIRQ+0x34>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff90 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff2d 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff42 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff90 	bl	8001d08 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5f 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff35 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b08b      	sub	sp, #44	@ 0x2c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e46:	e169      	b.n	800211c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8158 	bne.w	8002116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d05e      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e70:	4a98      	ldr	r2, [pc, #608]	@ (80020d4 <HAL_GPIO_Init+0x2a0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d875      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e76:	4a98      	ldr	r2, [pc, #608]	@ (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d058      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e7c:	4a96      	ldr	r2, [pc, #600]	@ (80020d8 <HAL_GPIO_Init+0x2a4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d86f      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e82:	4a96      	ldr	r2, [pc, #600]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d052      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e88:	4a94      	ldr	r2, [pc, #592]	@ (80020dc <HAL_GPIO_Init+0x2a8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d869      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e8e:	4a94      	ldr	r2, [pc, #592]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04c      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001e94:	4a92      	ldr	r2, [pc, #584]	@ (80020e0 <HAL_GPIO_Init+0x2ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d863      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001e9a:	4a92      	ldr	r2, [pc, #584]	@ (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d046      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a90      	ldr	r2, [pc, #576]	@ (80020e4 <HAL_GPIO_Init+0x2b0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d85d      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d82a      	bhi.n	8001f00 <HAL_GPIO_Init+0xcc>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d859      	bhi.n	8001f62 <HAL_GPIO_Init+0x12e>
 8001eae:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <HAL_GPIO_Init+0x80>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f1b 	.word	0x08001f1b
 8001ec0:	08001f5d 	.word	0x08001f5d
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f63 	.word	0x08001f63
 8001ecc:	08001f63 	.word	0x08001f63
 8001ed0:	08001f63 	.word	0x08001f63
 8001ed4:	08001f63 	.word	0x08001f63
 8001ed8:	08001f63 	.word	0x08001f63
 8001edc:	08001f63 	.word	0x08001f63
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f63 	.word	0x08001f63
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f63 	.word	0x08001f63
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f63 	.word	0x08001f63
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f25 	.word	0x08001f25
 8001f00:	4a79      	ldr	r2, [pc, #484]	@ (80020e8 <HAL_GPIO_Init+0x2b4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f06:	e02c      	b.n	8001f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e029      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	3304      	adds	r3, #4
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e024      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e01f      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e01a      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f36:	2304      	movs	r3, #4
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e013      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f44:	2308      	movs	r3, #8
 8001f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	611a      	str	r2, [r3, #16]
          break;
 8001f4e:	e009      	b.n	8001f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	615a      	str	r2, [r3, #20]
          break;
 8001f5a:	e003      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x130>
          break;
 8001f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	@ 0xff
 8001f68:	d801      	bhi.n	8001f6e <HAL_GPIO_Init+0x13a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_Init+0x13e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	@ 0xff
 8001f78:	d802      	bhi.n	8001f80 <HAL_GPIO_Init+0x14c>
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x152>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	3b08      	subs	r3, #8
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80b1 	beq.w	8002116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80020ec <HAL_GPIO_Init+0x2b8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fcc:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <HAL_GPIO_Init+0x2bc>)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a40      	ldr	r2, [pc, #256]	@ (80020f4 <HAL_GPIO_Init+0x2c0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1ec>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1e8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3e      	ldr	r2, [pc, #248]	@ (80020fc <HAL_GPIO_Init+0x2c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1e4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3d      	ldr	r2, [pc, #244]	@ (8002100 <HAL_GPIO_Init+0x2cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1e0>
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002014:	2304      	movs	r3, #4
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1ee>
 8002020:	2300      	movs	r3, #0
 8002022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002032:	492f      	ldr	r1, [pc, #188]	@ (80020f0 <HAL_GPIO_Init+0x2bc>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800204c:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	492c      	ldr	r1, [pc, #176]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4928      	ldr	r1, [pc, #160]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002074:	4b23      	ldr	r3, [pc, #140]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4922      	ldr	r1, [pc, #136]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	491e      	ldr	r1, [pc, #120]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4918      	ldr	r1, [pc, #96]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4914      	ldr	r1, [pc, #80]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d021      	beq.n	8002108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e021      	b.n	8002116 <HAL_GPIO_Init+0x2e2>
 80020d2:	bf00      	nop
 80020d4:	10320000 	.word	0x10320000
 80020d8:	10310000 	.word	0x10310000
 80020dc:	10220000 	.word	0x10220000
 80020e0:	10210000 	.word	0x10210000
 80020e4:	10120000 	.word	0x10120000
 80020e8:	10110000 	.word	0x10110000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40011000 	.word	0x40011000
 8002100:	40011400 	.word	0x40011400
 8002104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_GPIO_Init+0x304>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	43db      	mvns	r3, r3
 8002110:	4909      	ldr	r1, [pc, #36]	@ (8002138 <HAL_GPIO_Init+0x304>)
 8002112:	4013      	ands	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f ae8e 	bne.w	8001e48 <HAL_GPIO_Init+0x14>
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	372c      	adds	r7, #44	@ 0x2c
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e001      	b.n	800215e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
 8002176:	4613      	mov	r3, r2
 8002178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002186:	e003      	b.n	8002190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f806 	bl	80021cc <HAL_GPIO_EXTI_Callback>
  }
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e272      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b92      	ldr	r3, [pc, #584]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800220c:	4b8f      	ldr	r3, [pc, #572]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
 8002218:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b89      	ldr	r3, [pc, #548]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x12c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e24c      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x76>
 8002248:	4b80      	ldr	r3, [pc, #512]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7f      	ldr	r2, [pc, #508]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7a      	ldr	r2, [pc, #488]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b78      	ldr	r3, [pc, #480]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a77      	ldr	r2, [pc, #476]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xbc>
 8002282:	4b72      	ldr	r3, [pc, #456]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a71      	ldr	r2, [pc, #452]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 800229c:	4b6b      	ldr	r3, [pc, #428]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b68      	ldr	r3, [pc, #416]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a67      	ldr	r2, [pc, #412]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f972 	bl	80015a4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f96e 	bl	80015a4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e200      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b5d      	ldr	r3, [pc, #372]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe4>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f95e 	bl	80015a4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f95a 	bl	80015a4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1ec      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b53      	ldr	r3, [pc, #332]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x10c>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002326:	4b49      	ldr	r3, [pc, #292]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
 8002332:	4b46      	ldr	r3, [pc, #280]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1c0      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4939      	ldr	r1, [pc, #228]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <HAL_RCC_OscConfig+0x270>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff f913 	bl	80015a4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff f90f 	bl	80015a4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1a1      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4927      	ldr	r1, [pc, #156]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <HAL_RCC_OscConfig+0x270>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff f8f2 	bl	80015a4 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c4:	f7ff f8ee 	bl	80015a4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e180      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03a      	beq.n	8002464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff f8d2 	bl	80015a4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff f8ce 	bl	80015a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e160      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <HAL_RCC_OscConfig+0x26c>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 face 	bl	80029c4 <RCC_Delay>
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7ff f8b8 	bl	80015a4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002436:	e00f      	b.n	8002458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7ff f8b4 	bl	80015a4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d908      	bls.n	8002458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e146      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	42420000 	.word	0x42420000
 8002454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b92      	ldr	r3, [pc, #584]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e9      	bne.n	8002438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a6 	beq.w	80025be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b8b      	ldr	r3, [pc, #556]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a87      	ldr	r2, [pc, #540]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b85      	ldr	r3, [pc, #532]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x4c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <HAL_RCC_OscConfig+0x4c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7e      	ldr	r2, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x4c8>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff f875 	bl	80015a4 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff f871 	bl	80015a4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	@ 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e103      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b75      	ldr	r3, [pc, #468]	@ (80026a8 <HAL_RCC_OscConfig+0x4c8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x312>
 80024e4:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a6e      	ldr	r2, [pc, #440]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e02d      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x334>
 80024fa:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a69      	ldr	r2, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b67      	ldr	r3, [pc, #412]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a66      	ldr	r2, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x356>
 800251c:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a60      	ldr	r2, [pc, #384]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a5d      	ldr	r2, [pc, #372]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002536:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a5a      	ldr	r2, [pc, #360]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a57      	ldr	r2, [pc, #348]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff f825 	bl	80015a4 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff f821 	bl	80015a4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0b1      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b4b      	ldr	r3, [pc, #300]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x37e>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff f80f 	bl	80015a4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff f80b 	bl	80015a4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e09b      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b3c      	ldr	r3, [pc, #240]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a3b      	ldr	r2, [pc, #236]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d061      	beq.n	8002698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d146      	bne.n	800266a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b33      	ldr	r3, [pc, #204]	@ (80026ac <HAL_RCC_OscConfig+0x4cc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe ffdf 	bl	80015a4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe ffdb 	bl	80015a4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e06d      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4921      	ldr	r1, [pc, #132]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a19      	ldr	r1, [r3, #32]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	430b      	orrs	r3, r1
 8002636:	491b      	ldr	r1, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe ffaf 	bl	80015a4 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe ffab 	bl	80015a4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e03d      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x46a>
 8002668:	e035      	b.n	80026d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <HAL_RCC_OscConfig+0x4cc>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe ff98 	bl	80015a4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe ff94 	bl	80015a4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e026      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x498>
 8002696:	e01e      	b.n	80026d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e019      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_OscConfig+0x500>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0d0      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d910      	bls.n	8002728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b67      	ldr	r3, [pc, #412]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0207 	bic.w	r2, r3, #7
 800270e:	4965      	ldr	r1, [pc, #404]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b63      	ldr	r3, [pc, #396]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b8      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b59      	ldr	r3, [pc, #356]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a58      	ldr	r2, [pc, #352]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800274a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002758:	4b53      	ldr	r3, [pc, #332]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a52      	ldr	r2, [pc, #328]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b50      	ldr	r3, [pc, #320]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	494d      	ldr	r1, [pc, #308]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d040      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b47      	ldr	r3, [pc, #284]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d115      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07f      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e073      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3d      	ldr	r3, [pc, #244]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06b      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b39      	ldr	r3, [pc, #228]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4936      	ldr	r1, [pc, #216]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fee6 	bl	80015a4 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fee2 	bl	80015a4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e053      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2d      	ldr	r3, [pc, #180]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d210      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4922      	ldr	r1, [pc, #136]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e032      	b.n	800289a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4916      	ldr	r1, [pc, #88]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800285e:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	490e      	ldr	r1, [pc, #56]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002872:	f000 f821 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002876:	4602      	mov	r2, r0
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	490a      	ldr	r1, [pc, #40]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	5ccb      	ldrb	r3, [r1, r3]
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <HAL_RCC_ClockConfig+0x1cc>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe44 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08004778 	.word	0x08004778
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_RCC_GetSysClockFreq+0x94>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x30>
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x36>
 80028e6:	e027      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ea:	613b      	str	r3, [r7, #16]
      break;
 80028ec:	e027      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0c9b      	lsrs	r3, r3, #18
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
 80028fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_GetSysClockFreq+0x94>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0c5b      	lsrs	r3, r3, #17
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	4a11      	ldr	r2, [pc, #68]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	fb03 f202 	mul.w	r2, r3, r2
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e004      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <HAL_RCC_GetSysClockFreq+0xa4>)
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	613b      	str	r3, [r7, #16]
      break;
 8002936:	e002      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x98>)
 800293a:	613b      	str	r3, [r7, #16]
      break;
 800293c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293e:	693b      	ldr	r3, [r7, #16]
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	007a1200 	.word	0x007a1200
 8002954:	08004790 	.word	0x08004790
 8002958:	080047a0 	.word	0x080047a0
 800295c:	003d0900 	.word	0x003d0900

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b02      	ldr	r3, [pc, #8]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000000 	.word	0x20000000

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002978:	f7ff fff2 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4903      	ldr	r1, [pc, #12]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08004788 	.word	0x08004788

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a0:	f7ff ffde 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08004788 	.word	0x08004788

080029c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <RCC_Delay+0x34>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <RCC_Delay+0x38>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a5b      	lsrs	r3, r3, #9
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e0:	bf00      	nop
  }
  while (Delay --);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <RCC_Delay+0x1c>
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000000 	.word	0x20000000
 80029fc:	10624dd3 	.word	0x10624dd3

08002a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d07d      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a20:	4b4f      	ldr	r3, [pc, #316]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	61d3      	str	r3, [r2, #28]
 8002a38:	4b49      	ldr	r3, [pc, #292]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b46      	ldr	r3, [pc, #280]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d118      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a54:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a42      	ldr	r2, [pc, #264]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fda0 	bl	80015a4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	e008      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fd9c 	bl	80015a4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e06d      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a86:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d02e      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d027      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aae:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aba:	4a29      	ldr	r2, [pc, #164]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d014      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fd6b 	bl	80015a4 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fd67 	bl	80015a4 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e036      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ee      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4917      	ldr	r1, [pc, #92]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	490b      	ldr	r1, [pc, #44]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4904      	ldr	r1, [pc, #16]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42420440 	.word	0x42420440

08002b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe fb2e 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 fc4e 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e041      	b.n	8002ca0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f839 	bl	8002ca8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f000 fbff 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_IC_Start_IT+0x1e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0x46>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start_IT+0x2e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0x46>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0x3e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0x46>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <HAL_TIM_IC_Start_IT+0x58>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e013      	b.n	8002d3c <HAL_TIM_IC_Start_IT+0x80>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d104      	bne.n	8002d24 <HAL_TIM_IC_Start_IT+0x68>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e00b      	b.n	8002d3c <HAL_TIM_IC_Start_IT+0x80>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d104      	bne.n	8002d34 <HAL_TIM_IC_Start_IT+0x78>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e003      	b.n	8002d3c <HAL_TIM_IC_Start_IT+0x80>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	7bbb      	ldrb	r3, [r7, #14]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d44:	7b7b      	ldrb	r3, [r7, #13]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0b8      	b.n	8002ec0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_IC_Start_IT+0xa2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	e013      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0xca>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_IC_Start_IT+0xb2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	e00b      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0xca>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_IC_Start_IT+0xc2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d7c:	e003      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0xca>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_IC_Start_IT+0xda>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d94:	e013      	b.n	8002dbe <HAL_TIM_IC_Start_IT+0x102>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_IC_Start_IT+0xea>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da4:	e00b      	b.n	8002dbe <HAL_TIM_IC_Start_IT+0x102>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_IC_Start_IT+0xfa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db4:	e003      	b.n	8002dbe <HAL_TIM_IC_Start_IT+0x102>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d841      	bhi.n	8002e48 <HAL_TIM_IC_Start_IT+0x18c>
 8002dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <HAL_TIM_IC_Start_IT+0x110>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002e49 	.word	0x08002e49
 8002dd4:	08002e49 	.word	0x08002e49
 8002dd8:	08002e49 	.word	0x08002e49
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e49 	.word	0x08002e49
 8002de4:	08002e49 	.word	0x08002e49
 8002de8:	08002e49 	.word	0x08002e49
 8002dec:	08002e25 	.word	0x08002e25
 8002df0:	08002e49 	.word	0x08002e49
 8002df4:	08002e49 	.word	0x08002e49
 8002df8:	08002e49 	.word	0x08002e49
 8002dfc:	08002e37 	.word	0x08002e37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0202 	orr.w	r2, r2, #2
 8002e0e:	60da      	str	r2, [r3, #12]
      break;
 8002e10:	e01d      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0204 	orr.w	r2, r2, #4
 8002e20:	60da      	str	r2, [r3, #12]
      break;
 8002e22:	e014      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	60da      	str	r2, [r3, #12]
      break;
 8002e34:	e00b      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0210 	orr.w	r2, r2, #16
 8002e44:	60da      	str	r2, [r3, #12]
      break;
 8002e46:	e002      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d134      	bne.n	8002ebe <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fd06 	bl	800386e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a18      	ldr	r2, [pc, #96]	@ (8002ec8 <HAL_TIM_IC_Start_IT+0x20c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e74:	d009      	beq.n	8002e8a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <HAL_TIM_IC_Start_IT+0x210>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIM_IC_Start_IT+0x1ce>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <HAL_TIM_IC_Start_IT+0x214>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d111      	bne.n	8002eae <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d010      	beq.n	8002ebe <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	e007      	b.n	8002ebe <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800

08002ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0202 	mvn.w	r2, #2
 8002f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd ff56 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa75 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fa7b 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0204 	mvn.w	r2, #4
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd ff30 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa4f 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fa55 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d020      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01b      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0208 	mvn.w	r2, #8
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd ff0a 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa29 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fa2f 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d020      	beq.n	800301c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0210 	mvn.w	r2, #16
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fee4 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa03 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa09 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0201 	mvn.w	r2, #1
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9e2 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fc91 	bl	8003986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9d9 	bl	800343a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0220 	mvn.w	r2, #32
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fc64 	bl	8003974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e088      	b.n	80031e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80030f0:	f000 fa1a 	bl	8003528 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020c 	bic.w	r2, r2, #12
 8003102:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e060      	b.n	80031da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d11c      	bne.n	8003158 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800312e:	f000 fa83 	bl	8003638 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003140:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	021a      	lsls	r2, r3, #8
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e040      	b.n	80031da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11b      	bne.n	8003196 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800316e:	f000 face 	bl	800370e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020c 	bic.w	r2, r2, #12
 8003180:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
 8003194:	e021      	b.n	80031da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d11c      	bne.n	80031d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031ac:	f000 faea 	bl	8003784 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69d9      	ldr	r1, [r3, #28]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	61da      	str	r2, [r3, #28]
 80031d4:	e001      	b.n	80031da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e0b4      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x186>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003240:	d03e      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003246:	f200 8087 	bhi.w	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	f000 8086 	beq.w	800335e <HAL_TIM_ConfigClockSource+0x172>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	d87f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b70      	cmp	r3, #112	@ 0x70
 800325a:	d01a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xa6>
 800325c:	2b70      	cmp	r3, #112	@ 0x70
 800325e:	d87b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b60      	cmp	r3, #96	@ 0x60
 8003262:	d050      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x11a>
 8003264:	2b60      	cmp	r3, #96	@ 0x60
 8003266:	d877      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b50      	cmp	r3, #80	@ 0x50
 800326a:	d03c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xfa>
 800326c:	2b50      	cmp	r3, #80	@ 0x50
 800326e:	d873      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	d058      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x13a>
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d86f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b30      	cmp	r3, #48	@ 0x30
 800327a:	d064      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b30      	cmp	r3, #48	@ 0x30
 800327e:	d86b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d060      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d867      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d05a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	e062      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a2:	f000 fac5 	bl	8003830 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04f      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	f000 faae 	bl	8003830 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e03c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f972 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	@ 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fa7c 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 8003304:	e02c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f9cc 	bl	80036b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	@ 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa6c 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 8003324:	e01c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f952 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fa5c 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 8003344:	e00c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 fa53 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 8003356:	e003      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d831      	bhi.n	80033f4 <HAL_TIM_ReadCapturedValue+0x78>
 8003390:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033f5 	.word	0x080033f5
 80033a0:	080033f5 	.word	0x080033f5
 80033a4:	080033f5 	.word	0x080033f5
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033f5 	.word	0x080033f5
 80033b0:	080033f5 	.word	0x080033f5
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	080033e1 	.word	0x080033e1
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	080033eb 	.word	0x080033eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	60fb      	str	r3, [r7, #12]

      break;
 80033d4:	e00f      	b.n	80033f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	60fb      	str	r3, [r7, #12]

      break;
 80033de:	e00a      	b.n	80033f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	60fb      	str	r3, [r7, #12]

      break;
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	60fb      	str	r3, [r7, #12]

      break;
 80033f2:	e000      	b.n	80033f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80033f4:	bf00      	nop
  }

  return tmpreg;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2f      	ldr	r2, [pc, #188]	@ (800351c <TIM_Base_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a2c      	ldr	r2, [pc, #176]	@ (8003520 <TIM_Base_SetConfig+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x30>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a2b      	ldr	r2, [pc, #172]	@ (8003524 <TIM_Base_SetConfig+0xd8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a22      	ldr	r2, [pc, #136]	@ (800351c <TIM_Base_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <TIM_Base_SetConfig+0xd4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003524 <TIM_Base_SetConfig+0xd8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0d      	ldr	r2, [pc, #52]	@ (800351c <TIM_Base_SetConfig+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
  }
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800

08003528 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 0201 	bic.w	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a1f      	ldr	r2, [pc, #124]	@ (80035d0 <TIM_TI1_SetConfig+0xa8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_TI1_SetConfig+0x46>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355c:	d007      	beq.n	800356e <TIM_TI1_SetConfig+0x46>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <TIM_TI1_SetConfig+0xac>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_TI1_SetConfig+0x46>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <TIM_TI1_SetConfig+0xb0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <TIM_TI1_SetConfig+0x4a>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <TIM_TI1_SetConfig+0x4c>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e003      	b.n	8003592 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f023 030a 	bic.w	r3, r3, #10
 80035ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 030a 	and.w	r3, r3, #10
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800

080035dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 0210 	bic.w	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	031b      	lsls	r3, r3, #12
 800367c:	b29b      	uxth	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	b2db      	uxtb	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800375e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	031b      	lsls	r3, r3, #12
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	031b      	lsls	r3, r3, #12
 80037dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	f043 0307 	orr.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800384a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	431a      	orrs	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800386e:	b480      	push	{r7}
 8003870:	b087      	sub	sp, #28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2201      	movs	r2, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1a      	ldr	r2, [r3, #32]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e046      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a12      	ldr	r2, [pc, #72]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800

08003974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e033      	b.n	8003a12 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fc9e 	bl	8001300 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f90b 	bl	8003be8 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a00:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08a      	sub	sp, #40	@ 0x28
 8003a1e:	af02      	add	r7, sp, #8
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d17c      	bne.n	8003b30 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_USART_Transmit+0x28>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e075      	b.n	8003b32 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_USART_Transmit+0x3a>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e06e      	b.n	8003b32 <HAL_USART_Transmit+0x118>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2212      	movs	r2, #18
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fd9b 	bl	80015a4 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a84:	d108      	bne.n	8003a98 <HAL_USART_Transmit+0x7e>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e003      	b.n	8003aa0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003aa0:	e02a      	b.n	8003af8 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f844 	bl	8003b3a <USART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03a      	b.n	8003b32 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad0:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e007      	b.n	8003aea <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1cf      	bne.n	8003aa2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2140      	movs	r1, #64	@ 0x40
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f814 	bl	8003b3a <USART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e00a      	b.n	8003b32 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003b4a:	e038      	b.n	8003bbe <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d034      	beq.n	8003bbe <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <USART_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	f7fd fd23 	bl	80015a4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d229      	bcs.n	8003bbe <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0220 	bic.w	r2, r2, #32
 8003b88:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b98:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d0b7      	beq.n	8003b4c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 020c 	bic.w	r2, r2, #12
 8003c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003c1c:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c4a:	f023 030c 	bic.w	r3, r3, #12
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c7c:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a53      	ldr	r2, [pc, #332]	@ (8003dd0 <USART_SetConfig+0x1e8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d14f      	bne.n	8003d28 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c88:	f7fe fe88 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003c8c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	0119      	lsls	r1, r3, #4
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009a      	lsls	r2, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2064      	movs	r0, #100	@ 0x64
 8003cce:	fb00 f303 	mul.w	r3, r0, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	3332      	adds	r3, #50	@ 0x32
 8003cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8003ce6:	4419      	add	r1, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009a      	lsls	r2, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfe:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003d00:	fba3 0302 	umull	r0, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	2064      	movs	r0, #100	@ 0x64
 8003d08:	fb00 f303 	mul.w	r3, r0, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	3332      	adds	r3, #50	@ 0x32
 8003d12:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	440a      	add	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003d26:	e04e      	b.n	8003dc6 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fe24 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009a      	lsls	r2, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	0119      	lsls	r1, r3, #4
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009a      	lsls	r2, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003d66:	fba3 0302 	umull	r0, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	3332      	adds	r3, #50	@ 0x32
 8003d78:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8003d86:	4419      	add	r1, r3
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009a      	lsls	r2, r3, #2
 8003d92:	441a      	add	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003da0:	fba3 0302 	umull	r0, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2064      	movs	r0, #100	@ 0x64
 8003da8:	fb00 f303 	mul.w	r3, r0, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	3332      	adds	r3, #50	@ 0x32
 8003db2:	4a08      	ldr	r2, [pc, #32]	@ (8003dd4 <USART_SetConfig+0x1ec>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <siprintf>:
 8003dd8:	b40e      	push	{r1, r2, r3}
 8003dda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dde:	b500      	push	{lr}
 8003de0:	b09c      	sub	sp, #112	@ 0x70
 8003de2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003de4:	9002      	str	r0, [sp, #8]
 8003de6:	9006      	str	r0, [sp, #24]
 8003de8:	9107      	str	r1, [sp, #28]
 8003dea:	9104      	str	r1, [sp, #16]
 8003dec:	4808      	ldr	r0, [pc, #32]	@ (8003e10 <siprintf+0x38>)
 8003dee:	4909      	ldr	r1, [pc, #36]	@ (8003e14 <siprintf+0x3c>)
 8003df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df4:	9105      	str	r1, [sp, #20]
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	a902      	add	r1, sp, #8
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	f000 f992 	bl	8004124 <_svfiprintf_r>
 8003e00:	2200      	movs	r2, #0
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	b01c      	add	sp, #112	@ 0x70
 8003e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e0c:	b003      	add	sp, #12
 8003e0e:	4770      	bx	lr
 8003e10:	2000000c 	.word	0x2000000c
 8003e14:	ffff0208 	.word	0xffff0208

08003e18 <memset>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4402      	add	r2, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__errno>:
 8003e28:	4b01      	ldr	r3, [pc, #4]	@ (8003e30 <__errno+0x8>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	2600      	movs	r6, #0
 8003e38:	4d0c      	ldr	r5, [pc, #48]	@ (8003e6c <__libc_init_array+0x38>)
 8003e3a:	4c0d      	ldr	r4, [pc, #52]	@ (8003e70 <__libc_init_array+0x3c>)
 8003e3c:	1b64      	subs	r4, r4, r5
 8003e3e:	10a4      	asrs	r4, r4, #2
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	f000 fc78 	bl	8004738 <_init>
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4d0a      	ldr	r5, [pc, #40]	@ (8003e74 <__libc_init_array+0x40>)
 8003e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e78 <__libc_init_array+0x44>)
 8003e4e:	1b64      	subs	r4, r4, r5
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	080047e0 	.word	0x080047e0
 8003e70:	080047e0 	.word	0x080047e0
 8003e74:	080047e0 	.word	0x080047e0
 8003e78:	080047e4 	.word	0x080047e4

08003e7c <__retarget_lock_acquire_recursive>:
 8003e7c:	4770      	bx	lr

08003e7e <__retarget_lock_release_recursive>:
 8003e7e:	4770      	bx	lr

08003e80 <_free_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d040      	beq.n	8003f0a <_free_r+0x8a>
 8003e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8c:	1f0c      	subs	r4, r1, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	18e4      	addlt	r4, r4, r3
 8003e94:	f000 f8de 	bl	8004054 <__malloc_lock>
 8003e98:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <_free_r+0x8c>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	b933      	cbnz	r3, 8003eac <_free_r+0x2c>
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea8:	f000 b8da 	b.w	8004060 <__malloc_unlock>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d908      	bls.n	8003ec2 <_free_r+0x42>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	1821      	adds	r1, r4, r0
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	e7ed      	b.n	8003e9e <_free_r+0x1e>
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b10b      	cbz	r3, 8003ecc <_free_r+0x4c>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d9fa      	bls.n	8003ec2 <_free_r+0x42>
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	1850      	adds	r0, r2, r1
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d10b      	bne.n	8003eec <_free_r+0x6c>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	4401      	add	r1, r0
 8003ed8:	1850      	adds	r0, r2, r1
 8003eda:	4283      	cmp	r3, r0
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	d1e0      	bne.n	8003ea2 <_free_r+0x22>
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4408      	add	r0, r1
 8003ee6:	6010      	str	r0, [r2, #0]
 8003ee8:	6053      	str	r3, [r2, #4]
 8003eea:	e7da      	b.n	8003ea2 <_free_r+0x22>
 8003eec:	d902      	bls.n	8003ef4 <_free_r+0x74>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	e7d6      	b.n	8003ea2 <_free_r+0x22>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf01      	itttt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	1809      	addeq	r1, r1, r0
 8003f02:	6021      	streq	r1, [r4, #0]
 8003f04:	6063      	str	r3, [r4, #4]
 8003f06:	6054      	str	r4, [r2, #4]
 8003f08:	e7cb      	b.n	8003ea2 <_free_r+0x22>
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	200002b8 	.word	0x200002b8

08003f10 <sbrk_aligned>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4e0f      	ldr	r6, [pc, #60]	@ (8003f50 <sbrk_aligned+0x40>)
 8003f14:	460c      	mov	r4, r1
 8003f16:	6831      	ldr	r1, [r6, #0]
 8003f18:	4605      	mov	r5, r0
 8003f1a:	b911      	cbnz	r1, 8003f22 <sbrk_aligned+0x12>
 8003f1c:	f000 fbaa 	bl	8004674 <_sbrk_r>
 8003f20:	6030      	str	r0, [r6, #0]
 8003f22:	4621      	mov	r1, r4
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 fba5 	bl	8004674 <_sbrk_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d103      	bne.n	8003f36 <sbrk_aligned+0x26>
 8003f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003f32:	4620      	mov	r0, r4
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	1cc4      	adds	r4, r0, #3
 8003f38:	f024 0403 	bic.w	r4, r4, #3
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d0f8      	beq.n	8003f32 <sbrk_aligned+0x22>
 8003f40:	1a21      	subs	r1, r4, r0
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 fb96 	bl	8004674 <_sbrk_r>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d1f2      	bne.n	8003f32 <sbrk_aligned+0x22>
 8003f4c:	e7ef      	b.n	8003f2e <sbrk_aligned+0x1e>
 8003f4e:	bf00      	nop
 8003f50:	200002b4 	.word	0x200002b4

08003f54 <_malloc_r>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	1ccd      	adds	r5, r1, #3
 8003f5a:	f025 0503 	bic.w	r5, r5, #3
 8003f5e:	3508      	adds	r5, #8
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	bf38      	it	cc
 8003f64:	250c      	movcc	r5, #12
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	4606      	mov	r6, r0
 8003f6a:	db01      	blt.n	8003f70 <_malloc_r+0x1c>
 8003f6c:	42a9      	cmp	r1, r5
 8003f6e:	d904      	bls.n	8003f7a <_malloc_r+0x26>
 8003f70:	230c      	movs	r3, #12
 8003f72:	6033      	str	r3, [r6, #0]
 8003f74:	2000      	movs	r0, #0
 8003f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004050 <_malloc_r+0xfc>
 8003f7e:	f000 f869 	bl	8004054 <__malloc_lock>
 8003f82:	f8d8 3000 	ldr.w	r3, [r8]
 8003f86:	461c      	mov	r4, r3
 8003f88:	bb44      	cbnz	r4, 8003fdc <_malloc_r+0x88>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ffbf 	bl	8003f10 <sbrk_aligned>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	4604      	mov	r4, r0
 8003f96:	d158      	bne.n	800404a <_malloc_r+0xf6>
 8003f98:	f8d8 4000 	ldr.w	r4, [r8]
 8003f9c:	4627      	mov	r7, r4
 8003f9e:	2f00      	cmp	r7, #0
 8003fa0:	d143      	bne.n	800402a <_malloc_r+0xd6>
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	d04b      	beq.n	800403e <_malloc_r+0xea>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	4639      	mov	r1, r7
 8003faa:	4630      	mov	r0, r6
 8003fac:	eb04 0903 	add.w	r9, r4, r3
 8003fb0:	f000 fb60 	bl	8004674 <_sbrk_r>
 8003fb4:	4581      	cmp	r9, r0
 8003fb6:	d142      	bne.n	800403e <_malloc_r+0xea>
 8003fb8:	6821      	ldr	r1, [r4, #0]
 8003fba:	4630      	mov	r0, r6
 8003fbc:	1a6d      	subs	r5, r5, r1
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7ff ffa6 	bl	8003f10 <sbrk_aligned>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d03a      	beq.n	800403e <_malloc_r+0xea>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	442b      	add	r3, r5
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	bb62      	cbnz	r2, 8004030 <_malloc_r+0xdc>
 8003fd6:	f8c8 7000 	str.w	r7, [r8]
 8003fda:	e00f      	b.n	8003ffc <_malloc_r+0xa8>
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	1b52      	subs	r2, r2, r5
 8003fe0:	d420      	bmi.n	8004024 <_malloc_r+0xd0>
 8003fe2:	2a0b      	cmp	r2, #11
 8003fe4:	d917      	bls.n	8004016 <_malloc_r+0xc2>
 8003fe6:	1961      	adds	r1, r4, r5
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	6025      	str	r5, [r4, #0]
 8003fec:	bf18      	it	ne
 8003fee:	6059      	strne	r1, [r3, #4]
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	bf08      	it	eq
 8003ff4:	f8c8 1000 	streq.w	r1, [r8]
 8003ff8:	5162      	str	r2, [r4, r5]
 8003ffa:	604b      	str	r3, [r1, #4]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f82f 	bl	8004060 <__malloc_unlock>
 8004002:	f104 000b 	add.w	r0, r4, #11
 8004006:	1d23      	adds	r3, r4, #4
 8004008:	f020 0007 	bic.w	r0, r0, #7
 800400c:	1ac2      	subs	r2, r0, r3
 800400e:	bf1c      	itt	ne
 8004010:	1a1b      	subne	r3, r3, r0
 8004012:	50a3      	strne	r3, [r4, r2]
 8004014:	e7af      	b.n	8003f76 <_malloc_r+0x22>
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	42a3      	cmp	r3, r4
 800401a:	bf0c      	ite	eq
 800401c:	f8c8 2000 	streq.w	r2, [r8]
 8004020:	605a      	strne	r2, [r3, #4]
 8004022:	e7eb      	b.n	8003ffc <_malloc_r+0xa8>
 8004024:	4623      	mov	r3, r4
 8004026:	6864      	ldr	r4, [r4, #4]
 8004028:	e7ae      	b.n	8003f88 <_malloc_r+0x34>
 800402a:	463c      	mov	r4, r7
 800402c:	687f      	ldr	r7, [r7, #4]
 800402e:	e7b6      	b.n	8003f9e <_malloc_r+0x4a>
 8004030:	461a      	mov	r2, r3
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	42a3      	cmp	r3, r4
 8004036:	d1fb      	bne.n	8004030 <_malloc_r+0xdc>
 8004038:	2300      	movs	r3, #0
 800403a:	6053      	str	r3, [r2, #4]
 800403c:	e7de      	b.n	8003ffc <_malloc_r+0xa8>
 800403e:	230c      	movs	r3, #12
 8004040:	4630      	mov	r0, r6
 8004042:	6033      	str	r3, [r6, #0]
 8004044:	f000 f80c 	bl	8004060 <__malloc_unlock>
 8004048:	e794      	b.n	8003f74 <_malloc_r+0x20>
 800404a:	6005      	str	r5, [r0, #0]
 800404c:	e7d6      	b.n	8003ffc <_malloc_r+0xa8>
 800404e:	bf00      	nop
 8004050:	200002b8 	.word	0x200002b8

08004054 <__malloc_lock>:
 8004054:	4801      	ldr	r0, [pc, #4]	@ (800405c <__malloc_lock+0x8>)
 8004056:	f7ff bf11 	b.w	8003e7c <__retarget_lock_acquire_recursive>
 800405a:	bf00      	nop
 800405c:	200002b0 	.word	0x200002b0

08004060 <__malloc_unlock>:
 8004060:	4801      	ldr	r0, [pc, #4]	@ (8004068 <__malloc_unlock+0x8>)
 8004062:	f7ff bf0c 	b.w	8003e7e <__retarget_lock_release_recursive>
 8004066:	bf00      	nop
 8004068:	200002b0 	.word	0x200002b0

0800406c <__ssputs_r>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	461f      	mov	r7, r3
 8004072:	688e      	ldr	r6, [r1, #8]
 8004074:	4682      	mov	sl, r0
 8004076:	42be      	cmp	r6, r7
 8004078:	460c      	mov	r4, r1
 800407a:	4690      	mov	r8, r2
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	d82d      	bhi.n	80040dc <__ssputs_r+0x70>
 8004080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004088:	d026      	beq.n	80040d8 <__ssputs_r+0x6c>
 800408a:	6965      	ldr	r5, [r4, #20]
 800408c:	6909      	ldr	r1, [r1, #16]
 800408e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004092:	eba3 0901 	sub.w	r9, r3, r1
 8004096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409a:	1c7b      	adds	r3, r7, #1
 800409c:	444b      	add	r3, r9
 800409e:	106d      	asrs	r5, r5, #1
 80040a0:	429d      	cmp	r5, r3
 80040a2:	bf38      	it	cc
 80040a4:	461d      	movcc	r5, r3
 80040a6:	0553      	lsls	r3, r2, #21
 80040a8:	d527      	bpl.n	80040fa <__ssputs_r+0x8e>
 80040aa:	4629      	mov	r1, r5
 80040ac:	f7ff ff52 	bl	8003f54 <_malloc_r>
 80040b0:	4606      	mov	r6, r0
 80040b2:	b360      	cbz	r0, 800410e <__ssputs_r+0xa2>
 80040b4:	464a      	mov	r2, r9
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	f000 fafa 	bl	80046b0 <memcpy>
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	6126      	str	r6, [r4, #16]
 80040ca:	444e      	add	r6, r9
 80040cc:	6026      	str	r6, [r4, #0]
 80040ce:	463e      	mov	r6, r7
 80040d0:	6165      	str	r5, [r4, #20]
 80040d2:	eba5 0509 	sub.w	r5, r5, r9
 80040d6:	60a5      	str	r5, [r4, #8]
 80040d8:	42be      	cmp	r6, r7
 80040da:	d900      	bls.n	80040de <__ssputs_r+0x72>
 80040dc:	463e      	mov	r6, r7
 80040de:	4632      	mov	r2, r6
 80040e0:	4641      	mov	r1, r8
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	f000 faac 	bl	8004640 <memmove>
 80040e8:	2000      	movs	r0, #0
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	1b9b      	subs	r3, r3, r6
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	4433      	add	r3, r6
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fa:	462a      	mov	r2, r5
 80040fc:	f000 fae6 	bl	80046cc <_realloc_r>
 8004100:	4606      	mov	r6, r0
 8004102:	2800      	cmp	r0, #0
 8004104:	d1e0      	bne.n	80040c8 <__ssputs_r+0x5c>
 8004106:	4650      	mov	r0, sl
 8004108:	6921      	ldr	r1, [r4, #16]
 800410a:	f7ff feb9 	bl	8003e80 <_free_r>
 800410e:	230c      	movs	r3, #12
 8004110:	f8ca 3000 	str.w	r3, [sl]
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	e7e9      	b.n	80040f6 <__ssputs_r+0x8a>
	...

08004124 <_svfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	4698      	mov	r8, r3
 800412a:	898b      	ldrh	r3, [r1, #12]
 800412c:	4607      	mov	r7, r0
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	460d      	mov	r5, r1
 8004132:	4614      	mov	r4, r2
 8004134:	b09d      	sub	sp, #116	@ 0x74
 8004136:	d510      	bpl.n	800415a <_svfiprintf_r+0x36>
 8004138:	690b      	ldr	r3, [r1, #16]
 800413a:	b973      	cbnz	r3, 800415a <_svfiprintf_r+0x36>
 800413c:	2140      	movs	r1, #64	@ 0x40
 800413e:	f7ff ff09 	bl	8003f54 <_malloc_r>
 8004142:	6028      	str	r0, [r5, #0]
 8004144:	6128      	str	r0, [r5, #16]
 8004146:	b930      	cbnz	r0, 8004156 <_svfiprintf_r+0x32>
 8004148:	230c      	movs	r3, #12
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	b01d      	add	sp, #116	@ 0x74
 8004152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004156:	2340      	movs	r3, #64	@ 0x40
 8004158:	616b      	str	r3, [r5, #20]
 800415a:	2300      	movs	r3, #0
 800415c:	9309      	str	r3, [sp, #36]	@ 0x24
 800415e:	2320      	movs	r3, #32
 8004160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004164:	2330      	movs	r3, #48	@ 0x30
 8004166:	f04f 0901 	mov.w	r9, #1
 800416a:	f8cd 800c 	str.w	r8, [sp, #12]
 800416e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004308 <_svfiprintf_r+0x1e4>
 8004172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004176:	4623      	mov	r3, r4
 8004178:	469a      	mov	sl, r3
 800417a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800417e:	b10a      	cbz	r2, 8004184 <_svfiprintf_r+0x60>
 8004180:	2a25      	cmp	r2, #37	@ 0x25
 8004182:	d1f9      	bne.n	8004178 <_svfiprintf_r+0x54>
 8004184:	ebba 0b04 	subs.w	fp, sl, r4
 8004188:	d00b      	beq.n	80041a2 <_svfiprintf_r+0x7e>
 800418a:	465b      	mov	r3, fp
 800418c:	4622      	mov	r2, r4
 800418e:	4629      	mov	r1, r5
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff ff6b 	bl	800406c <__ssputs_r>
 8004196:	3001      	adds	r0, #1
 8004198:	f000 80a7 	beq.w	80042ea <_svfiprintf_r+0x1c6>
 800419c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800419e:	445a      	add	r2, fp
 80041a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a2:	f89a 3000 	ldrb.w	r3, [sl]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 809f 	beq.w	80042ea <_svfiprintf_r+0x1c6>
 80041ac:	2300      	movs	r3, #0
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b6:	f10a 0a01 	add.w	sl, sl, #1
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	9307      	str	r3, [sp, #28]
 80041be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80041c4:	4654      	mov	r4, sl
 80041c6:	2205      	movs	r2, #5
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	484e      	ldr	r0, [pc, #312]	@ (8004308 <_svfiprintf_r+0x1e4>)
 80041ce:	f000 fa61 	bl	8004694 <memchr>
 80041d2:	9a04      	ldr	r2, [sp, #16]
 80041d4:	b9d8      	cbnz	r0, 800420e <_svfiprintf_r+0xea>
 80041d6:	06d0      	lsls	r0, r2, #27
 80041d8:	bf44      	itt	mi
 80041da:	2320      	movmi	r3, #32
 80041dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e0:	0711      	lsls	r1, r2, #28
 80041e2:	bf44      	itt	mi
 80041e4:	232b      	movmi	r3, #43	@ 0x2b
 80041e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ea:	f89a 3000 	ldrb.w	r3, [sl]
 80041ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f0:	d015      	beq.n	800421e <_svfiprintf_r+0xfa>
 80041f2:	4654      	mov	r4, sl
 80041f4:	2000      	movs	r0, #0
 80041f6:	f04f 0c0a 	mov.w	ip, #10
 80041fa:	9a07      	ldr	r2, [sp, #28]
 80041fc:	4621      	mov	r1, r4
 80041fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004202:	3b30      	subs	r3, #48	@ 0x30
 8004204:	2b09      	cmp	r3, #9
 8004206:	d94b      	bls.n	80042a0 <_svfiprintf_r+0x17c>
 8004208:	b1b0      	cbz	r0, 8004238 <_svfiprintf_r+0x114>
 800420a:	9207      	str	r2, [sp, #28]
 800420c:	e014      	b.n	8004238 <_svfiprintf_r+0x114>
 800420e:	eba0 0308 	sub.w	r3, r0, r8
 8004212:	fa09 f303 	lsl.w	r3, r9, r3
 8004216:	4313      	orrs	r3, r2
 8004218:	46a2      	mov	sl, r4
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	e7d2      	b.n	80041c4 <_svfiprintf_r+0xa0>
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	9103      	str	r1, [sp, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfbb      	ittet	lt
 800422a:	425b      	neglt	r3, r3
 800422c:	f042 0202 	orrlt.w	r2, r2, #2
 8004230:	9307      	strge	r3, [sp, #28]
 8004232:	9307      	strlt	r3, [sp, #28]
 8004234:	bfb8      	it	lt
 8004236:	9204      	strlt	r2, [sp, #16]
 8004238:	7823      	ldrb	r3, [r4, #0]
 800423a:	2b2e      	cmp	r3, #46	@ 0x2e
 800423c:	d10a      	bne.n	8004254 <_svfiprintf_r+0x130>
 800423e:	7863      	ldrb	r3, [r4, #1]
 8004240:	2b2a      	cmp	r3, #42	@ 0x2a
 8004242:	d132      	bne.n	80042aa <_svfiprintf_r+0x186>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	3402      	adds	r4, #2
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	9203      	str	r2, [sp, #12]
 800424e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800430c <_svfiprintf_r+0x1e8>
 8004258:	2203      	movs	r2, #3
 800425a:	4650      	mov	r0, sl
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	f000 fa19 	bl	8004694 <memchr>
 8004262:	b138      	cbz	r0, 8004274 <_svfiprintf_r+0x150>
 8004264:	2240      	movs	r2, #64	@ 0x40
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	eba0 000a 	sub.w	r0, r0, sl
 800426c:	4082      	lsls	r2, r0
 800426e:	4313      	orrs	r3, r2
 8004270:	3401      	adds	r4, #1
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004278:	2206      	movs	r2, #6
 800427a:	4825      	ldr	r0, [pc, #148]	@ (8004310 <_svfiprintf_r+0x1ec>)
 800427c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004280:	f000 fa08 	bl	8004694 <memchr>
 8004284:	2800      	cmp	r0, #0
 8004286:	d036      	beq.n	80042f6 <_svfiprintf_r+0x1d2>
 8004288:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <_svfiprintf_r+0x1f0>)
 800428a:	bb1b      	cbnz	r3, 80042d4 <_svfiprintf_r+0x1b0>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	3307      	adds	r3, #7
 8004290:	f023 0307 	bic.w	r3, r3, #7
 8004294:	3308      	adds	r3, #8
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429a:	4433      	add	r3, r6
 800429c:	9309      	str	r3, [sp, #36]	@ 0x24
 800429e:	e76a      	b.n	8004176 <_svfiprintf_r+0x52>
 80042a0:	460c      	mov	r4, r1
 80042a2:	2001      	movs	r0, #1
 80042a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a8:	e7a8      	b.n	80041fc <_svfiprintf_r+0xd8>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4619      	mov	r1, r3
 80042b2:	3401      	adds	r4, #1
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	4620      	mov	r0, r4
 80042b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042bc:	3a30      	subs	r2, #48	@ 0x30
 80042be:	2a09      	cmp	r2, #9
 80042c0:	d903      	bls.n	80042ca <_svfiprintf_r+0x1a6>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0c6      	beq.n	8004254 <_svfiprintf_r+0x130>
 80042c6:	9105      	str	r1, [sp, #20]
 80042c8:	e7c4      	b.n	8004254 <_svfiprintf_r+0x130>
 80042ca:	4604      	mov	r4, r0
 80042cc:	2301      	movs	r3, #1
 80042ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d2:	e7f0      	b.n	80042b6 <_svfiprintf_r+0x192>
 80042d4:	ab03      	add	r3, sp, #12
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	462a      	mov	r2, r5
 80042da:	4638      	mov	r0, r7
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <_svfiprintf_r+0x1f4>)
 80042de:	a904      	add	r1, sp, #16
 80042e0:	f3af 8000 	nop.w
 80042e4:	1c42      	adds	r2, r0, #1
 80042e6:	4606      	mov	r6, r0
 80042e8:	d1d6      	bne.n	8004298 <_svfiprintf_r+0x174>
 80042ea:	89ab      	ldrh	r3, [r5, #12]
 80042ec:	065b      	lsls	r3, r3, #25
 80042ee:	f53f af2d 	bmi.w	800414c <_svfiprintf_r+0x28>
 80042f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042f4:	e72c      	b.n	8004150 <_svfiprintf_r+0x2c>
 80042f6:	ab03      	add	r3, sp, #12
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	462a      	mov	r2, r5
 80042fc:	4638      	mov	r0, r7
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <_svfiprintf_r+0x1f4>)
 8004300:	a904      	add	r1, sp, #16
 8004302:	f000 f87d 	bl	8004400 <_printf_i>
 8004306:	e7ed      	b.n	80042e4 <_svfiprintf_r+0x1c0>
 8004308:	080047a2 	.word	0x080047a2
 800430c:	080047a8 	.word	0x080047a8
 8004310:	080047ac 	.word	0x080047ac
 8004314:	00000000 	.word	0x00000000
 8004318:	0800406d 	.word	0x0800406d

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4616      	mov	r6, r2
 8004322:	4698      	mov	r8, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	4607      	mov	r7, r0
 800432a:	4293      	cmp	r3, r2
 800432c:	bfb8      	it	lt
 800432e:	4613      	movlt	r3, r2
 8004330:	6033      	str	r3, [r6, #0]
 8004332:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004336:	460c      	mov	r4, r1
 8004338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800433c:	b10a      	cbz	r2, 8004342 <_printf_common+0x26>
 800433e:	3301      	adds	r3, #1
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	0699      	lsls	r1, r3, #26
 8004346:	bf42      	ittt	mi
 8004348:	6833      	ldrmi	r3, [r6, #0]
 800434a:	3302      	addmi	r3, #2
 800434c:	6033      	strmi	r3, [r6, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	f015 0506 	ands.w	r5, r5, #6
 8004354:	d106      	bne.n	8004364 <_printf_common+0x48>
 8004356:	f104 0a19 	add.w	sl, r4, #25
 800435a:	68e3      	ldr	r3, [r4, #12]
 800435c:	6832      	ldr	r2, [r6, #0]
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	42ab      	cmp	r3, r5
 8004362:	dc2b      	bgt.n	80043bc <_printf_common+0xa0>
 8004364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	3b00      	subs	r3, #0
 800436c:	bf18      	it	ne
 800436e:	2301      	movne	r3, #1
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d430      	bmi.n	80043d6 <_printf_common+0xba>
 8004374:	4641      	mov	r1, r8
 8004376:	4638      	mov	r0, r7
 8004378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800437c:	47c8      	blx	r9
 800437e:	3001      	adds	r0, #1
 8004380:	d023      	beq.n	80043ca <_printf_common+0xae>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf14      	ite	ne
 800438e:	2500      	movne	r5, #0
 8004390:	6833      	ldreq	r3, [r6, #0]
 8004392:	f04f 0600 	mov.w	r6, #0
 8004396:	bf08      	it	eq
 8004398:	68e5      	ldreq	r5, [r4, #12]
 800439a:	f104 041a 	add.w	r4, r4, #26
 800439e:	bf08      	it	eq
 80043a0:	1aed      	subeq	r5, r5, r3
 80043a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043a6:	bf08      	it	eq
 80043a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bfc4      	itt	gt
 80043b0:	1a9b      	subgt	r3, r3, r2
 80043b2:	18ed      	addgt	r5, r5, r3
 80043b4:	42b5      	cmp	r5, r6
 80043b6:	d11a      	bne.n	80043ee <_printf_common+0xd2>
 80043b8:	2000      	movs	r0, #0
 80043ba:	e008      	b.n	80043ce <_printf_common+0xb2>
 80043bc:	2301      	movs	r3, #1
 80043be:	4652      	mov	r2, sl
 80043c0:	4641      	mov	r1, r8
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c8      	blx	r9
 80043c6:	3001      	adds	r0, #1
 80043c8:	d103      	bne.n	80043d2 <_printf_common+0xb6>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	3501      	adds	r5, #1
 80043d4:	e7c1      	b.n	800435a <_printf_common+0x3e>
 80043d6:	2030      	movs	r0, #48	@ 0x30
 80043d8:	18e1      	adds	r1, r4, r3
 80043da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e4:	4422      	add	r2, r4
 80043e6:	3302      	adds	r3, #2
 80043e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043ec:	e7c2      	b.n	8004374 <_printf_common+0x58>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4622      	mov	r2, r4
 80043f2:	4641      	mov	r1, r8
 80043f4:	4638      	mov	r0, r7
 80043f6:	47c8      	blx	r9
 80043f8:	3001      	adds	r0, #1
 80043fa:	d0e6      	beq.n	80043ca <_printf_common+0xae>
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7d9      	b.n	80043b4 <_printf_common+0x98>

08004400 <_printf_i>:
 8004400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	7e0f      	ldrb	r7, [r1, #24]
 8004406:	4691      	mov	r9, r2
 8004408:	2f78      	cmp	r7, #120	@ 0x78
 800440a:	4680      	mov	r8, r0
 800440c:	460c      	mov	r4, r1
 800440e:	469a      	mov	sl, r3
 8004410:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004416:	d807      	bhi.n	8004428 <_printf_i+0x28>
 8004418:	2f62      	cmp	r7, #98	@ 0x62
 800441a:	d80a      	bhi.n	8004432 <_printf_i+0x32>
 800441c:	2f00      	cmp	r7, #0
 800441e:	f000 80d3 	beq.w	80045c8 <_printf_i+0x1c8>
 8004422:	2f58      	cmp	r7, #88	@ 0x58
 8004424:	f000 80ba 	beq.w	800459c <_printf_i+0x19c>
 8004428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800442c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004430:	e03a      	b.n	80044a8 <_printf_i+0xa8>
 8004432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004436:	2b15      	cmp	r3, #21
 8004438:	d8f6      	bhi.n	8004428 <_printf_i+0x28>
 800443a:	a101      	add	r1, pc, #4	@ (adr r1, 8004440 <_printf_i+0x40>)
 800443c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004440:	08004499 	.word	0x08004499
 8004444:	080044ad 	.word	0x080044ad
 8004448:	08004429 	.word	0x08004429
 800444c:	08004429 	.word	0x08004429
 8004450:	08004429 	.word	0x08004429
 8004454:	08004429 	.word	0x08004429
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004429 	.word	0x08004429
 8004460:	08004429 	.word	0x08004429
 8004464:	08004429 	.word	0x08004429
 8004468:	08004429 	.word	0x08004429
 800446c:	080045af 	.word	0x080045af
 8004470:	080044d7 	.word	0x080044d7
 8004474:	08004569 	.word	0x08004569
 8004478:	08004429 	.word	0x08004429
 800447c:	08004429 	.word	0x08004429
 8004480:	080045d1 	.word	0x080045d1
 8004484:	08004429 	.word	0x08004429
 8004488:	080044d7 	.word	0x080044d7
 800448c:	08004429 	.word	0x08004429
 8004490:	08004429 	.word	0x08004429
 8004494:	08004571 	.word	0x08004571
 8004498:	6833      	ldr	r3, [r6, #0]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6032      	str	r2, [r6, #0]
 80044a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e09e      	b.n	80045ea <_printf_i+0x1ea>
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	1d19      	adds	r1, r3, #4
 80044b2:	6031      	str	r1, [r6, #0]
 80044b4:	0606      	lsls	r6, r0, #24
 80044b6:	d501      	bpl.n	80044bc <_printf_i+0xbc>
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	e003      	b.n	80044c4 <_printf_i+0xc4>
 80044bc:	0645      	lsls	r5, r0, #25
 80044be:	d5fb      	bpl.n	80044b8 <_printf_i+0xb8>
 80044c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	da03      	bge.n	80044d0 <_printf_i+0xd0>
 80044c8:	232d      	movs	r3, #45	@ 0x2d
 80044ca:	426d      	negs	r5, r5
 80044cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d0:	230a      	movs	r3, #10
 80044d2:	4859      	ldr	r0, [pc, #356]	@ (8004638 <_printf_i+0x238>)
 80044d4:	e011      	b.n	80044fa <_printf_i+0xfa>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	0608      	lsls	r0, r1, #24
 80044dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e0:	d402      	bmi.n	80044e8 <_printf_i+0xe8>
 80044e2:	0649      	lsls	r1, r1, #25
 80044e4:	bf48      	it	mi
 80044e6:	b2ad      	uxthmi	r5, r5
 80044e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	bf14      	ite	ne
 80044ee:	230a      	movne	r3, #10
 80044f0:	2308      	moveq	r3, #8
 80044f2:	4851      	ldr	r0, [pc, #324]	@ (8004638 <_printf_i+0x238>)
 80044f4:	2100      	movs	r1, #0
 80044f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fa:	6866      	ldr	r6, [r4, #4]
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	bfa8      	it	ge
 8004500:	6821      	ldrge	r1, [r4, #0]
 8004502:	60a6      	str	r6, [r4, #8]
 8004504:	bfa4      	itt	ge
 8004506:	f021 0104 	bicge.w	r1, r1, #4
 800450a:	6021      	strge	r1, [r4, #0]
 800450c:	b90d      	cbnz	r5, 8004512 <_printf_i+0x112>
 800450e:	2e00      	cmp	r6, #0
 8004510:	d04b      	beq.n	80045aa <_printf_i+0x1aa>
 8004512:	4616      	mov	r6, r2
 8004514:	fbb5 f1f3 	udiv	r1, r5, r3
 8004518:	fb03 5711 	mls	r7, r3, r1, r5
 800451c:	5dc7      	ldrb	r7, [r0, r7]
 800451e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004522:	462f      	mov	r7, r5
 8004524:	42bb      	cmp	r3, r7
 8004526:	460d      	mov	r5, r1
 8004528:	d9f4      	bls.n	8004514 <_printf_i+0x114>
 800452a:	2b08      	cmp	r3, #8
 800452c:	d10b      	bne.n	8004546 <_printf_i+0x146>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	07df      	lsls	r7, r3, #31
 8004532:	d508      	bpl.n	8004546 <_printf_i+0x146>
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	6861      	ldr	r1, [r4, #4]
 8004538:	4299      	cmp	r1, r3
 800453a:	bfde      	ittt	le
 800453c:	2330      	movle	r3, #48	@ 0x30
 800453e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004542:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004546:	1b92      	subs	r2, r2, r6
 8004548:	6122      	str	r2, [r4, #16]
 800454a:	464b      	mov	r3, r9
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f8cd a000 	str.w	sl, [sp]
 8004554:	aa03      	add	r2, sp, #12
 8004556:	f7ff fee1 	bl	800431c <_printf_common>
 800455a:	3001      	adds	r0, #1
 800455c:	d14a      	bne.n	80045f4 <_printf_i+0x1f4>
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	b004      	add	sp, #16
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	f043 0320 	orr.w	r3, r3, #32
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	2778      	movs	r7, #120	@ 0x78
 8004572:	4832      	ldr	r0, [pc, #200]	@ (800463c <_printf_i+0x23c>)
 8004574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	6831      	ldr	r1, [r6, #0]
 800457c:	061f      	lsls	r7, r3, #24
 800457e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004582:	d402      	bmi.n	800458a <_printf_i+0x18a>
 8004584:	065f      	lsls	r7, r3, #25
 8004586:	bf48      	it	mi
 8004588:	b2ad      	uxthmi	r5, r5
 800458a:	6031      	str	r1, [r6, #0]
 800458c:	07d9      	lsls	r1, r3, #31
 800458e:	bf44      	itt	mi
 8004590:	f043 0320 	orrmi.w	r3, r3, #32
 8004594:	6023      	strmi	r3, [r4, #0]
 8004596:	b11d      	cbz	r5, 80045a0 <_printf_i+0x1a0>
 8004598:	2310      	movs	r3, #16
 800459a:	e7ab      	b.n	80044f4 <_printf_i+0xf4>
 800459c:	4826      	ldr	r0, [pc, #152]	@ (8004638 <_printf_i+0x238>)
 800459e:	e7e9      	b.n	8004574 <_printf_i+0x174>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	e7f6      	b.n	8004598 <_printf_i+0x198>
 80045aa:	4616      	mov	r6, r2
 80045ac:	e7bd      	b.n	800452a <_printf_i+0x12a>
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	1d18      	adds	r0, r3, #4
 80045b4:	6961      	ldr	r1, [r4, #20]
 80045b6:	6030      	str	r0, [r6, #0]
 80045b8:	062e      	lsls	r6, r5, #24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0x1c2>
 80045be:	6019      	str	r1, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <_printf_i+0x1c8>
 80045c2:	0668      	lsls	r0, r5, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0x1be>
 80045c6:	8019      	strh	r1, [r3, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	4616      	mov	r6, r2
 80045cc:	6123      	str	r3, [r4, #16]
 80045ce:	e7bc      	b.n	800454a <_printf_i+0x14a>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	2100      	movs	r1, #0
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	6032      	str	r2, [r6, #0]
 80045d8:	681e      	ldr	r6, [r3, #0]
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f859 	bl	8004694 <memchr>
 80045e2:	b108      	cbz	r0, 80045e8 <_printf_i+0x1e8>
 80045e4:	1b80      	subs	r0, r0, r6
 80045e6:	6060      	str	r0, [r4, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2300      	movs	r3, #0
 80045ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f2:	e7aa      	b.n	800454a <_printf_i+0x14a>
 80045f4:	4632      	mov	r2, r6
 80045f6:	4649      	mov	r1, r9
 80045f8:	4640      	mov	r0, r8
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	47d0      	blx	sl
 80045fe:	3001      	adds	r0, #1
 8004600:	d0ad      	beq.n	800455e <_printf_i+0x15e>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	079b      	lsls	r3, r3, #30
 8004606:	d413      	bmi.n	8004630 <_printf_i+0x230>
 8004608:	68e0      	ldr	r0, [r4, #12]
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	4298      	cmp	r0, r3
 800460e:	bfb8      	it	lt
 8004610:	4618      	movlt	r0, r3
 8004612:	e7a6      	b.n	8004562 <_printf_i+0x162>
 8004614:	2301      	movs	r3, #1
 8004616:	4632      	mov	r2, r6
 8004618:	4649      	mov	r1, r9
 800461a:	4640      	mov	r0, r8
 800461c:	47d0      	blx	sl
 800461e:	3001      	adds	r0, #1
 8004620:	d09d      	beq.n	800455e <_printf_i+0x15e>
 8004622:	3501      	adds	r5, #1
 8004624:	68e3      	ldr	r3, [r4, #12]
 8004626:	9903      	ldr	r1, [sp, #12]
 8004628:	1a5b      	subs	r3, r3, r1
 800462a:	42ab      	cmp	r3, r5
 800462c:	dcf2      	bgt.n	8004614 <_printf_i+0x214>
 800462e:	e7eb      	b.n	8004608 <_printf_i+0x208>
 8004630:	2500      	movs	r5, #0
 8004632:	f104 0619 	add.w	r6, r4, #25
 8004636:	e7f5      	b.n	8004624 <_printf_i+0x224>
 8004638:	080047b3 	.word	0x080047b3
 800463c:	080047c4 	.word	0x080047c4

08004640 <memmove>:
 8004640:	4288      	cmp	r0, r1
 8004642:	b510      	push	{r4, lr}
 8004644:	eb01 0402 	add.w	r4, r1, r2
 8004648:	d902      	bls.n	8004650 <memmove+0x10>
 800464a:	4284      	cmp	r4, r0
 800464c:	4623      	mov	r3, r4
 800464e:	d807      	bhi.n	8004660 <memmove+0x20>
 8004650:	1e43      	subs	r3, r0, #1
 8004652:	42a1      	cmp	r1, r4
 8004654:	d008      	beq.n	8004668 <memmove+0x28>
 8004656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800465e:	e7f8      	b.n	8004652 <memmove+0x12>
 8004660:	4601      	mov	r1, r0
 8004662:	4402      	add	r2, r0
 8004664:	428a      	cmp	r2, r1
 8004666:	d100      	bne.n	800466a <memmove+0x2a>
 8004668:	bd10      	pop	{r4, pc}
 800466a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800466e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004672:	e7f7      	b.n	8004664 <memmove+0x24>

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	2300      	movs	r3, #0
 8004678:	4d05      	ldr	r5, [pc, #20]	@ (8004690 <_sbrk_r+0x1c>)
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	f7fc fd0c 	bl	800109c <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	200002ac 	.word	0x200002ac

08004694 <memchr>:
 8004694:	4603      	mov	r3, r0
 8004696:	b510      	push	{r4, lr}
 8004698:	b2c9      	uxtb	r1, r1
 800469a:	4402      	add	r2, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	d101      	bne.n	80046a6 <memchr+0x12>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e003      	b.n	80046ae <memchr+0x1a>
 80046a6:	7804      	ldrb	r4, [r0, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	428c      	cmp	r4, r1
 80046ac:	d1f6      	bne.n	800469c <memchr+0x8>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <memcpy>:
 80046b0:	440a      	add	r2, r1
 80046b2:	4291      	cmp	r1, r2
 80046b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b8:	d100      	bne.n	80046bc <memcpy+0xc>
 80046ba:	4770      	bx	lr
 80046bc:	b510      	push	{r4, lr}
 80046be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c2:	4291      	cmp	r1, r2
 80046c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c8:	d1f9      	bne.n	80046be <memcpy+0xe>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <_realloc_r>:
 80046cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d0:	4680      	mov	r8, r0
 80046d2:	4615      	mov	r5, r2
 80046d4:	460c      	mov	r4, r1
 80046d6:	b921      	cbnz	r1, 80046e2 <_realloc_r+0x16>
 80046d8:	4611      	mov	r1, r2
 80046da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	f7ff bc39 	b.w	8003f54 <_malloc_r>
 80046e2:	b92a      	cbnz	r2, 80046f0 <_realloc_r+0x24>
 80046e4:	f7ff fbcc 	bl	8003e80 <_free_r>
 80046e8:	2400      	movs	r4, #0
 80046ea:	4620      	mov	r0, r4
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	f000 f81a 	bl	8004728 <_malloc_usable_size_r>
 80046f4:	4285      	cmp	r5, r0
 80046f6:	4606      	mov	r6, r0
 80046f8:	d802      	bhi.n	8004700 <_realloc_r+0x34>
 80046fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046fe:	d8f4      	bhi.n	80046ea <_realloc_r+0x1e>
 8004700:	4629      	mov	r1, r5
 8004702:	4640      	mov	r0, r8
 8004704:	f7ff fc26 	bl	8003f54 <_malloc_r>
 8004708:	4607      	mov	r7, r0
 800470a:	2800      	cmp	r0, #0
 800470c:	d0ec      	beq.n	80046e8 <_realloc_r+0x1c>
 800470e:	42b5      	cmp	r5, r6
 8004710:	462a      	mov	r2, r5
 8004712:	4621      	mov	r1, r4
 8004714:	bf28      	it	cs
 8004716:	4632      	movcs	r2, r6
 8004718:	f7ff ffca 	bl	80046b0 <memcpy>
 800471c:	4621      	mov	r1, r4
 800471e:	4640      	mov	r0, r8
 8004720:	f7ff fbae 	bl	8003e80 <_free_r>
 8004724:	463c      	mov	r4, r7
 8004726:	e7e0      	b.n	80046ea <_realloc_r+0x1e>

08004728 <_malloc_usable_size_r>:
 8004728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472c:	1f18      	subs	r0, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfbc      	itt	lt
 8004732:	580b      	ldrlt	r3, [r1, r0]
 8004734:	18c0      	addlt	r0, r0, r3
 8004736:	4770      	bx	lr

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
