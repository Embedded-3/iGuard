
SensorSetting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004160  08004160  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004164  08004164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004168  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  080041c4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080041c4  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b577  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d2  00000000  00000000  000115fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000137d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c3  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a4  00000000  00000000  00014e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecb4  00000000  00000000  0002d4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c62a  00000000  00000000  0003c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c87d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000c8818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cc29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080040c0 	.word	0x080040c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080040c0 	.word	0x080040c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_CAN_Init+0x60>)
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_CAN_Init+0x64>)
 8000944:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_CAN_Init+0x60>)
 8000948:	2210      	movs	r2, #16
 800094a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_CAN_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_CAN_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_CAN_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_CAN_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_CAN_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_CAN_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <MX_CAN_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_CAN_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <MX_CAN_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_CAN_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_CAN_Init+0x60>)
 800098a:	f000 fd79 	bl	8001480 <HAL_CAN_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fa86 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000078 	.word	0x20000078
 80009a0:	40006400 	.word	0x40006400

080009a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <HAL_CAN_MspInit+0x8c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d131      	bne.n	8000a28 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	61d3      	str	r3, [r2, #28]
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_CAN_MspInit+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <HAL_CAN_MspInit+0x94>)
 8000a0a:	f000 ff43 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <HAL_CAN_MspInit+0x94>)
 8000a24:	f000 ff36 	bl	8001894 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40006400 	.word	0x40006400
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800

08000a3c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC1   ------> ADCx_IN11
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a41      	ldr	r2, [pc, #260]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a68:	4b3c      	ldr	r3, [pc, #240]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a6e:	f043 0320 	orr.w	r3, r3, #32
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b39      	ldr	r3, [pc, #228]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a35      	ldr	r2, [pc, #212]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	482a      	ldr	r0, [pc, #168]	@ (8000b60 <MX_GPIO_Init+0x124>)
 8000ab6:	f001 f888 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4829      	ldr	r0, [pc, #164]	@ (8000b64 <MX_GPIO_Init+0x128>)
 8000ac0:	f001 f883 	bl	8001bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <MX_GPIO_Init+0x12c>)
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	@ (8000b6c <MX_GPIO_Init+0x130>)
 8000ada:	f000 fedb 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <MX_GPIO_Init+0x130>)
 8000aee:	f000 fed1 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af2:	2320      	movs	r3, #32
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	4815      	ldr	r0, [pc, #84]	@ (8000b60 <MX_GPIO_Init+0x124>)
 8000b0a:	f000 fec3 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b0e:	2320      	movs	r3, #32
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4810      	ldr	r0, [pc, #64]	@ (8000b64 <MX_GPIO_Init+0x128>)
 8000b22:	f000 feb7 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <MX_GPIO_Init+0x128>)
 8000b3e:	f000 fea9 	bl	8001894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2028      	movs	r0, #40	@ 0x28
 8000b48:	f000 fe6d 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4c:	2028      	movs	r0, #40	@ 0x28
 8000b4e:	f000 fe86 	bl	800185e <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	10110000 	.word	0x10110000
 8000b6c:	40011000 	.word	0x40011000

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fc22 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f818 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f7ff ff5e 	bl	8000a3c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b80:	f000 fa4c 	bl	800101c <MX_TIM2_Init>
  MX_USART2_Init();
 8000b84:	f000 fb7e 	bl	8001284 <MX_USART2_Init>
  MX_CAN_Init();
 8000b88:	f7ff fed8 	bl	800093c <MX_CAN_Init>
  MX_TIM3_Init();
 8000b8c:	f000 fab6 	bl	80010fc <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000b90:	2108      	movs	r1, #8
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <main+0x34>)
 8000b94:	f001 fd5e 	bl	8002654 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <main+0x38>)
 8000b9a:	f001 fcb1 	bl	8002500 <HAL_TIM_Base_Start_IT>
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <main+0x2e>
 8000ba2:	bf00      	nop
 8000ba4:	200000b4 	.word	0x200000b4
 8000ba8:	200000fc 	.word	0x200000fc

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	@ 0x40
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2228      	movs	r2, #40	@ 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fdf0 	bl	80037a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f828 	bl	8001c40 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bf6:	f000 f955 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fa95 	bl	8002144 <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c20:	f000 f940 	bl	8000ea4 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3740      	adds	r7, #64	@ 0x40
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <delay>:

/* USER CODE BEGIN 4 */
void delay (uint16_t time)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <delay+0x2c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER (&htim2) < time);
 8000c3e:	bf00      	nop
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <delay+0x2c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f9      	bcc.n	8000c40 <delay+0x14>
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	00000000 	.word	0x00000000

08000c60 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7f1b      	ldrb	r3, [r3, #28]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	f040 8083 	bne.w	8000d78 <HAL_TIM_IC_CaptureCallback+0x118>
    {
        if (Is_First_Captured==0) // if the first value is not captured
 8000c72:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d11a      	bne.n	8000cb0 <HAL_TIM_IC_CaptureCallback+0x50>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f002 f849 	bl	8002d14 <HAL_TIM_ReadCapturedValue>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a41      	ldr	r2, [pc, #260]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c86:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8000c88:	4b3f      	ldr	r3, [pc, #252]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a1a      	ldr	r2, [r3, #32]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c9c:	621a      	str	r2, [r3, #32]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6a1a      	ldr	r2, [r3, #32]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000cac:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
        }
    }
}
 8000cae:	e063      	b.n	8000d78 <HAL_TIM_IC_CaptureCallback+0x118>
        else if (Is_First_Captured==1)   // if the first is already captured
 8000cb0:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d15f      	bne.n	8000d78 <HAL_TIM_IC_CaptureCallback+0x118>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000cb8:	2108      	movs	r1, #8
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f002 f82a 	bl	8002d14 <HAL_TIM_ReadCapturedValue>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a33      	ldr	r2, [pc, #204]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cc4:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2 > IC_Val1)
 8000cce:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d907      	bls.n	8000cea <HAL_TIM_IC_CaptureCallback+0x8a>
                Difference = IC_Val2-IC_Val1;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e00f      	b.n	8000d0a <HAL_TIM_IC_CaptureCallback+0xaa>
            else if (IC_Val1 > IC_Val2)
 8000cea:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <HAL_TIM_IC_CaptureCallback+0xaa>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d04:	33ff      	adds	r3, #255	@ 0xff
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d08:	6013      	str	r3, [r2, #0]
            Distance = Difference * .034/2;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb68 	bl	80003e4 <__aeabi_ui2d>
 8000d14:	a31a      	add	r3, pc, #104	@ (adr r3, 8000d80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f7ff fbdd 	bl	80004d8 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d2e:	f7ff fcfd 	bl	800072c <__aeabi_ddiv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fddf 	bl	80008fc <__aeabi_d2uiz>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000d44:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // set it back to false
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6a1a      	ldr	r2, [r3, #32]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000d5a:	621a      	str	r2, [r3, #32]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a12      	ldr	r2, [r2, #32]
 8000d66:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0208 	bic.w	r2, r2, #8
 8000d76:	60da      	str	r2, [r3, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	b020c49c 	.word	0xb020c49c
 8000d84:	3fa16872 	.word	0x3fa16872
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	200000a0 	.word	0x200000a0
 8000d90:	200000a4 	.word	0x200000a4
 8000d94:	200000a8 	.word	0x200000a8
 8000d98:	200000ad 	.word	0x200000ad
 8000d9c:	200000b4 	.word	0x200000b4

08000da0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <HCSR04_Read+0x34>)
 8000daa:	f000 ff0e 	bl	8001bca <HAL_GPIO_WritePin>
	delay(10);
 8000dae:	200a      	movs	r0, #10
 8000db0:	f7ff ff3c 	bl	8000c2c <delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2140      	movs	r1, #64	@ 0x40
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <HCSR04_Read+0x34>)
 8000dba:	f000 ff06 	bl	8001bca <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HCSR04_Read+0x38>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HCSR04_Read+0x38>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0208 	orr.w	r2, r2, #8
 8000dcc:	60da      	str	r2, [r3, #12]
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	200000b4 	.word	0x200000b4

08000ddc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	volatile static GPIO_PinState bReadHCSR501 = 0;
	if(htim->Instance == htim3.Instance){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d144      	bne.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x9e>
	  char buffer[30];
	  bReadHCSR501 = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8000df0:	2110      	movs	r1, #16
 8000df2:	4825      	ldr	r0, [pc, #148]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000df4:	f000 fed2 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	  HCSR04_Read();
 8000e00:	f7ff ffce 	bl	8000da0 <HCSR04_Read>


	  switch(bReadHCSR501){
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d007      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x46>
			break;
		case(GPIO_PIN_SET):
			sprintf(buffer, "Detective\n");
			break;
		default:
			break;
 8000e12:	e00d      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x54>
			sprintf(buffer, "Not Detective\n");
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	491d      	ldr	r1, [pc, #116]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fca0 	bl	8003760 <siprintf>
			break;
 8000e20:	e006      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x54>
			sprintf(buffer, "Detective\n");
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	491b      	ldr	r1, [pc, #108]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fc99 	bl	8003760 <siprintf>
			break;
 8000e2e:	bf00      	nop
	  }
	  HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f98b 	bl	8000150 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f107 0108 	add.w	r1, r7, #8
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e48:	f002 faab 	bl	80033a2 <HAL_USART_Transmit>

	  sprintf(buffer, "%d\n", Distance);
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4912      	ldr	r1, [pc, #72]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fc81 	bl	8003760 <siprintf>
	  HAL_USART_Transmit(&husart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff f974 	bl	8000150 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f107 0108 	add.w	r1, r7, #8
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e76:	f002 fa94 	bl	80033a2 <HAL_USART_Transmit>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000fc 	.word	0x200000fc
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	200000ae 	.word	0x200000ae
 8000e90:	080040d8 	.word	0x080040d8
 8000e94:	080040e8 	.word	0x080040e8
 8000e98:	20000144 	.word	0x20000144
 8000e9c:	200000ad 	.word	0x200000ad
 8000ea0:	080040f4 	.word	0x080040f4

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 fa70 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <TIM2_IRQHandler+0x10>)
 8000f72:	f001 fc7b 	bl	800286c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000b4 	.word	0x200000b4

08000f80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM3_IRQHandler+0x10>)
 8000f86:	f001 fc71 	bl	800286c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000fc 	.word	0x200000fc

08000f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f9c:	f000 fe2e 	bl	8001bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f002 fbec 	bl	80037b0 <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20005000 	.word	0x20005000
 8001004:	00000400 	.word	0x00000400
 8001008:	200000b0 	.word	0x200000b0
 800100c:	200002d8 	.word	0x200002d8

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800104c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800104e:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 8001050:	2207      	movs	r2, #7
 8001052:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800105a:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 800105c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001060:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106e:	4822      	ldr	r0, [pc, #136]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 8001070:	f001 f9f6 	bl	8002460 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800107a:	f7ff ff13 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 800108c:	f001 fd7a 	bl	8002b84 <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001096:	f7ff ff05 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800109a:	4817      	ldr	r0, [pc, #92]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 800109c:	f001 fa82 	bl	80025a4 <HAL_TIM_IC_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f7ff fefd 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 80010ba:	f002 f8c1 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80010c4:	f7ff feee 	bl	8000ea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010cc:	2301      	movs	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2208      	movs	r2, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_TIM2_Init+0xdc>)
 80010e0:	f001 fcb4 	bl	8002a4c <HAL_TIM_IC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80010ea:	f7ff fedb 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000b4 	.word	0x200000b4

080010fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_TIM3_Init+0x94>)
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <MX_TIM3_Init+0x98>)
 800111c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000-1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_TIM3_Init+0x94>)
 8001120:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001124:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_TIM3_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_TIM3_Init+0x94>)
 800112e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001132:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_TIM3_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_TIM3_Init+0x94>)
 8001142:	f001 f98d 	bl	8002460 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800114c:	f7ff feaa 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM3_Init+0x94>)
 800115e:	f001 fd11 	bl	8002b84 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001168:	f7ff fe9c 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_TIM3_Init+0x94>)
 800117a:	f002 f861 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001184:	f7ff fe8e 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000fc 	.word	0x200000fc
 8001194:	40000400 	.word	0x40000400

08001198 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b6:	d13f      	bne.n	8001238 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	61d3      	str	r3, [r2, #28]
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <HAL_TIM_Base_MspInit+0xe0>)
 80011fe:	f000 fb49 	bl	8001894 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_TIM_Base_MspInit+0xe4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001220:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_TIM_Base_MspInit+0xe4>)
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	201c      	movs	r0, #28
 800122c:	f000 fafb 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001230:	201c      	movs	r0, #28
 8001232:	f000 fb14 	bl	800185e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001236:	e018      	b.n	800126a <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_TIM_Base_MspInit+0xe8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d113      	bne.n	800126a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_TIM_Base_MspInit+0xdc>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	201d      	movs	r0, #29
 8001260:	f000 fae1 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001264:	201d      	movs	r0, #29
 8001266:	f000 fafa 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40010000 	.word	0x40010000
 8001280:	40000400 	.word	0x40000400

08001284 <MX_USART2_Init>:

USART_HandleTypeDef husart2;

/* USART2 init function */
void MX_USART2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_USART2_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <MX_USART2_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_USART2_Init+0x50>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_USART2_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <MX_USART2_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <MX_USART2_Init+0x50>)
 80012c2:	f002 f82d 	bl	8003320 <HAL_USART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f7ff fdea 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000144 	.word	0x20000144
 80012d8:	40004400 	.word	0x40004400

080012dc <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(usartHandle->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <HAL_USART_MspInit+0x88>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d12f      	bne.n	800135c <HAL_USART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 8001302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001306:	61d3      	str	r3, [r2, #28]
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_USART_MspInit+0x8c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800132c:	230c      	movs	r3, #12
 800132e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <HAL_USART_MspInit+0x90>)
 8001340:	f000 faa8 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001344:	2310      	movs	r3, #16
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_USART_MspInit+0x90>)
 8001358:	f000 fa9c 	bl	8001894 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff fe4e 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001376:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800138c:	4c09      	ldr	r4, [pc, #36]	@ (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f002 fa0f 	bl	80037bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fbe7 	bl	8000b70 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013ac:	08004168 	.word	0x08004168
  ldr r2, =_sbss
 80013b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013b4:	200002d4 	.word	0x200002d4

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fa1f 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd6a 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fa37 	bl	800187a <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f9ff 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	@ (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	@ (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	20000188 	.word	0x20000188

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	@ (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000188 	.word	0x20000188

08001480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ed      	b.n	800166e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fa80 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff ffda 	bl	800146c <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffd6 	bl	800146c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0c5      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0e5      	beq.n	80014bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0202 	bic.w	r2, r2, #2
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ffb4 	bl	800146c <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ffb0 	bl	800146c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e09f      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e5      	bne.n	8001508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e5b      	ldrb	r3, [r3, #25]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e9b      	ldrb	r3, [r3, #26]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0220 	bic.w	r2, r2, #32
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7edb      	ldrb	r3, [r3, #27]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0210 	bic.w	r2, r2, #16
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0210 	orr.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7f1b      	ldrb	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f5b      	ldrb	r3, [r3, #29]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0204 	orr.w	r2, r2, #4
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	ea42 0103 	orr.w	r1, r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4906      	ldr	r1, [pc, #24]	@ (8001710 <__NVIC_EnableIRQ+0x34>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	@ (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff90 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff2d 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff42 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff35 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	@ 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	@ (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	@ (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	@ (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	@ (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	@ (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	@ 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	492c      	ldr	r1, [pc, #176]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4918      	ldr	r1, [pc, #96]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	@ (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	@ 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f806 	bl	8001c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e272      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	4b92      	ldr	r3, [pc, #584]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b89      	ldr	r3, [pc, #548]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d06c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x12c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d168      	bne.n	8001d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e24c      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x76>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a7f      	ldr	r2, [pc, #508]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7a      	ldr	r2, [pc, #488]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b78      	ldr	r3, [pc, #480]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a77      	ldr	r2, [pc, #476]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xbc>
 8001ce2:	4b72      	ldr	r3, [pc, #456]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a71      	ldr	r2, [pc, #452]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6f      	ldr	r3, [pc, #444]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd4>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b68      	ldr	r3, [pc, #416]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a67      	ldr	r2, [pc, #412]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fba6 	bl	800146c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fba2 	bl	800146c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e200      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe4>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fb92 	bl	800146c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fb8e 	bl	800146c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1ec      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x10c>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d86:	4b49      	ldr	r3, [pc, #292]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
 8001d92:	4b46      	ldr	r3, [pc, #280]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1c0      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4939      	ldr	r1, [pc, #228]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb47 	bl	800146c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fb43 	bl	800146c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1a1      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4927      	ldr	r1, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb26 	bl	800146c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb22 	bl	800146c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e180      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03a      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fb06 	bl	800146c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fb02 	bl	800146c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e160      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <HAL_RCC_OscConfig+0x26c>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 face 	bl	8002424 <RCC_Delay>
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff faec 	bl	800146c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fae8 	bl	800146c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e146      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	42420000 	.word	0x42420000
 8001eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b92      	ldr	r3, [pc, #584]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e9      	bne.n	8001e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a6 	beq.w	800201e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b88      	ldr	r3, [pc, #544]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a87      	ldr	r2, [pc, #540]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b85      	ldr	r3, [pc, #532]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b82      	ldr	r3, [pc, #520]	@ (8002108 <HAL_RCC_OscConfig+0x4c8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002108 <HAL_RCC_OscConfig+0x4c8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002108 <HAL_RCC_OscConfig+0x4c8>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff faa9 	bl	800146c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff faa5 	bl	800146c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	@ 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e103      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b75      	ldr	r3, [pc, #468]	@ (8002108 <HAL_RCC_OscConfig+0x4c8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x312>
 8001f44:	4b6f      	ldr	r3, [pc, #444]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a6e      	ldr	r2, [pc, #440]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	e02d      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a69      	ldr	r2, [pc, #420]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b67      	ldr	r3, [pc, #412]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a66      	ldr	r2, [pc, #408]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x356>
 8001f7c:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a60      	ldr	r2, [pc, #384]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4b5e      	ldr	r3, [pc, #376]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x36e>
 8001f96:	4b5b      	ldr	r3, [pc, #364]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b58      	ldr	r3, [pc, #352]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a57      	ldr	r2, [pc, #348]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fa59 	bl	800146c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fa55 	bl	800146c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0b1      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x37e>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fa43 	bl	800146c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fa3f 	bl	800146c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e09b      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a3b      	ldr	r2, [pc, #236]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d061      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d146      	bne.n	80020ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_RCC_OscConfig+0x4cc>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fa13 	bl	800146c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fa0f 	bl	800146c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e06d      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4921      	ldr	r1, [pc, #132]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a19      	ldr	r1, [r3, #32]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	430b      	orrs	r3, r1
 8002096:	491b      	ldr	r1, [pc, #108]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x4cc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff f9e3 	bl	800146c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff f9df 	bl	800146c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e03d      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x46a>
 80020c8:	e035      	b.n	8002136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <HAL_RCC_OscConfig+0x4cc>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f9cc 	bl	800146c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f9c8 	bl	800146c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e026      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x498>
 80020f6:	e01e      	b.n	8002136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e019      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
 800210c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_OscConfig+0x500>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0d0      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b6a      	ldr	r3, [pc, #424]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b67      	ldr	r3, [pc, #412]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4965      	ldr	r1, [pc, #404]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0b8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a0:	4b59      	ldr	r3, [pc, #356]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a58      	ldr	r2, [pc, #352]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b8:	4b53      	ldr	r3, [pc, #332]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b50      	ldr	r3, [pc, #320]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	494d      	ldr	r1, [pc, #308]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d040      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d115      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e07f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b41      	ldr	r3, [pc, #260]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e073      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3d      	ldr	r3, [pc, #244]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b39      	ldr	r3, [pc, #228]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4936      	ldr	r1, [pc, #216]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff f91a 	bl	800146c <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff f916 	bl	800146c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e053      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d210      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4922      	ldr	r1, [pc, #136]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e032      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4916      	ldr	r1, [pc, #88]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	490e      	ldr	r1, [pc, #56]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d2:	f000 f821 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	@ (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <HAL_RCC_ClockConfig+0x1cc>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_ClockConfig+0x1d0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f878 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	080040f8 	.word	0x080040f8
 8002310:	20000000 	.word	0x20000000
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b04      	cmp	r3, #4
 8002340:	d002      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x30>
 8002342:	2b08      	cmp	r3, #8
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x36>
 8002346:	e027      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800234a:	613b      	str	r3, [r7, #16]
      break;
 800234c:	e027      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0c9b      	lsrs	r3, r3, #18
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0c5b      	lsrs	r3, r3, #17
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	fb03 f202 	mul.w	r2, r3, r2
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e004      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0c      	ldr	r2, [pc, #48]	@ (80023bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	613b      	str	r3, [r7, #16]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800239a:	613b      	str	r3, [r7, #16]
      break;
 800239c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239e:	693b      	ldr	r3, [r7, #16]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	007a1200 	.word	0x007a1200
 80023b4:	08004110 	.word	0x08004110
 80023b8:	08004120 	.word	0x08004120
 80023bc:	003d0900 	.word	0x003d0900

080023c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b02      	ldr	r3, [pc, #8]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff2 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08004108 	.word	0x08004108

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffde 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0adb      	lsrs	r3, r3, #11
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08004108 	.word	0x08004108

08002424 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <RCC_Delay+0x34>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <RCC_Delay+0x38>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0a5b      	lsrs	r3, r3, #9
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002440:	bf00      	nop
  }
  while (Delay --);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	60fa      	str	r2, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f9      	bne.n	8002440 <RCC_Delay+0x1c>
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000000 	.word	0x20000000
 800245c:	10624dd3 	.word	0x10624dd3

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e041      	b.n	80024f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fe86 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fc98 	bl	8002dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e03a      	b.n	800258e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <HAL_TIM_Base_Start_IT+0x98>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x58>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002542:	d009      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x58>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <HAL_TIM_Base_Start_IT+0x9c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x58>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d111      	bne.n	800257c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d010      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257a:	e007      	b.n	800258c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800

080025a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f839 	bl	8002642 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fbf6 	bl	8002dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d104      	bne.n	8002672 <HAL_TIM_IC_Start_IT+0x1e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e013      	b.n	800269a <HAL_TIM_IC_Start_IT+0x46>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d104      	bne.n	8002682 <HAL_TIM_IC_Start_IT+0x2e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e00b      	b.n	800269a <HAL_TIM_IC_Start_IT+0x46>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d104      	bne.n	8002692 <HAL_TIM_IC_Start_IT+0x3e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e003      	b.n	800269a <HAL_TIM_IC_Start_IT+0x46>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_TIM_IC_Start_IT+0x58>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e013      	b.n	80026d4 <HAL_TIM_IC_Start_IT+0x80>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d104      	bne.n	80026bc <HAL_TIM_IC_Start_IT+0x68>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e00b      	b.n	80026d4 <HAL_TIM_IC_Start_IT+0x80>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d104      	bne.n	80026cc <HAL_TIM_IC_Start_IT+0x78>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e003      	b.n	80026d4 <HAL_TIM_IC_Start_IT+0x80>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026dc:	7b7b      	ldrb	r3, [r7, #13]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0b8      	b.n	8002858 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_IC_Start_IT+0xa2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f4:	e013      	b.n	800271e <HAL_TIM_IC_Start_IT+0xca>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_IC_Start_IT+0xb2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002704:	e00b      	b.n	800271e <HAL_TIM_IC_Start_IT+0xca>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d104      	bne.n	8002716 <HAL_TIM_IC_Start_IT+0xc2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002714:	e003      	b.n	800271e <HAL_TIM_IC_Start_IT+0xca>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xda>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800272c:	e013      	b.n	8002756 <HAL_TIM_IC_Start_IT+0x102>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d104      	bne.n	800273e <HAL_TIM_IC_Start_IT+0xea>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800273c:	e00b      	b.n	8002756 <HAL_TIM_IC_Start_IT+0x102>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d104      	bne.n	800274e <HAL_TIM_IC_Start_IT+0xfa>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800274c:	e003      	b.n	8002756 <HAL_TIM_IC_Start_IT+0x102>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d841      	bhi.n	80027e0 <HAL_TIM_IC_Start_IT+0x18c>
 800275c:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <HAL_TIM_IC_Start_IT+0x110>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002799 	.word	0x08002799
 8002768:	080027e1 	.word	0x080027e1
 800276c:	080027e1 	.word	0x080027e1
 8002770:	080027e1 	.word	0x080027e1
 8002774:	080027ab 	.word	0x080027ab
 8002778:	080027e1 	.word	0x080027e1
 800277c:	080027e1 	.word	0x080027e1
 8002780:	080027e1 	.word	0x080027e1
 8002784:	080027bd 	.word	0x080027bd
 8002788:	080027e1 	.word	0x080027e1
 800278c:	080027e1 	.word	0x080027e1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027cf 	.word	0x080027cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0202 	orr.w	r2, r2, #2
 80027a6:	60da      	str	r2, [r3, #12]
      break;
 80027a8:	e01d      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0204 	orr.w	r2, r2, #4
 80027b8:	60da      	str	r2, [r3, #12]
      break;
 80027ba:	e014      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0208 	orr.w	r2, r2, #8
 80027ca:	60da      	str	r2, [r3, #12]
      break;
 80027cc:	e00b      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0210 	orr.w	r2, r2, #16
 80027dc:	60da      	str	r2, [r3, #12]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d134      	bne.n	8002856 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fcfe 	bl	80031f6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <HAL_TIM_IC_Start_IT+0x20c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_TIM_IC_Start_IT+0x1ce>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280c:	d009      	beq.n	8002822 <HAL_TIM_IC_Start_IT+0x1ce>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <HAL_TIM_IC_Start_IT+0x210>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_TIM_IC_Start_IT+0x1ce>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <HAL_TIM_IC_Start_IT+0x214>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d111      	bne.n	8002846 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d010      	beq.n	8002856 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	e007      	b.n	8002856 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800

0800286c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d020      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0202 	mvn.w	r2, #2
 80028a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe f9d2 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa6c 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fa72 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d020      	beq.n	800291c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0204 	mvn.w	r2, #4
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f9ac 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa46 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa4c 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d020      	beq.n	8002968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0208 	mvn.w	r2, #8
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f986 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa20 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fa26 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0210 	mvn.w	r2, #16
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2208      	movs	r2, #8
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe f960 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f9fa 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fa00 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0201 	mvn.w	r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fa02 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fc89 	bl	800330e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9d0 	bl	8002dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0220 	mvn.w	r2, #32
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fc5c 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e088      	b.n	8002b7c <HAL_TIM_IC_ConfigChannel+0x130>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a88:	f000 fa12 	bl	8002eb0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 020c 	bic.w	r2, r2, #12
 8002a9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6999      	ldr	r1, [r3, #24]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	619a      	str	r2, [r3, #24]
 8002aae:	e060      	b.n	8002b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d11c      	bne.n	8002af0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002ac6:	f000 fa7b 	bl	8002fc0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ad8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6999      	ldr	r1, [r3, #24]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
 8002aee:	e040      	b.n	8002b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11b      	bne.n	8002b2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b06:	f000 fac6 	bl	8003096 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 020c 	bic.w	r2, r2, #12
 8002b18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
 8002b2c:	e021      	b.n	8002b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d11c      	bne.n	8002b6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b44:	f000 fae2 	bl	800310c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69d9      	ldr	r1, [r3, #28]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	021a      	lsls	r2, r3, #8
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
 8002b6c:	e001      	b.n	8002b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0b4      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x186>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd8:	d03e      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0xd4>
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bde:	f200 8087 	bhi.w	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be6:	f000 8086 	beq.w	8002cf6 <HAL_TIM_ConfigClockSource+0x172>
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bee:	d87f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b70      	cmp	r3, #112	@ 0x70
 8002bf2:	d01a      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xa6>
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d87b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b60      	cmp	r3, #96	@ 0x60
 8002bfa:	d050      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x11a>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d877      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b50      	cmp	r3, #80	@ 0x50
 8002c02:	d03c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0xfa>
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d873      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b40      	cmp	r3, #64	@ 0x40
 8002c0a:	d058      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x13a>
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d86f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b30      	cmp	r3, #48	@ 0x30
 8002c12:	d064      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b30      	cmp	r3, #48	@ 0x30
 8002c16:	d86b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d060      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d867      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05c      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d05a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	e062      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3a:	f000 fabd 	bl	80031b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
      break;
 8002c56:	e04f      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c68:	f000 faa6 	bl	80031b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7a:	609a      	str	r2, [r3, #8]
      break;
 8002c7c:	e03c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 f96a 	bl	8002f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2150      	movs	r1, #80	@ 0x50
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fa74 	bl	8003184 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e02c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 f9c4 	bl	8003038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2160      	movs	r1, #96	@ 0x60
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa64 	bl	8003184 <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e01c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f94a 	bl	8002f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2140      	movs	r1, #64	@ 0x40
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fa54 	bl	8003184 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e00c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 fa4b 	bl	8003184 <TIM_ITRx_SetConfig>
      break;
 8002cee:	e003      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d831      	bhi.n	8002d8c <HAL_TIM_ReadCapturedValue+0x78>
 8002d28:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d8d 	.word	0x08002d8d
 8002d38:	08002d8d 	.word	0x08002d8d
 8002d3c:	08002d8d 	.word	0x08002d8d
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d8d 	.word	0x08002d8d
 8002d48:	08002d8d 	.word	0x08002d8d
 8002d4c:	08002d8d 	.word	0x08002d8d
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	08002d8d 	.word	0x08002d8d
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002d8d 	.word	0x08002d8d
 8002d60:	08002d83 	.word	0x08002d83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	60fb      	str	r3, [r7, #12]

      break;
 8002d6c:	e00f      	b.n	8002d8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	60fb      	str	r3, [r7, #12]

      break;
 8002d76:	e00a      	b.n	8002d8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	60fb      	str	r3, [r7, #12]

      break;
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	60fb      	str	r3, [r7, #12]

      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d8c:	bf00      	nop
  }

  return tmpreg;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
	...

08002dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <TIM_Base_SetConfig+0xd0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x30>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x30>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea8 <TIM_Base_SetConfig+0xd4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x30>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8002eac <TIM_Base_SetConfig+0xd8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <TIM_Base_SetConfig+0xd0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <TIM_Base_SetConfig+0x62>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d007      	beq.n	8002e36 <TIM_Base_SetConfig+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <TIM_Base_SetConfig+0xd4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_Base_SetConfig+0x62>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	@ (8002eac <TIM_Base_SetConfig+0xd8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d108      	bne.n	8002e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <TIM_Base_SetConfig+0xd0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 0201 	bic.w	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f58 <TIM_TI1_SetConfig+0xa8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x46>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee4:	d007      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x46>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <TIM_TI1_SetConfig+0xac>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x46>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <TIM_TI1_SetConfig+0xb0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <TIM_TI1_SetConfig+0x4a>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <TIM_TI1_SetConfig+0x4c>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e003      	b.n	8002f1a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f023 030a 	bic.w	r3, r3, #10
 8002f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 030a 	and.w	r3, r3, #10
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800

08002f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f023 030a 	bic.w	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 0210 	bic.w	r2, r3, #16
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	b29b      	uxth	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003012:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0210 	bic.w	r2, r3, #16
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	031b      	lsls	r3, r3, #12
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003074:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003138:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800314a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	031b      	lsls	r3, r3, #12
 8003150:	b29b      	uxth	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800315e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	031b      	lsls	r3, r3, #12
 8003164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f043 0307 	orr.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	609a      	str	r2, [r3, #8]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	431a      	orrs	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2201      	movs	r2, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	431a      	orrs	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e046      	b.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a4:	d009      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a12      	ldr	r2, [pc, #72]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a10      	ldr	r2, [pc, #64]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e033      	b.n	800339a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ffc8 	bl	80012dc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f90b 	bl	8003570 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003378:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	@ 0x28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d17c      	bne.n	80034b8 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_USART_Transmit+0x28>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e075      	b.n	80034ba <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_USART_Transmit+0x3a>
 80033d8:	2302      	movs	r3, #2
 80033da:	e06e      	b.n	80034ba <HAL_USART_Transmit+0x118>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2212      	movs	r2, #18
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f2:	f7fe f83b 	bl	800146c <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340c:	d108      	bne.n	8003420 <HAL_USART_Transmit+0x7e>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003428:	e02a      	b.n	8003480 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f844 	bl	80034c2 <USART_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e03a      	b.n	80034ba <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003458:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	3302      	adds	r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e007      	b.n	8003472 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	3301      	adds	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1cf      	bne.n	800342a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	2140      	movs	r1, #64	@ 0x40
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f814 	bl	80034c2 <USART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e00a      	b.n	80034ba <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80034d2:	e038      	b.n	8003546 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d034      	beq.n	8003546 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <USART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	f7fd ffc3 	bl	800146c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d229      	bcs.n	8003546 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003500:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0220 	bic.w	r2, r2, #32
 8003510:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003520:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e00f      	b.n	8003566 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	429a      	cmp	r2, r3
 8003562:	d0b7      	beq.n	80034d4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 020c 	bic.w	r2, r2, #12
 800358a:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800359a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035a4:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035d2:	f023 030c 	bic.w	r3, r3, #12
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003604:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a53      	ldr	r2, [pc, #332]	@ (8003758 <USART_SetConfig+0x1e8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d14f      	bne.n	80036b0 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003610:	f7fe fef4 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8003614:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009a      	lsls	r2, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	4a4b      	ldr	r2, [pc, #300]	@ (800375c <USART_SetConfig+0x1ec>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	0119      	lsls	r1, r3, #4
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f2f3 	udiv	r2, r2, r3
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <USART_SetConfig+0x1ec>)
 800364e:	fba3 0302 	umull	r0, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2064      	movs	r0, #100	@ 0x64
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	@ 0x32
 8003660:	4a3e      	ldr	r2, [pc, #248]	@ (800375c <USART_SetConfig+0x1ec>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 800366e:	4419      	add	r1, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	fbb2 f2f3 	udiv	r2, r2, r3
 8003686:	4b35      	ldr	r3, [pc, #212]	@ (800375c <USART_SetConfig+0x1ec>)
 8003688:	fba3 0302 	umull	r0, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2064      	movs	r0, #100	@ 0x64
 8003690:	fb00 f303 	mul.w	r3, r0, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	3332      	adds	r3, #50	@ 0x32
 800369a:	4a30      	ldr	r2, [pc, #192]	@ (800375c <USART_SetConfig+0x1ec>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	440a      	add	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 80036ae:	e04e      	b.n	800374e <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fe90 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80036b4:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	4a23      	ldr	r2, [pc, #140]	@ (800375c <USART_SetConfig+0x1ec>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	0119      	lsls	r1, r3, #4
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <USART_SetConfig+0x1ec>)
 80036ee:	fba3 0302 	umull	r0, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2064      	movs	r0, #100	@ 0x64
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	3332      	adds	r3, #50	@ 0x32
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <USART_SetConfig+0x1ec>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 800370e:	4419      	add	r1, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fbb2 f2f3 	udiv	r2, r2, r3
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <USART_SetConfig+0x1ec>)
 8003728:	fba3 0302 	umull	r0, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2064      	movs	r0, #100	@ 0x64
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	@ 0x32
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <USART_SetConfig+0x1ec>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	440a      	add	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40013800 	.word	0x40013800
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <siprintf>:
 8003760:	b40e      	push	{r1, r2, r3}
 8003762:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003766:	b500      	push	{lr}
 8003768:	b09c      	sub	sp, #112	@ 0x70
 800376a:	ab1d      	add	r3, sp, #116	@ 0x74
 800376c:	9002      	str	r0, [sp, #8]
 800376e:	9006      	str	r0, [sp, #24]
 8003770:	9107      	str	r1, [sp, #28]
 8003772:	9104      	str	r1, [sp, #16]
 8003774:	4808      	ldr	r0, [pc, #32]	@ (8003798 <siprintf+0x38>)
 8003776:	4909      	ldr	r1, [pc, #36]	@ (800379c <siprintf+0x3c>)
 8003778:	f853 2b04 	ldr.w	r2, [r3], #4
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	a902      	add	r1, sp, #8
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	f000 f992 	bl	8003aac <_svfiprintf_r>
 8003788:	2200      	movs	r2, #0
 800378a:	9b02      	ldr	r3, [sp, #8]
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	b01c      	add	sp, #112	@ 0x70
 8003790:	f85d eb04 	ldr.w	lr, [sp], #4
 8003794:	b003      	add	sp, #12
 8003796:	4770      	bx	lr
 8003798:	2000000c 	.word	0x2000000c
 800379c:	ffff0208 	.word	0xffff0208

080037a0 <memset>:
 80037a0:	4603      	mov	r3, r0
 80037a2:	4402      	add	r2, r0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d100      	bne.n	80037aa <memset+0xa>
 80037a8:	4770      	bx	lr
 80037aa:	f803 1b01 	strb.w	r1, [r3], #1
 80037ae:	e7f9      	b.n	80037a4 <memset+0x4>

080037b0 <__errno>:
 80037b0:	4b01      	ldr	r3, [pc, #4]	@ (80037b8 <__errno+0x8>)
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	2000000c 	.word	0x2000000c

080037bc <__libc_init_array>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	2600      	movs	r6, #0
 80037c0:	4d0c      	ldr	r5, [pc, #48]	@ (80037f4 <__libc_init_array+0x38>)
 80037c2:	4c0d      	ldr	r4, [pc, #52]	@ (80037f8 <__libc_init_array+0x3c>)
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	42a6      	cmp	r6, r4
 80037ca:	d109      	bne.n	80037e0 <__libc_init_array+0x24>
 80037cc:	f000 fc78 	bl	80040c0 <_init>
 80037d0:	2600      	movs	r6, #0
 80037d2:	4d0a      	ldr	r5, [pc, #40]	@ (80037fc <__libc_init_array+0x40>)
 80037d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003800 <__libc_init_array+0x44>)
 80037d6:	1b64      	subs	r4, r4, r5
 80037d8:	10a4      	asrs	r4, r4, #2
 80037da:	42a6      	cmp	r6, r4
 80037dc:	d105      	bne.n	80037ea <__libc_init_array+0x2e>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e4:	4798      	blx	r3
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7ee      	b.n	80037c8 <__libc_init_array+0xc>
 80037ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ee:	4798      	blx	r3
 80037f0:	3601      	adds	r6, #1
 80037f2:	e7f2      	b.n	80037da <__libc_init_array+0x1e>
 80037f4:	08004160 	.word	0x08004160
 80037f8:	08004160 	.word	0x08004160
 80037fc:	08004160 	.word	0x08004160
 8003800:	08004164 	.word	0x08004164

08003804 <__retarget_lock_acquire_recursive>:
 8003804:	4770      	bx	lr

08003806 <__retarget_lock_release_recursive>:
 8003806:	4770      	bx	lr

08003808 <_free_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4605      	mov	r5, r0
 800380c:	2900      	cmp	r1, #0
 800380e:	d040      	beq.n	8003892 <_free_r+0x8a>
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f0c      	subs	r4, r1, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	18e4      	addlt	r4, r4, r3
 800381c:	f000 f8de 	bl	80039dc <__malloc_lock>
 8003820:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <_free_r+0x8c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	b933      	cbnz	r3, 8003834 <_free_r+0x2c>
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6014      	str	r4, [r2, #0]
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003830:	f000 b8da 	b.w	80039e8 <__malloc_unlock>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d908      	bls.n	800384a <_free_r+0x42>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	e7ed      	b.n	8003826 <_free_r+0x1e>
 800384a:	461a      	mov	r2, r3
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b10b      	cbz	r3, 8003854 <_free_r+0x4c>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d9fa      	bls.n	800384a <_free_r+0x42>
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	1850      	adds	r0, r2, r1
 8003858:	42a0      	cmp	r0, r4
 800385a:	d10b      	bne.n	8003874 <_free_r+0x6c>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	4401      	add	r1, r0
 8003860:	1850      	adds	r0, r2, r1
 8003862:	4283      	cmp	r3, r0
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	d1e0      	bne.n	800382a <_free_r+0x22>
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4408      	add	r0, r1
 800386e:	6010      	str	r0, [r2, #0]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	e7da      	b.n	800382a <_free_r+0x22>
 8003874:	d902      	bls.n	800387c <_free_r+0x74>
 8003876:	230c      	movs	r3, #12
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	e7d6      	b.n	800382a <_free_r+0x22>
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	1821      	adds	r1, r4, r0
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6054      	str	r4, [r2, #4]
 8003890:	e7cb      	b.n	800382a <_free_r+0x22>
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	200002d0 	.word	0x200002d0

08003898 <sbrk_aligned>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4e0f      	ldr	r6, [pc, #60]	@ (80038d8 <sbrk_aligned+0x40>)
 800389c:	460c      	mov	r4, r1
 800389e:	6831      	ldr	r1, [r6, #0]
 80038a0:	4605      	mov	r5, r0
 80038a2:	b911      	cbnz	r1, 80038aa <sbrk_aligned+0x12>
 80038a4:	f000 fbaa 	bl	8003ffc <_sbrk_r>
 80038a8:	6030      	str	r0, [r6, #0]
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fba5 	bl	8003ffc <_sbrk_r>
 80038b2:	1c43      	adds	r3, r0, #1
 80038b4:	d103      	bne.n	80038be <sbrk_aligned+0x26>
 80038b6:	f04f 34ff 	mov.w	r4, #4294967295
 80038ba:	4620      	mov	r0, r4
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	1cc4      	adds	r4, r0, #3
 80038c0:	f024 0403 	bic.w	r4, r4, #3
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d0f8      	beq.n	80038ba <sbrk_aligned+0x22>
 80038c8:	1a21      	subs	r1, r4, r0
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 fb96 	bl	8003ffc <_sbrk_r>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d1f2      	bne.n	80038ba <sbrk_aligned+0x22>
 80038d4:	e7ef      	b.n	80038b6 <sbrk_aligned+0x1e>
 80038d6:	bf00      	nop
 80038d8:	200002cc 	.word	0x200002cc

080038dc <_malloc_r>:
 80038dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e0:	1ccd      	adds	r5, r1, #3
 80038e2:	f025 0503 	bic.w	r5, r5, #3
 80038e6:	3508      	adds	r5, #8
 80038e8:	2d0c      	cmp	r5, #12
 80038ea:	bf38      	it	cc
 80038ec:	250c      	movcc	r5, #12
 80038ee:	2d00      	cmp	r5, #0
 80038f0:	4606      	mov	r6, r0
 80038f2:	db01      	blt.n	80038f8 <_malloc_r+0x1c>
 80038f4:	42a9      	cmp	r1, r5
 80038f6:	d904      	bls.n	8003902 <_malloc_r+0x26>
 80038f8:	230c      	movs	r3, #12
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	2000      	movs	r0, #0
 80038fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039d8 <_malloc_r+0xfc>
 8003906:	f000 f869 	bl	80039dc <__malloc_lock>
 800390a:	f8d8 3000 	ldr.w	r3, [r8]
 800390e:	461c      	mov	r4, r3
 8003910:	bb44      	cbnz	r4, 8003964 <_malloc_r+0x88>
 8003912:	4629      	mov	r1, r5
 8003914:	4630      	mov	r0, r6
 8003916:	f7ff ffbf 	bl	8003898 <sbrk_aligned>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	4604      	mov	r4, r0
 800391e:	d158      	bne.n	80039d2 <_malloc_r+0xf6>
 8003920:	f8d8 4000 	ldr.w	r4, [r8]
 8003924:	4627      	mov	r7, r4
 8003926:	2f00      	cmp	r7, #0
 8003928:	d143      	bne.n	80039b2 <_malloc_r+0xd6>
 800392a:	2c00      	cmp	r4, #0
 800392c:	d04b      	beq.n	80039c6 <_malloc_r+0xea>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	4639      	mov	r1, r7
 8003932:	4630      	mov	r0, r6
 8003934:	eb04 0903 	add.w	r9, r4, r3
 8003938:	f000 fb60 	bl	8003ffc <_sbrk_r>
 800393c:	4581      	cmp	r9, r0
 800393e:	d142      	bne.n	80039c6 <_malloc_r+0xea>
 8003940:	6821      	ldr	r1, [r4, #0]
 8003942:	4630      	mov	r0, r6
 8003944:	1a6d      	subs	r5, r5, r1
 8003946:	4629      	mov	r1, r5
 8003948:	f7ff ffa6 	bl	8003898 <sbrk_aligned>
 800394c:	3001      	adds	r0, #1
 800394e:	d03a      	beq.n	80039c6 <_malloc_r+0xea>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	442b      	add	r3, r5
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	f8d8 3000 	ldr.w	r3, [r8]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	bb62      	cbnz	r2, 80039b8 <_malloc_r+0xdc>
 800395e:	f8c8 7000 	str.w	r7, [r8]
 8003962:	e00f      	b.n	8003984 <_malloc_r+0xa8>
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	1b52      	subs	r2, r2, r5
 8003968:	d420      	bmi.n	80039ac <_malloc_r+0xd0>
 800396a:	2a0b      	cmp	r2, #11
 800396c:	d917      	bls.n	800399e <_malloc_r+0xc2>
 800396e:	1961      	adds	r1, r4, r5
 8003970:	42a3      	cmp	r3, r4
 8003972:	6025      	str	r5, [r4, #0]
 8003974:	bf18      	it	ne
 8003976:	6059      	strne	r1, [r3, #4]
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	bf08      	it	eq
 800397c:	f8c8 1000 	streq.w	r1, [r8]
 8003980:	5162      	str	r2, [r4, r5]
 8003982:	604b      	str	r3, [r1, #4]
 8003984:	4630      	mov	r0, r6
 8003986:	f000 f82f 	bl	80039e8 <__malloc_unlock>
 800398a:	f104 000b 	add.w	r0, r4, #11
 800398e:	1d23      	adds	r3, r4, #4
 8003990:	f020 0007 	bic.w	r0, r0, #7
 8003994:	1ac2      	subs	r2, r0, r3
 8003996:	bf1c      	itt	ne
 8003998:	1a1b      	subne	r3, r3, r0
 800399a:	50a3      	strne	r3, [r4, r2]
 800399c:	e7af      	b.n	80038fe <_malloc_r+0x22>
 800399e:	6862      	ldr	r2, [r4, #4]
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	bf0c      	ite	eq
 80039a4:	f8c8 2000 	streq.w	r2, [r8]
 80039a8:	605a      	strne	r2, [r3, #4]
 80039aa:	e7eb      	b.n	8003984 <_malloc_r+0xa8>
 80039ac:	4623      	mov	r3, r4
 80039ae:	6864      	ldr	r4, [r4, #4]
 80039b0:	e7ae      	b.n	8003910 <_malloc_r+0x34>
 80039b2:	463c      	mov	r4, r7
 80039b4:	687f      	ldr	r7, [r7, #4]
 80039b6:	e7b6      	b.n	8003926 <_malloc_r+0x4a>
 80039b8:	461a      	mov	r2, r3
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	42a3      	cmp	r3, r4
 80039be:	d1fb      	bne.n	80039b8 <_malloc_r+0xdc>
 80039c0:	2300      	movs	r3, #0
 80039c2:	6053      	str	r3, [r2, #4]
 80039c4:	e7de      	b.n	8003984 <_malloc_r+0xa8>
 80039c6:	230c      	movs	r3, #12
 80039c8:	4630      	mov	r0, r6
 80039ca:	6033      	str	r3, [r6, #0]
 80039cc:	f000 f80c 	bl	80039e8 <__malloc_unlock>
 80039d0:	e794      	b.n	80038fc <_malloc_r+0x20>
 80039d2:	6005      	str	r5, [r0, #0]
 80039d4:	e7d6      	b.n	8003984 <_malloc_r+0xa8>
 80039d6:	bf00      	nop
 80039d8:	200002d0 	.word	0x200002d0

080039dc <__malloc_lock>:
 80039dc:	4801      	ldr	r0, [pc, #4]	@ (80039e4 <__malloc_lock+0x8>)
 80039de:	f7ff bf11 	b.w	8003804 <__retarget_lock_acquire_recursive>
 80039e2:	bf00      	nop
 80039e4:	200002c8 	.word	0x200002c8

080039e8 <__malloc_unlock>:
 80039e8:	4801      	ldr	r0, [pc, #4]	@ (80039f0 <__malloc_unlock+0x8>)
 80039ea:	f7ff bf0c 	b.w	8003806 <__retarget_lock_release_recursive>
 80039ee:	bf00      	nop
 80039f0:	200002c8 	.word	0x200002c8

080039f4 <__ssputs_r>:
 80039f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f8:	461f      	mov	r7, r3
 80039fa:	688e      	ldr	r6, [r1, #8]
 80039fc:	4682      	mov	sl, r0
 80039fe:	42be      	cmp	r6, r7
 8003a00:	460c      	mov	r4, r1
 8003a02:	4690      	mov	r8, r2
 8003a04:	680b      	ldr	r3, [r1, #0]
 8003a06:	d82d      	bhi.n	8003a64 <__ssputs_r+0x70>
 8003a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a10:	d026      	beq.n	8003a60 <__ssputs_r+0x6c>
 8003a12:	6965      	ldr	r5, [r4, #20]
 8003a14:	6909      	ldr	r1, [r1, #16]
 8003a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a1a:	eba3 0901 	sub.w	r9, r3, r1
 8003a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a22:	1c7b      	adds	r3, r7, #1
 8003a24:	444b      	add	r3, r9
 8003a26:	106d      	asrs	r5, r5, #1
 8003a28:	429d      	cmp	r5, r3
 8003a2a:	bf38      	it	cc
 8003a2c:	461d      	movcc	r5, r3
 8003a2e:	0553      	lsls	r3, r2, #21
 8003a30:	d527      	bpl.n	8003a82 <__ssputs_r+0x8e>
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7ff ff52 	bl	80038dc <_malloc_r>
 8003a38:	4606      	mov	r6, r0
 8003a3a:	b360      	cbz	r0, 8003a96 <__ssputs_r+0xa2>
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	6921      	ldr	r1, [r4, #16]
 8003a40:	f000 fafa 	bl	8004038 <memcpy>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	6126      	str	r6, [r4, #16]
 8003a52:	444e      	add	r6, r9
 8003a54:	6026      	str	r6, [r4, #0]
 8003a56:	463e      	mov	r6, r7
 8003a58:	6165      	str	r5, [r4, #20]
 8003a5a:	eba5 0509 	sub.w	r5, r5, r9
 8003a5e:	60a5      	str	r5, [r4, #8]
 8003a60:	42be      	cmp	r6, r7
 8003a62:	d900      	bls.n	8003a66 <__ssputs_r+0x72>
 8003a64:	463e      	mov	r6, r7
 8003a66:	4632      	mov	r2, r6
 8003a68:	4641      	mov	r1, r8
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	f000 faac 	bl	8003fc8 <memmove>
 8003a70:	2000      	movs	r0, #0
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	1b9b      	subs	r3, r3, r6
 8003a76:	60a3      	str	r3, [r4, #8]
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	4433      	add	r3, r6
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a82:	462a      	mov	r2, r5
 8003a84:	f000 fae6 	bl	8004054 <_realloc_r>
 8003a88:	4606      	mov	r6, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d1e0      	bne.n	8003a50 <__ssputs_r+0x5c>
 8003a8e:	4650      	mov	r0, sl
 8003a90:	6921      	ldr	r1, [r4, #16]
 8003a92:	f7ff feb9 	bl	8003808 <_free_r>
 8003a96:	230c      	movs	r3, #12
 8003a98:	f8ca 3000 	str.w	r3, [sl]
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	e7e9      	b.n	8003a7e <__ssputs_r+0x8a>
	...

08003aac <_svfiprintf_r>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	4698      	mov	r8, r3
 8003ab2:	898b      	ldrh	r3, [r1, #12]
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	460d      	mov	r5, r1
 8003aba:	4614      	mov	r4, r2
 8003abc:	b09d      	sub	sp, #116	@ 0x74
 8003abe:	d510      	bpl.n	8003ae2 <_svfiprintf_r+0x36>
 8003ac0:	690b      	ldr	r3, [r1, #16]
 8003ac2:	b973      	cbnz	r3, 8003ae2 <_svfiprintf_r+0x36>
 8003ac4:	2140      	movs	r1, #64	@ 0x40
 8003ac6:	f7ff ff09 	bl	80038dc <_malloc_r>
 8003aca:	6028      	str	r0, [r5, #0]
 8003acc:	6128      	str	r0, [r5, #16]
 8003ace:	b930      	cbnz	r0, 8003ade <_svfiprintf_r+0x32>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	b01d      	add	sp, #116	@ 0x74
 8003ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ade:	2340      	movs	r3, #64	@ 0x40
 8003ae0:	616b      	str	r3, [r5, #20]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003aec:	2330      	movs	r3, #48	@ 0x30
 8003aee:	f04f 0901 	mov.w	r9, #1
 8003af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c90 <_svfiprintf_r+0x1e4>
 8003afa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003afe:	4623      	mov	r3, r4
 8003b00:	469a      	mov	sl, r3
 8003b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b06:	b10a      	cbz	r2, 8003b0c <_svfiprintf_r+0x60>
 8003b08:	2a25      	cmp	r2, #37	@ 0x25
 8003b0a:	d1f9      	bne.n	8003b00 <_svfiprintf_r+0x54>
 8003b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b10:	d00b      	beq.n	8003b2a <_svfiprintf_r+0x7e>
 8003b12:	465b      	mov	r3, fp
 8003b14:	4622      	mov	r2, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f7ff ff6b 	bl	80039f4 <__ssputs_r>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f000 80a7 	beq.w	8003c72 <_svfiprintf_r+0x1c6>
 8003b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b26:	445a      	add	r2, fp
 8003b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 809f 	beq.w	8003c72 <_svfiprintf_r+0x1c6>
 8003b34:	2300      	movs	r3, #0
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b3e:	f10a 0a01 	add.w	sl, sl, #1
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	9307      	str	r3, [sp, #28]
 8003b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b4c:	4654      	mov	r4, sl
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b54:	484e      	ldr	r0, [pc, #312]	@ (8003c90 <_svfiprintf_r+0x1e4>)
 8003b56:	f000 fa61 	bl	800401c <memchr>
 8003b5a:	9a04      	ldr	r2, [sp, #16]
 8003b5c:	b9d8      	cbnz	r0, 8003b96 <_svfiprintf_r+0xea>
 8003b5e:	06d0      	lsls	r0, r2, #27
 8003b60:	bf44      	itt	mi
 8003b62:	2320      	movmi	r3, #32
 8003b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b68:	0711      	lsls	r1, r2, #28
 8003b6a:	bf44      	itt	mi
 8003b6c:	232b      	movmi	r3, #43	@ 0x2b
 8003b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b72:	f89a 3000 	ldrb.w	r3, [sl]
 8003b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b78:	d015      	beq.n	8003ba6 <_svfiprintf_r+0xfa>
 8003b7a:	4654      	mov	r4, sl
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f04f 0c0a 	mov.w	ip, #10
 8003b82:	9a07      	ldr	r2, [sp, #28]
 8003b84:	4621      	mov	r1, r4
 8003b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b8a:	3b30      	subs	r3, #48	@ 0x30
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d94b      	bls.n	8003c28 <_svfiprintf_r+0x17c>
 8003b90:	b1b0      	cbz	r0, 8003bc0 <_svfiprintf_r+0x114>
 8003b92:	9207      	str	r2, [sp, #28]
 8003b94:	e014      	b.n	8003bc0 <_svfiprintf_r+0x114>
 8003b96:	eba0 0308 	sub.w	r3, r0, r8
 8003b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	46a2      	mov	sl, r4
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	e7d2      	b.n	8003b4c <_svfiprintf_r+0xa0>
 8003ba6:	9b03      	ldr	r3, [sp, #12]
 8003ba8:	1d19      	adds	r1, r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	9103      	str	r1, [sp, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfbb      	ittet	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb8:	9307      	strge	r3, [sp, #28]
 8003bba:	9307      	strlt	r3, [sp, #28]
 8003bbc:	bfb8      	it	lt
 8003bbe:	9204      	strlt	r2, [sp, #16]
 8003bc0:	7823      	ldrb	r3, [r4, #0]
 8003bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bc4:	d10a      	bne.n	8003bdc <_svfiprintf_r+0x130>
 8003bc6:	7863      	ldrb	r3, [r4, #1]
 8003bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bca:	d132      	bne.n	8003c32 <_svfiprintf_r+0x186>
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	3402      	adds	r4, #2
 8003bd0:	1d1a      	adds	r2, r3, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	9203      	str	r2, [sp, #12]
 8003bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bda:	9305      	str	r3, [sp, #20]
 8003bdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c94 <_svfiprintf_r+0x1e8>
 8003be0:	2203      	movs	r2, #3
 8003be2:	4650      	mov	r0, sl
 8003be4:	7821      	ldrb	r1, [r4, #0]
 8003be6:	f000 fa19 	bl	800401c <memchr>
 8003bea:	b138      	cbz	r0, 8003bfc <_svfiprintf_r+0x150>
 8003bec:	2240      	movs	r2, #64	@ 0x40
 8003bee:	9b04      	ldr	r3, [sp, #16]
 8003bf0:	eba0 000a 	sub.w	r0, r0, sl
 8003bf4:	4082      	lsls	r2, r0
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	3401      	adds	r4, #1
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c00:	2206      	movs	r2, #6
 8003c02:	4825      	ldr	r0, [pc, #148]	@ (8003c98 <_svfiprintf_r+0x1ec>)
 8003c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c08:	f000 fa08 	bl	800401c <memchr>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d036      	beq.n	8003c7e <_svfiprintf_r+0x1d2>
 8003c10:	4b22      	ldr	r3, [pc, #136]	@ (8003c9c <_svfiprintf_r+0x1f0>)
 8003c12:	bb1b      	cbnz	r3, 8003c5c <_svfiprintf_r+0x1b0>
 8003c14:	9b03      	ldr	r3, [sp, #12]
 8003c16:	3307      	adds	r3, #7
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	9303      	str	r3, [sp, #12]
 8003c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c22:	4433      	add	r3, r6
 8003c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c26:	e76a      	b.n	8003afe <_svfiprintf_r+0x52>
 8003c28:	460c      	mov	r4, r1
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c30:	e7a8      	b.n	8003b84 <_svfiprintf_r+0xd8>
 8003c32:	2300      	movs	r3, #0
 8003c34:	f04f 0c0a 	mov.w	ip, #10
 8003c38:	4619      	mov	r1, r3
 8003c3a:	3401      	adds	r4, #1
 8003c3c:	9305      	str	r3, [sp, #20]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c44:	3a30      	subs	r2, #48	@ 0x30
 8003c46:	2a09      	cmp	r2, #9
 8003c48:	d903      	bls.n	8003c52 <_svfiprintf_r+0x1a6>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0c6      	beq.n	8003bdc <_svfiprintf_r+0x130>
 8003c4e:	9105      	str	r1, [sp, #20]
 8003c50:	e7c4      	b.n	8003bdc <_svfiprintf_r+0x130>
 8003c52:	4604      	mov	r4, r0
 8003c54:	2301      	movs	r3, #1
 8003c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c5a:	e7f0      	b.n	8003c3e <_svfiprintf_r+0x192>
 8003c5c:	ab03      	add	r3, sp, #12
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	462a      	mov	r2, r5
 8003c62:	4638      	mov	r0, r7
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <_svfiprintf_r+0x1f4>)
 8003c66:	a904      	add	r1, sp, #16
 8003c68:	f3af 8000 	nop.w
 8003c6c:	1c42      	adds	r2, r0, #1
 8003c6e:	4606      	mov	r6, r0
 8003c70:	d1d6      	bne.n	8003c20 <_svfiprintf_r+0x174>
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	065b      	lsls	r3, r3, #25
 8003c76:	f53f af2d 	bmi.w	8003ad4 <_svfiprintf_r+0x28>
 8003c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c7c:	e72c      	b.n	8003ad8 <_svfiprintf_r+0x2c>
 8003c7e:	ab03      	add	r3, sp, #12
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	462a      	mov	r2, r5
 8003c84:	4638      	mov	r0, r7
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <_svfiprintf_r+0x1f4>)
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	f000 f87d 	bl	8003d88 <_printf_i>
 8003c8e:	e7ed      	b.n	8003c6c <_svfiprintf_r+0x1c0>
 8003c90:	08004122 	.word	0x08004122
 8003c94:	08004128 	.word	0x08004128
 8003c98:	0800412c 	.word	0x0800412c
 8003c9c:	00000000 	.word	0x00000000
 8003ca0:	080039f5 	.word	0x080039f5

08003ca4 <_printf_common>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	4616      	mov	r6, r2
 8003caa:	4698      	mov	r8, r3
 8003cac:	688a      	ldr	r2, [r1, #8]
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfb8      	it	lt
 8003cb6:	4613      	movlt	r3, r2
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cc4:	b10a      	cbz	r2, 8003cca <_printf_common+0x26>
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	0699      	lsls	r1, r3, #26
 8003cce:	bf42      	ittt	mi
 8003cd0:	6833      	ldrmi	r3, [r6, #0]
 8003cd2:	3302      	addmi	r3, #2
 8003cd4:	6033      	strmi	r3, [r6, #0]
 8003cd6:	6825      	ldr	r5, [r4, #0]
 8003cd8:	f015 0506 	ands.w	r5, r5, #6
 8003cdc:	d106      	bne.n	8003cec <_printf_common+0x48>
 8003cde:	f104 0a19 	add.w	sl, r4, #25
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	6832      	ldr	r2, [r6, #0]
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	dc2b      	bgt.n	8003d44 <_printf_common+0xa0>
 8003cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	3b00      	subs	r3, #0
 8003cf4:	bf18      	it	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	0692      	lsls	r2, r2, #26
 8003cfa:	d430      	bmi.n	8003d5e <_printf_common+0xba>
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d04:	47c8      	blx	r9
 8003d06:	3001      	adds	r0, #1
 8003d08:	d023      	beq.n	8003d52 <_printf_common+0xae>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	6922      	ldr	r2, [r4, #16]
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf14      	ite	ne
 8003d16:	2500      	movne	r5, #0
 8003d18:	6833      	ldreq	r3, [r6, #0]
 8003d1a:	f04f 0600 	mov.w	r6, #0
 8003d1e:	bf08      	it	eq
 8003d20:	68e5      	ldreq	r5, [r4, #12]
 8003d22:	f104 041a 	add.w	r4, r4, #26
 8003d26:	bf08      	it	eq
 8003d28:	1aed      	subeq	r5, r5, r3
 8003d2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d2e:	bf08      	it	eq
 8003d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bfc4      	itt	gt
 8003d38:	1a9b      	subgt	r3, r3, r2
 8003d3a:	18ed      	addgt	r5, r5, r3
 8003d3c:	42b5      	cmp	r5, r6
 8003d3e:	d11a      	bne.n	8003d76 <_printf_common+0xd2>
 8003d40:	2000      	movs	r0, #0
 8003d42:	e008      	b.n	8003d56 <_printf_common+0xb2>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4652      	mov	r2, sl
 8003d48:	4641      	mov	r1, r8
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	47c8      	blx	r9
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d103      	bne.n	8003d5a <_printf_common+0xb6>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7c1      	b.n	8003ce2 <_printf_common+0x3e>
 8003d5e:	2030      	movs	r0, #48	@ 0x30
 8003d60:	18e1      	adds	r1, r4, r3
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d6c:	4422      	add	r2, r4
 8003d6e:	3302      	adds	r3, #2
 8003d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d74:	e7c2      	b.n	8003cfc <_printf_common+0x58>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	47c8      	blx	r9
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0e6      	beq.n	8003d52 <_printf_common+0xae>
 8003d84:	3601      	adds	r6, #1
 8003d86:	e7d9      	b.n	8003d3c <_printf_common+0x98>

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	4691      	mov	r9, r2
 8003d90:	2f78      	cmp	r7, #120	@ 0x78
 8003d92:	4680      	mov	r8, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	469a      	mov	sl, r3
 8003d98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	@ 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d3 	beq.w	8003f50 <_printf_i+0x1c8>
 8003daa:	2f58      	cmp	r7, #88	@ 0x58
 8003dac:	f000 80ba 	beq.w	8003f24 <_printf_i+0x19c>
 8003db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f37 	.word	0x08003f37
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003ef1 	.word	0x08003ef1
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f59 	.word	0x08003f59
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003ef9 	.word	0x08003ef9
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09e      	b.n	8003f72 <_printf_i+0x1ea>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6031      	str	r1, [r6, #0]
 8003e3c:	0606      	lsls	r6, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xbc>
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <_printf_i+0xc4>
 8003e44:	0645      	lsls	r5, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xb8>
 8003e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xd0>
 8003e50:	232d      	movs	r3, #45	@ 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e58:	230a      	movs	r3, #10
 8003e5a:	4859      	ldr	r0, [pc, #356]	@ (8003fc0 <_printf_i+0x238>)
 8003e5c:	e011      	b.n	8003e82 <_printf_i+0xfa>
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	0608      	lsls	r0, r1, #24
 8003e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0xe8>
 8003e6a:	0649      	lsls	r1, r1, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	bf14      	ite	ne
 8003e76:	230a      	movne	r3, #10
 8003e78:	2308      	moveq	r3, #8
 8003e7a:	4851      	ldr	r0, [pc, #324]	@ (8003fc0 <_printf_i+0x238>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e82:	6866      	ldr	r6, [r4, #4]
 8003e84:	2e00      	cmp	r6, #0
 8003e86:	bfa8      	it	ge
 8003e88:	6821      	ldrge	r1, [r4, #0]
 8003e8a:	60a6      	str	r6, [r4, #8]
 8003e8c:	bfa4      	itt	ge
 8003e8e:	f021 0104 	bicge.w	r1, r1, #4
 8003e92:	6021      	strge	r1, [r4, #0]
 8003e94:	b90d      	cbnz	r5, 8003e9a <_printf_i+0x112>
 8003e96:	2e00      	cmp	r6, #0
 8003e98:	d04b      	beq.n	8003f32 <_printf_i+0x1aa>
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ea4:	5dc7      	ldrb	r7, [r0, r7]
 8003ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eaa:	462f      	mov	r7, r5
 8003eac:	42bb      	cmp	r3, r7
 8003eae:	460d      	mov	r5, r1
 8003eb0:	d9f4      	bls.n	8003e9c <_printf_i+0x114>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d10b      	bne.n	8003ece <_printf_i+0x146>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	07df      	lsls	r7, r3, #31
 8003eba:	d508      	bpl.n	8003ece <_printf_i+0x146>
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	6861      	ldr	r1, [r4, #4]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	bfde      	ittt	le
 8003ec4:	2330      	movle	r3, #48	@ 0x30
 8003ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ece:	1b92      	subs	r2, r2, r6
 8003ed0:	6122      	str	r2, [r4, #16]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	aa03      	add	r2, sp, #12
 8003ede:	f7ff fee1 	bl	8003ca4 <_printf_common>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d14a      	bne.n	8003f7c <_printf_i+0x1f4>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	b004      	add	sp, #16
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f043 0320 	orr.w	r3, r3, #32
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	2778      	movs	r7, #120	@ 0x78
 8003efa:	4832      	ldr	r0, [pc, #200]	@ (8003fc4 <_printf_i+0x23c>)
 8003efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	061f      	lsls	r7, r3, #24
 8003f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f0a:	d402      	bmi.n	8003f12 <_printf_i+0x18a>
 8003f0c:	065f      	lsls	r7, r3, #25
 8003f0e:	bf48      	it	mi
 8003f10:	b2ad      	uxthmi	r5, r5
 8003f12:	6031      	str	r1, [r6, #0]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	bf44      	itt	mi
 8003f18:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1c:	6023      	strmi	r3, [r4, #0]
 8003f1e:	b11d      	cbz	r5, 8003f28 <_printf_i+0x1a0>
 8003f20:	2310      	movs	r3, #16
 8003f22:	e7ab      	b.n	8003e7c <_printf_i+0xf4>
 8003f24:	4826      	ldr	r0, [pc, #152]	@ (8003fc0 <_printf_i+0x238>)
 8003f26:	e7e9      	b.n	8003efc <_printf_i+0x174>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	e7f6      	b.n	8003f20 <_printf_i+0x198>
 8003f32:	4616      	mov	r6, r2
 8003f34:	e7bd      	b.n	8003eb2 <_printf_i+0x12a>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	6825      	ldr	r5, [r4, #0]
 8003f3a:	1d18      	adds	r0, r3, #4
 8003f3c:	6961      	ldr	r1, [r4, #20]
 8003f3e:	6030      	str	r0, [r6, #0]
 8003f40:	062e      	lsls	r6, r5, #24
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	d501      	bpl.n	8003f4a <_printf_i+0x1c2>
 8003f46:	6019      	str	r1, [r3, #0]
 8003f48:	e002      	b.n	8003f50 <_printf_i+0x1c8>
 8003f4a:	0668      	lsls	r0, r5, #25
 8003f4c:	d5fb      	bpl.n	8003f46 <_printf_i+0x1be>
 8003f4e:	8019      	strh	r1, [r3, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	4616      	mov	r6, r2
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	e7bc      	b.n	8003ed2 <_printf_i+0x14a>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	6032      	str	r2, [r6, #0]
 8003f60:	681e      	ldr	r6, [r3, #0]
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f859 	bl	800401c <memchr>
 8003f6a:	b108      	cbz	r0, 8003f70 <_printf_i+0x1e8>
 8003f6c:	1b80      	subs	r0, r0, r6
 8003f6e:	6060      	str	r0, [r4, #4]
 8003f70:	6863      	ldr	r3, [r4, #4]
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7a:	e7aa      	b.n	8003ed2 <_printf_i+0x14a>
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	47d0      	blx	sl
 8003f86:	3001      	adds	r0, #1
 8003f88:	d0ad      	beq.n	8003ee6 <_printf_i+0x15e>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	079b      	lsls	r3, r3, #30
 8003f8e:	d413      	bmi.n	8003fb8 <_printf_i+0x230>
 8003f90:	68e0      	ldr	r0, [r4, #12]
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	4298      	cmp	r0, r3
 8003f96:	bfb8      	it	lt
 8003f98:	4618      	movlt	r0, r3
 8003f9a:	e7a6      	b.n	8003eea <_printf_i+0x162>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d09d      	beq.n	8003ee6 <_printf_i+0x15e>
 8003faa:	3501      	adds	r5, #1
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	9903      	ldr	r1, [sp, #12]
 8003fb0:	1a5b      	subs	r3, r3, r1
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	dcf2      	bgt.n	8003f9c <_printf_i+0x214>
 8003fb6:	e7eb      	b.n	8003f90 <_printf_i+0x208>
 8003fb8:	2500      	movs	r5, #0
 8003fba:	f104 0619 	add.w	r6, r4, #25
 8003fbe:	e7f5      	b.n	8003fac <_printf_i+0x224>
 8003fc0:	08004133 	.word	0x08004133
 8003fc4:	08004144 	.word	0x08004144

08003fc8 <memmove>:
 8003fc8:	4288      	cmp	r0, r1
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	eb01 0402 	add.w	r4, r1, r2
 8003fd0:	d902      	bls.n	8003fd8 <memmove+0x10>
 8003fd2:	4284      	cmp	r4, r0
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	d807      	bhi.n	8003fe8 <memmove+0x20>
 8003fd8:	1e43      	subs	r3, r0, #1
 8003fda:	42a1      	cmp	r1, r4
 8003fdc:	d008      	beq.n	8003ff0 <memmove+0x28>
 8003fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fe6:	e7f8      	b.n	8003fda <memmove+0x12>
 8003fe8:	4601      	mov	r1, r0
 8003fea:	4402      	add	r2, r0
 8003fec:	428a      	cmp	r2, r1
 8003fee:	d100      	bne.n	8003ff2 <memmove+0x2a>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ffa:	e7f7      	b.n	8003fec <memmove+0x24>

08003ffc <_sbrk_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	2300      	movs	r3, #0
 8004000:	4d05      	ldr	r5, [pc, #20]	@ (8004018 <_sbrk_r+0x1c>)
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	f7fc ffcc 	bl	8000fa4 <_sbrk>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_sbrk_r+0x1a>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_sbrk_r+0x1a>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	200002c4 	.word	0x200002c4

0800401c <memchr>:
 800401c:	4603      	mov	r3, r0
 800401e:	b510      	push	{r4, lr}
 8004020:	b2c9      	uxtb	r1, r1
 8004022:	4402      	add	r2, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	4618      	mov	r0, r3
 8004028:	d101      	bne.n	800402e <memchr+0x12>
 800402a:	2000      	movs	r0, #0
 800402c:	e003      	b.n	8004036 <memchr+0x1a>
 800402e:	7804      	ldrb	r4, [r0, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	428c      	cmp	r4, r1
 8004034:	d1f6      	bne.n	8004024 <memchr+0x8>
 8004036:	bd10      	pop	{r4, pc}

08004038 <memcpy>:
 8004038:	440a      	add	r2, r1
 800403a:	4291      	cmp	r1, r2
 800403c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004040:	d100      	bne.n	8004044 <memcpy+0xc>
 8004042:	4770      	bx	lr
 8004044:	b510      	push	{r4, lr}
 8004046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404a:	4291      	cmp	r1, r2
 800404c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004050:	d1f9      	bne.n	8004046 <memcpy+0xe>
 8004052:	bd10      	pop	{r4, pc}

08004054 <_realloc_r>:
 8004054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004058:	4680      	mov	r8, r0
 800405a:	4615      	mov	r5, r2
 800405c:	460c      	mov	r4, r1
 800405e:	b921      	cbnz	r1, 800406a <_realloc_r+0x16>
 8004060:	4611      	mov	r1, r2
 8004062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	f7ff bc39 	b.w	80038dc <_malloc_r>
 800406a:	b92a      	cbnz	r2, 8004078 <_realloc_r+0x24>
 800406c:	f7ff fbcc 	bl	8003808 <_free_r>
 8004070:	2400      	movs	r4, #0
 8004072:	4620      	mov	r0, r4
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004078:	f000 f81a 	bl	80040b0 <_malloc_usable_size_r>
 800407c:	4285      	cmp	r5, r0
 800407e:	4606      	mov	r6, r0
 8004080:	d802      	bhi.n	8004088 <_realloc_r+0x34>
 8004082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004086:	d8f4      	bhi.n	8004072 <_realloc_r+0x1e>
 8004088:	4629      	mov	r1, r5
 800408a:	4640      	mov	r0, r8
 800408c:	f7ff fc26 	bl	80038dc <_malloc_r>
 8004090:	4607      	mov	r7, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	d0ec      	beq.n	8004070 <_realloc_r+0x1c>
 8004096:	42b5      	cmp	r5, r6
 8004098:	462a      	mov	r2, r5
 800409a:	4621      	mov	r1, r4
 800409c:	bf28      	it	cs
 800409e:	4632      	movcs	r2, r6
 80040a0:	f7ff ffca 	bl	8004038 <memcpy>
 80040a4:	4621      	mov	r1, r4
 80040a6:	4640      	mov	r0, r8
 80040a8:	f7ff fbae 	bl	8003808 <_free_r>
 80040ac:	463c      	mov	r4, r7
 80040ae:	e7e0      	b.n	8004072 <_realloc_r+0x1e>

080040b0 <_malloc_usable_size_r>:
 80040b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b4:	1f18      	subs	r0, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfbc      	itt	lt
 80040ba:	580b      	ldrlt	r3, [r1, r0]
 80040bc:	18c0      	addlt	r0, r0, r3
 80040be:	4770      	bx	lr

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
